{"version":3,"sources":["../node_modules/_@babel_runtime@7.3.1@@babel/runtime/regenerator/index.js","../node_modules/_@babel_runtime@7.3.1@@babel/runtime/helpers/esm/asyncToGenerator.js","../node_modules/_gl-matrix@3.0.0@gl-matrix/esm/common.js","../node_modules/_gl-matrix@3.0.0@gl-matrix/esm/mat2.js","../node_modules/_gl-matrix@3.0.0@gl-matrix/esm/mat2d.js","../node_modules/_gl-matrix@3.0.0@gl-matrix/esm/mat3.js","../node_modules/_gl-matrix@3.0.0@gl-matrix/esm/mat4.js","../node_modules/_gl-matrix@3.0.0@gl-matrix/esm/vec3.js","../node_modules/_gl-matrix@3.0.0@gl-matrix/esm/vec4.js","../node_modules/_gl-matrix@3.0.0@gl-matrix/esm/quat.js","../node_modules/_gl-matrix@3.0.0@gl-matrix/esm/quat2.js","../node_modules/_gl-matrix@3.0.0@gl-matrix/esm/vec2.js","../node_modules/_gl-matrix@3.0.0@gl-matrix/esm/index.js","../node_modules/_regenerator-runtime@0.12.1@regenerator-runtime/runtime-module.js","../node_modules/_regenerator-runtime@0.12.1@regenerator-runtime/runtime.js"],"names":["module","exports","__webpack_require__","asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","value","error","done","Promise","then","_asyncToGenerator","fn","self","this","args","arguments","apply","err","undefined","d","__webpack_exports__","EPSILON","ARRAY_TYPE","Float32Array","Array","RANDOM","Math","random","setMatrixArrayType","type","degree","PI","toRadian","a","equals","b","abs","max","create","out","clone","copy","identity","fromValues","m00","m01","m10","m11","set","transpose","a1","invert","a0","a2","a3","det","adjoint","determinant","multiply","b0","b1","b2","b3","rotate","rad","s","sin","c","cos","mat2_scale","v","v0","v1","fromRotation","fromScaling","str","frob","sqrt","pow","LDU","L","D","U","add","subtract","exactEquals","mat2_equals","multiplyScalar","multiplyScalarAndAdd","scale","mul","sub","mat2d_create","mat2d_clone","mat2d_copy","mat2d_identity","mat2d_fromValues","tx","ty","mat2d_set","mat2d_invert","aa","ab","ac","ad","atx","aty","mat2d_determinant","mat2d_multiply","a4","a5","b4","b5","mat2d_rotate","mat2d_scale","translate","mat2d_fromRotation","mat2d_fromScaling","fromTranslation","mat2d_str","mat2d_frob","mat2d_add","mat2d_subtract","mat2d_multiplyScalar","mat2d_multiplyScalarAndAdd","mat2d_exactEquals","mat2d_equals","mat2d_mul","mat2d_sub","mat3_create","fromMat4","mat3_clone","mat3_copy","mat3_fromValues","m02","m12","m20","m21","m22","mat3_set","mat3_identity","mat3_transpose","a01","a02","a12","mat3_invert","a00","a10","a11","a20","a21","a22","b01","b11","b21","mat3_adjoint","mat3_determinant","mat3_multiply","b00","b02","b10","b12","b20","b22","mat3_translate","x","y","mat3_rotate","mat3_scale","mat3_fromTranslation","mat3_fromRotation","mat3_fromScaling","fromMat2d","fromQuat","q","z","w","x2","y2","z2","xx","yx","yy","zx","zy","zz","wx","wy","wz","normalFromMat4","a03","a13","a23","a30","a31","a32","a33","b03","b04","b05","b06","b07","b08","b09","projection","width","height","mat3_str","mat3_frob","mat3_add","mat3_subtract","mat3_multiplyScalar","mat3_multiplyScalarAndAdd","mat3_exactEquals","mat3_equals","a6","a7","a8","b6","b7","b8","mat3_mul","mat3_sub","mat4_create","mat4_clone","mat4_copy","mat4_fromValues","m03","m13","m23","m30","m31","m32","m33","mat4_set","mat4_identity","mat4_transpose","mat4_invert","mat4_adjoint","mat4_determinant","mat4_multiply","mat4_translate","mat4_scale","mat4_rotate","axis","t","len","rotateX","rotateY","rotateZ","mat4_fromTranslation","mat4_fromScaling","mat4_fromRotation","fromXRotation","fromYRotation","fromZRotation","fromRotationTranslation","xy","xz","yz","fromQuat2","translation","bx","by","bz","bw","ax","ay","az","aw","magnitude","getTranslation","mat","getScaling","getRotation","trace","S","fromRotationTranslationScale","sx","sy","sz","fromRotationTranslationScaleOrigin","o","ox","oy","oz","out0","out1","out2","out4","out5","out6","out8","out9","out10","mat4_fromQuat","frustum","left","right","bottom","top","near","far","rl","tb","nf","perspective","fovy","aspect","f","tan","Infinity","perspectiveFromFieldOfView","fov","upTan","upDegrees","downTan","downDegrees","leftTan","leftDegrees","rightTan","rightDegrees","xScale","yScale","ortho","lr","bt","lookAt","eye","center","up","x0","x1","y0","y1","z0","z1","eyex","eyey","eyez","upx","upy","upz","centerx","centery","centerz","targetTo","target","mat4_str","mat4_frob","mat4_add","mat4_subtract","mat4_multiplyScalar","mat4_multiplyScalarAndAdd","mat4_exactEquals","mat4_equals","a9","a14","a15","b9","b13","b14","b15","mat4_mul","mat4_sub","vec3_create","vec3_clone","vec3_length","vec3_fromValues","vec3_copy","vec3_set","vec3_add","vec3_subtract","vec3_multiply","divide","ceil","floor","min","round","vec3_scale","scaleAndAdd","distance","squaredDistance","squaredLength","negate","inverse","normalize","vec3_dot","cross","lerp","hermite","factorTimes2","factor1","factor2","factor3","factor4","bezier","inverseFactor","inverseFactorTimesTwo","r","zScale","transformMat4","m","transformMat3","transformQuat","qx","qy","qz","qw","uvx","uvy","uvz","uuvx","uuvy","uuvz","w2","vec3_rotateX","p","vec3_rotateY","vec3_rotateZ","angle","tempA","tempB","cosine","acos","zero","vec3_str","vec3_exactEquals","vec3_equals","vec3_sub","vec3_mul","div","dist","sqrDist","vec3_len","sqrLen","forEach","vec","stride","offset","count","i","l","length","vec4_create","vec4_clone","vec4_fromValues","vec4_copy","vec4_set","vec4_add","vec4_subtract","vec4_multiply","vec4_divide","vec4_ceil","vec4_floor","vec4_min","vec4_max","vec4_round","vec4_scale","vec4_scaleAndAdd","vec4_distance","vec4_squaredDistance","vec4_length","vec4_squaredLength","vec4_negate","vec4_inverse","vec4_normalize","vec4_dot","vec4_cross","u","A","B","C","E","F","G","H","I","J","vec4_lerp","vec4_random","v2","v3","v4","s1","s2","vec4_transformMat4","vec4_transformQuat","ix","iy","iz","iw","vec4_zero","vec4_str","vec4_exactEquals","vec4_equals","vec4_sub","vec4_mul","vec4_div","vec4_dist","vec4_sqrDist","vec4_len","vec4_sqrLen","vec4_forEach","quat_create","quat_identity","setAxisAngle","getAxisAngle","out_axis","quat_multiply","quat_rotateX","quat_rotateY","quat_rotateZ","calculateW","slerp","omega","cosom","sinom","scale0","scale1","quat_random","u1","u2","u3","sqrt1MinusU1","sqrtU1","quat_invert","dot","invDot","conjugate","fromMat3","fRoot","fTrace","j","k","fromEuler","halfToRad","cx","cy","cz","quat_str","quat_clone","quat_fromValues","quat_copy","quat_set","quat_add","quat_mul","quat_scale","quat_dot","quat_lerp","quat_length","quat_len","quat_squaredLength","quat_sqrLen","quat_normalize","quat_exactEquals","quat_equals","rotationTo","tmpvec3","xUnitVec3","yUnitVec3","sqlerp","temp1","temp2","setAxes","matr","view","quat2_create","dq","quat2_clone","quat2_fromValues","w1","fromRotationTranslationValues","quat2_fromRotationTranslation","quat2_fromTranslation","quat2_fromRotation","quat2_fromMat4","outer","quat2_copy","quat2_identity","quat2_set","getReal","getDual","setReal","setDual","quat2_getTranslation","quat2_translate","ax1","ay1","az1","aw1","bx1","by1","bz1","ax2","ay2","az2","aw2","quat2_rotateX","quat2_rotateY","quat2_rotateZ","rotateByQuatAppend","rotateByQuatPrepend","rotateAroundAxis","axisLength","quat2_add","quat2_multiply","ax0","ay0","az0","aw0","bw1","bx0","by0","bz0","bw0","quat2_mul","quat2_scale","quat2_dot","quat2_lerp","mt","quat2_invert","sqlen","quat2_squaredLength","quat2_conjugate","quat2_length","quat2_len","quat2_sqrLen","quat2_normalize","a_dot_b","quat2_str","quat2_exactEquals","quat2_equals","vec2_create","vec2_clone","vec2_fromValues","vec2_copy","vec2_set","vec2_add","vec2_subtract","vec2_multiply","vec2_divide","vec2_ceil","vec2_floor","vec2_min","vec2_max","vec2_round","vec2_scale","vec2_scaleAndAdd","vec2_distance","vec2_squaredDistance","vec2_length","vec2_squaredLength","vec2_negate","vec2_inverse","vec2_normalize","vec2_dot","vec2_cross","vec2_lerp","vec2_random","transformMat2","transformMat2d","vec2_transformMat3","vec2_transformMat4","vec2_rotate","p0","p1","sinC","cosC","vec2_angle","len1","len2","vec2_zero","vec2_str","vec2_exactEquals","vec2_equals","vec2_len","vec2_sub","vec2_mul","vec2_div","vec2_dist","vec2_sqrDist","vec2_sqrLen","vec2_forEach","common_namespaceObject","mat2_namespaceObject","mat2d_namespaceObject","mat3_namespaceObject","mat4_namespaceObject","quat_namespaceObject","quat2_namespaceObject","vec2_namespaceObject","vec3_namespaceObject","vec4_namespaceObject","g","Function","hadRuntime","regeneratorRuntime","Object","getOwnPropertyNames","indexOf","oldRuntime","e","global","Op","prototype","hasOwn","hasOwnProperty","$Symbol","Symbol","iteratorSymbol","iterator","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","inModule","runtime","wrap","GenStateSuspendedStart","GenStateSuspendedYield","GenStateExecuting","GenStateCompleted","ContinueSentinel","IteratorPrototype","getProto","getPrototypeOf","NativeIteratorPrototype","values","call","Gp","GeneratorFunctionPrototype","Generator","GeneratorFunction","constructor","displayName","isGeneratorFunction","genFun","ctor","name","mark","setPrototypeOf","__proto__","awrap","__await","defineIteratorMethods","AsyncIterator","async","innerFn","outerFn","tryLocsList","iter","next","result","toString","keys","object","push","reverse","pop","Context","reset","skipTempReset","prev","sent","_sent","delegate","method","tryEntries","resetTryEntry","charAt","isNaN","slice","stop","rootRecord","completion","rval","dispatchException","exception","context","handle","loc","caught","record","entry","tryLoc","hasCatch","hasFinally","catchLoc","finallyLoc","Error","abrupt","finallyEntry","complete","afterLoc","finish","catch","thrown","delegateYield","iterable","resultName","nextLoc","protoGenerator","generator","_invoke","state","doneResult","delegateResult","maybeInvokeDelegate","tryCatch","makeInvokeMethod","obj","previousPromise","callInvokeWithMethodAndArg","invoke","unwrapped","return","TypeError","pushTryEntry","locs","iteratorMethod"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAQ,qCCAzB,SAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GACA,IACA,IAAAC,EAAAP,EAAAK,GAAAC,GACAE,EAAAD,EAAAC,MACG,MAAAC,GAEH,YADAP,EAAAO,GAIAF,EAAAG,KACAT,EAAAO,GAEAG,QAAAV,QAAAO,GAAAI,KAAAT,EAAAC,GAIe,SAAAS,EAAAC,GACf,kBACA,IAAAC,EAAAC,KACAC,EAAAC,UACA,WAAAP,QAAA,SAAAV,EAAAC,GACA,IAAAF,EAAAc,EAAAK,MAAAJ,EAAAE,GAEA,SAAAd,EAAAK,GACAT,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAAI,GAGA,SAAAJ,EAAAgB,GACArB,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,QAAAgB,GAGAjB,OAAAkB,MA/BAvB,EAAAwB,EAAAC,EAAA,sBAAAV,09aCKO,IAAAW,EAAA,KACAC,EAAA,qBAAAC,0BAAAC,MACAC,EAAAC,KAAAC,OAOA,SAAAC,EAAAC,GACPP,EAAAO,EAEA,IAAAC,EAAAJ,KAAAK,GAAA,IAOO,SAAAC,EAAAC,GACP,OAAAA,EAAAH,EAYO,SAAAI,EAAAD,EAAAE,GACP,OAAAT,KAAAU,IAAAH,EAAAE,IAAAd,EAAAK,KAAAW,IAAA,EAAAX,KAAAU,IAAAH,GAAAP,KAAAU,IAAAD,IC1BO,SAAAG,IACP,IAAAC,EAAA,IAAgBjB,EAAmB,GASnC,OAPMA,GAAmBC,eACzBgB,EAAA,KACAA,EAAA,MAGAA,EAAA,KACAA,EAAA,KACAA,EASO,SAAAC,EAAAP,GACP,IAAAM,EAAA,IAAgBjB,EAAmB,GAKnC,OAJAiB,EAAA,GAAAN,EAAA,GACAM,EAAA,GAAAN,EAAA,GACAM,EAAA,GAAAN,EAAA,GACAM,EAAA,GAAAN,EAAA,GACAM,EAUO,SAAAE,EAAAF,EAAAN,GAKP,OAJAM,EAAA,GAAAN,EAAA,GACAM,EAAA,GAAAN,EAAA,GACAM,EAAA,GAAAN,EAAA,GACAM,EAAA,GAAAN,EAAA,GACAM,EASO,SAAAG,EAAAH,GAKP,OAJAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAYO,SAAAI,EAAAC,EAAAC,EAAAC,EAAAC,GACP,IAAAR,EAAA,IAAgBjB,EAAmB,GAKnC,OAJAiB,EAAA,GAAAK,EACAL,EAAA,GAAAM,EACAN,EAAA,GAAAO,EACAP,EAAA,GAAAQ,EACAR,EAaO,SAAAS,EAAAT,EAAAK,EAAAC,EAAAC,EAAAC,GAKP,OAJAR,EAAA,GAAAK,EACAL,EAAA,GAAAM,EACAN,EAAA,GAAAO,EACAP,EAAA,GAAAQ,EACAR,EAUO,SAAAU,EAAAV,EAAAN,GAGP,GAAAM,IAAAN,EAAA,CACA,IAAAiB,EAAAjB,EAAA,GACAM,EAAA,GAAAN,EAAA,GACAM,EAAA,GAAAW,OAEAX,EAAA,GAAAN,EAAA,GACAM,EAAA,GAAAN,EAAA,GACAM,EAAA,GAAAN,EAAA,GACAM,EAAA,GAAAN,EAAA,GAGA,OAAAM,EAUO,SAAAY,EAAAZ,EAAAN,GACP,IAAAmB,EAAAnB,EAAA,GACAiB,EAAAjB,EAAA,GACAoB,EAAApB,EAAA,GACAqB,EAAArB,EAAA,GAEAsB,EAAAH,EAAAE,EAAAD,EAAAH,EAEA,OAAAK,GAIAA,EAAA,EAAAA,EACAhB,EAAA,GAAAe,EAAAC,EACAhB,EAAA,IAAAW,EAAAK,EACAhB,EAAA,IAAAc,EAAAE,EACAhB,EAAA,GAAAa,EAAAG,EACAhB,GARA,KAkBO,SAAAiB,EAAAjB,EAAAN,GAEP,IAAAmB,EAAAnB,EAAA,GAKA,OAJAM,EAAA,GAAAN,EAAA,GACAM,EAAA,IAAAN,EAAA,GACAM,EAAA,IAAAN,EAAA,GACAM,EAAA,GAAAa,EACAb,EASO,SAAAkB,EAAAxB,GACP,OAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAWO,SAAAyB,EAAAnB,EAAAN,EAAAE,GACP,IAAAiB,EAAAnB,EAAA,GACAiB,EAAAjB,EAAA,GACAoB,EAAApB,EAAA,GACAqB,EAAArB,EAAA,GACA0B,EAAAxB,EAAA,GACAyB,EAAAzB,EAAA,GACA0B,EAAA1B,EAAA,GACA2B,EAAA3B,EAAA,GAKA,OAJAI,EAAA,GAAAa,EAAAO,EAAAN,EAAAO,EACArB,EAAA,GAAAW,EAAAS,EAAAL,EAAAM,EACArB,EAAA,GAAAa,EAAAS,EAAAR,EAAAS,EACAvB,EAAA,GAAAW,EAAAW,EAAAP,EAAAQ,EACAvB,EAWO,SAAAwB,EAAAxB,EAAAN,EAAA+B,GACP,IAAAZ,EAAAnB,EAAA,GACAiB,EAAAjB,EAAA,GACAoB,EAAApB,EAAA,GACAqB,EAAArB,EAAA,GACAgC,EAAAvC,KAAAwC,IAAAF,GACAG,EAAAzC,KAAA0C,IAAAJ,GAKA,OAJAzB,EAAA,GAAAa,EAAAe,EAAAd,EAAAY,EACA1B,EAAA,GAAAW,EAAAiB,EAAAb,EAAAW,EACA1B,EAAA,GAAAa,GAAAa,EAAAZ,EAAAc,EACA5B,EAAA,GAAAW,GAAAe,EAAAX,EAAAa,EACA5B,EAWO,SAAS8B,EAAK9B,EAAAN,EAAAqC,GACrB,IAAAlB,EAAAnB,EAAA,GACAiB,EAAAjB,EAAA,GACAoB,EAAApB,EAAA,GACAqB,EAAArB,EAAA,GACAsC,EAAAD,EAAA,GACAE,EAAAF,EAAA,GAKA,OAJA/B,EAAA,GAAAa,EAAAmB,EACAhC,EAAA,GAAAW,EAAAqB,EACAhC,EAAA,GAAAc,EAAAmB,EACAjC,EAAA,GAAAe,EAAAkB,EACAjC,EAcO,SAAAkC,EAAAlC,EAAAyB,GACP,IAAAC,EAAAvC,KAAAwC,IAAAF,GACAG,EAAAzC,KAAA0C,IAAAJ,GAKA,OAJAzB,EAAA,GAAA4B,EACA5B,EAAA,GAAA0B,EACA1B,EAAA,IAAA0B,EACA1B,EAAA,GAAA4B,EACA5B,EAcO,SAAAmC,EAAAnC,EAAA+B,GAKP,OAJA/B,EAAA,GAAA+B,EAAA,GACA/B,EAAA,KACAA,EAAA,KACAA,EAAA,GAAA+B,EAAA,GACA/B,EASO,SAAAoC,EAAA1C,GACP,cAAAA,EAAA,QAAAA,EAAA,QAAAA,EAAA,QAAAA,EAAA,OASO,SAAA2C,EAAA3C,GACP,OAAAP,KAAAmD,KAAAnD,KAAAoD,IAAA7C,EAAA,MAAAP,KAAAoD,IAAA7C,EAAA,MAAAP,KAAAoD,IAAA7C,EAAA,MAAAP,KAAAoD,IAAA7C,EAAA,OAUO,SAAA8C,EAAAC,EAAAC,EAAAC,EAAAjD,GAKP,OAJA+C,EAAA,GAAA/C,EAAA,GAAAA,EAAA,GACAiD,EAAA,GAAAjD,EAAA,GACAiD,EAAA,GAAAjD,EAAA,GACAiD,EAAA,GAAAjD,EAAA,GAAA+C,EAAA,GAAAE,EAAA,GACA,CAAAF,EAAAC,EAAAC,GAWO,SAAAC,EAAA5C,EAAAN,EAAAE,GAKP,OAJAI,EAAA,GAAAN,EAAA,GAAAE,EAAA,GACAI,EAAA,GAAAN,EAAA,GAAAE,EAAA,GACAI,EAAA,GAAAN,EAAA,GAAAE,EAAA,GACAI,EAAA,GAAAN,EAAA,GAAAE,EAAA,GACAI,EAWO,SAAA6C,EAAA7C,EAAAN,EAAAE,GAKP,OAJAI,EAAA,GAAAN,EAAA,GAAAE,EAAA,GACAI,EAAA,GAAAN,EAAA,GAAAE,EAAA,GACAI,EAAA,GAAAN,EAAA,GAAAE,EAAA,GACAI,EAAA,GAAAN,EAAA,GAAAE,EAAA,GACAI,EAUO,SAAA8C,EAAApD,EAAAE,GACP,OAAAF,EAAA,KAAAE,EAAA,IAAAF,EAAA,KAAAE,EAAA,IAAAF,EAAA,KAAAE,EAAA,IAAAF,EAAA,KAAAE,EAAA,GAUO,SAASmD,EAAMrD,EAAAE,GACtB,IAAAiB,EAAAnB,EAAA,GACAiB,EAAAjB,EAAA,GACAoB,EAAApB,EAAA,GACAqB,EAAArB,EAAA,GACA0B,EAAAxB,EAAA,GACAyB,EAAAzB,EAAA,GACA0B,EAAA1B,EAAA,GACA2B,EAAA3B,EAAA,GACA,OAAAT,KAAAU,IAAAgB,EAAAO,IAA8BtC,EAAgBK,KAAAW,IAAA,EAAAX,KAAAU,IAAAgB,GAAA1B,KAAAU,IAAAuB,KAAAjC,KAAAU,IAAAc,EAAAU,IAAqEvC,EAAgBK,KAAAW,IAAA,EAAAX,KAAAU,IAAAc,GAAAxB,KAAAU,IAAAwB,KAAAlC,KAAAU,IAAAiB,EAAAQ,IAAqExC,EAAgBK,KAAAW,IAAA,EAAAX,KAAAU,IAAAiB,GAAA3B,KAAAU,IAAAyB,KAAAnC,KAAAU,IAAAkB,EAAAQ,IAAqEzC,EAAgBK,KAAAW,IAAA,EAAAX,KAAAU,IAAAkB,GAAA5B,KAAAU,IAAA0B,IAWtS,SAAAyB,EAAAhD,EAAAN,EAAAE,GAKP,OAJAI,EAAA,GAAAN,EAAA,GAAAE,EACAI,EAAA,GAAAN,EAAA,GAAAE,EACAI,EAAA,GAAAN,EAAA,GAAAE,EACAI,EAAA,GAAAN,EAAA,GAAAE,EACAI,EAYO,SAAAiD,EAAAjD,EAAAN,EAAAE,EAAAsD,GAKP,OAJAlD,EAAA,GAAAN,EAAA,GAAAE,EAAA,GAAAsD,EACAlD,EAAA,GAAAN,EAAA,GAAAE,EAAA,GAAAsD,EACAlD,EAAA,GAAAN,EAAA,GAAAE,EAAA,GAAAsD,EACAlD,EAAA,GAAAN,EAAA,GAAAE,EAAA,GAAAsD,EACAlD,EAOO,IAAAmD,EAAAhC,EAMAiC,EAAAP,ECrZA,SAASQ,IAChB,IAAArD,EAAA,IAAgBjB,EAAmB,GAWnC,OATMA,GAAmBC,eACzBgB,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,MAGAA,EAAA,KACAA,EAAA,KACAA,EASO,SAASsD,EAAK5D,GACrB,IAAAM,EAAA,IAAgBjB,EAAmB,GAOnC,OANAiB,EAAA,GAAAN,EAAA,GACAM,EAAA,GAAAN,EAAA,GACAM,EAAA,GAAAN,EAAA,GACAM,EAAA,GAAAN,EAAA,GACAM,EAAA,GAAAN,EAAA,GACAM,EAAA,GAAAN,EAAA,GACAM,EAUO,SAASuD,EAAIvD,EAAAN,GAOpB,OANAM,EAAA,GAAAN,EAAA,GACAM,EAAA,GAAAN,EAAA,GACAM,EAAA,GAAAN,EAAA,GACAM,EAAA,GAAAN,EAAA,GACAM,EAAA,GAAAN,EAAA,GACAM,EAAA,GAAAN,EAAA,GACAM,EASO,SAASwD,EAAQxD,GAOxB,OANAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAcO,SAASyD,EAAU/D,EAAAE,EAAAgC,EAAAhD,EAAA8E,EAAAC,GAC1B,IAAA3D,EAAA,IAAgBjB,EAAmB,GAOnC,OANAiB,EAAA,GAAAN,EACAM,EAAA,GAAAJ,EACAI,EAAA,GAAA4B,EACA5B,EAAA,GAAApB,EACAoB,EAAA,GAAA0D,EACA1D,EAAA,GAAA2D,EACA3D,EAeO,SAAS4D,EAAG5D,EAAAN,EAAAE,EAAAgC,EAAAhD,EAAA8E,EAAAC,GAOnB,OANA3D,EAAA,GAAAN,EACAM,EAAA,GAAAJ,EACAI,EAAA,GAAA4B,EACA5B,EAAA,GAAApB,EACAoB,EAAA,GAAA0D,EACA1D,EAAA,GAAA2D,EACA3D,EAUO,SAAS6D,EAAM7D,EAAAN,GACtB,IAAAoE,EAAApE,EAAA,GACAqE,EAAArE,EAAA,GACAsE,EAAAtE,EAAA,GACAuE,EAAAvE,EAAA,GACAwE,EAAAxE,EAAA,GACAyE,EAAAzE,EAAA,GACAsB,EAAA8C,EAAAG,EAAAF,EAAAC,EAEA,OAAAhD,GAIAA,EAAA,EAAAA,EACAhB,EAAA,GAAAiE,EAAAjD,EACAhB,EAAA,IAAA+D,EAAA/C,EACAhB,EAAA,IAAAgE,EAAAhD,EACAhB,EAAA,GAAA8D,EAAA9C,EACAhB,EAAA,IAAAgE,EAAAG,EAAAF,EAAAC,GAAAlD,EACAhB,EAAA,IAAA+D,EAAAG,EAAAJ,EAAAK,GAAAnD,EACAhB,GAVA,KAmBO,SAASoE,EAAW1E,GAC3B,OAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAWO,SAAS2E,GAAQrE,EAAAN,EAAAE,GACxB,IAAAiB,EAAAnB,EAAA,GACAiB,EAAAjB,EAAA,GACAoB,EAAApB,EAAA,GACAqB,EAAArB,EAAA,GACA4E,EAAA5E,EAAA,GACA6E,EAAA7E,EAAA,GACA0B,EAAAxB,EAAA,GACAyB,EAAAzB,EAAA,GACA0B,EAAA1B,EAAA,GACA2B,EAAA3B,EAAA,GACA4E,EAAA5E,EAAA,GACA6E,EAAA7E,EAAA,GAOA,OANAI,EAAA,GAAAa,EAAAO,EAAAN,EAAAO,EACArB,EAAA,GAAAW,EAAAS,EAAAL,EAAAM,EACArB,EAAA,GAAAa,EAAAS,EAAAR,EAAAS,EACAvB,EAAA,GAAAW,EAAAW,EAAAP,EAAAQ,EACAvB,EAAA,GAAAa,EAAA2D,EAAA1D,EAAA2D,EAAAH,EACAtE,EAAA,GAAAW,EAAA6D,EAAAzD,EAAA0D,EAAAF,EACAvE,EAWO,SAAS0E,GAAM1E,EAAAN,EAAA+B,GACtB,IAAAZ,EAAAnB,EAAA,GACAiB,EAAAjB,EAAA,GACAoB,EAAApB,EAAA,GACAqB,EAAArB,EAAA,GACA4E,EAAA5E,EAAA,GACA6E,EAAA7E,EAAA,GACAgC,EAAAvC,KAAAwC,IAAAF,GACAG,EAAAzC,KAAA0C,IAAAJ,GAOA,OANAzB,EAAA,GAAAa,EAAAe,EAAAd,EAAAY,EACA1B,EAAA,GAAAW,EAAAiB,EAAAb,EAAAW,EACA1B,EAAA,GAAAa,GAAAa,EAAAZ,EAAAc,EACA5B,EAAA,GAAAW,GAAAe,EAAAX,EAAAa,EACA5B,EAAA,GAAAsE,EACAtE,EAAA,GAAAuE,EACAvE,EAWO,SAAS2E,GAAK3E,EAAAN,EAAAqC,GACrB,IAAAlB,EAAAnB,EAAA,GACAiB,EAAAjB,EAAA,GACAoB,EAAApB,EAAA,GACAqB,EAAArB,EAAA,GACA4E,EAAA5E,EAAA,GACA6E,EAAA7E,EAAA,GACAsC,EAAAD,EAAA,GACAE,EAAAF,EAAA,GAOA,OANA/B,EAAA,GAAAa,EAAAmB,EACAhC,EAAA,GAAAW,EAAAqB,EACAhC,EAAA,GAAAc,EAAAmB,EACAjC,EAAA,GAAAe,EAAAkB,EACAjC,EAAA,GAAAsE,EACAtE,EAAA,GAAAuE,EACAvE,EAWO,SAAA4E,GAAA5E,EAAAN,EAAAqC,GACP,IAAAlB,EAAAnB,EAAA,GACAiB,EAAAjB,EAAA,GACAoB,EAAApB,EAAA,GACAqB,EAAArB,EAAA,GACA4E,EAAA5E,EAAA,GACA6E,EAAA7E,EAAA,GACAsC,EAAAD,EAAA,GACAE,EAAAF,EAAA,GAOA,OANA/B,EAAA,GAAAa,EACAb,EAAA,GAAAW,EACAX,EAAA,GAAAc,EACAd,EAAA,GAAAe,EACAf,EAAA,GAAAa,EAAAmB,EAAAlB,EAAAmB,EAAAqC,EACAtE,EAAA,GAAAW,EAAAqB,EAAAjB,EAAAkB,EAAAsC,EACAvE,EAcO,SAAS6E,GAAY7E,EAAAyB,GAC5B,IAAAC,EAAAvC,KAAAwC,IAAAF,GACAG,EAAAzC,KAAA0C,IAAAJ,GAOA,OANAzB,EAAA,GAAA4B,EACA5B,EAAA,GAAA0B,EACA1B,EAAA,IAAA0B,EACA1B,EAAA,GAAA4B,EACA5B,EAAA,KACAA,EAAA,KACAA,EAcO,SAAS8E,GAAW9E,EAAA+B,GAO3B,OANA/B,EAAA,GAAA+B,EAAA,GACA/B,EAAA,KACAA,EAAA,KACAA,EAAA,GAAA+B,EAAA,GACA/B,EAAA,KACAA,EAAA,KACAA,EAcO,SAAA+E,GAAA/E,EAAA+B,GAOP,OANA/B,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,GAAA+B,EAAA,GACA/B,EAAA,GAAA+B,EAAA,GACA/B,EASO,SAASgF,GAAGtF,GACnB,eAAAA,EAAA,QAAAA,EAAA,QAAAA,EAAA,QAAAA,EAAA,QAAAA,EAAA,QAAAA,EAAA,OASO,SAASuF,GAAIvF,GACpB,OAAAP,KAAAmD,KAAAnD,KAAAoD,IAAA7C,EAAA,MAAAP,KAAAoD,IAAA7C,EAAA,MAAAP,KAAAoD,IAAA7C,EAAA,MAAAP,KAAAoD,IAAA7C,EAAA,MAAAP,KAAAoD,IAAA7C,EAAA,MAAAP,KAAAoD,IAAA7C,EAAA,SAWO,SAASwF,GAAGlF,EAAAN,EAAAE,GAOnB,OANAI,EAAA,GAAAN,EAAA,GAAAE,EAAA,GACAI,EAAA,GAAAN,EAAA,GAAAE,EAAA,GACAI,EAAA,GAAAN,EAAA,GAAAE,EAAA,GACAI,EAAA,GAAAN,EAAA,GAAAE,EAAA,GACAI,EAAA,GAAAN,EAAA,GAAAE,EAAA,GACAI,EAAA,GAAAN,EAAA,GAAAE,EAAA,GACAI,EAWO,SAASmF,GAAQnF,EAAAN,EAAAE,GAOxB,OANAI,EAAA,GAAAN,EAAA,GAAAE,EAAA,GACAI,EAAA,GAAAN,EAAA,GAAAE,EAAA,GACAI,EAAA,GAAAN,EAAA,GAAAE,EAAA,GACAI,EAAA,GAAAN,EAAA,GAAAE,EAAA,GACAI,EAAA,GAAAN,EAAA,GAAAE,EAAA,GACAI,EAAA,GAAAN,EAAA,GAAAE,EAAA,GACAI,EAWO,SAASoF,GAAcpF,EAAAN,EAAAE,GAO9B,OANAI,EAAA,GAAAN,EAAA,GAAAE,EACAI,EAAA,GAAAN,EAAA,GAAAE,EACAI,EAAA,GAAAN,EAAA,GAAAE,EACAI,EAAA,GAAAN,EAAA,GAAAE,EACAI,EAAA,GAAAN,EAAA,GAAAE,EACAI,EAAA,GAAAN,EAAA,GAAAE,EACAI,EAYO,SAASqF,GAAoBrF,EAAAN,EAAAE,EAAAsD,GAOpC,OANAlD,EAAA,GAAAN,EAAA,GAAAE,EAAA,GAAAsD,EACAlD,EAAA,GAAAN,EAAA,GAAAE,EAAA,GAAAsD,EACAlD,EAAA,GAAAN,EAAA,GAAAE,EAAA,GAAAsD,EACAlD,EAAA,GAAAN,EAAA,GAAAE,EAAA,GAAAsD,EACAlD,EAAA,GAAAN,EAAA,GAAAE,EAAA,GAAAsD,EACAlD,EAAA,GAAAN,EAAA,GAAAE,EAAA,GAAAsD,EACAlD,EAUO,SAASsF,GAAW5F,EAAAE,GAC3B,OAAAF,EAAA,KAAAE,EAAA,IAAAF,EAAA,KAAAE,EAAA,IAAAF,EAAA,KAAAE,EAAA,IAAAF,EAAA,KAAAE,EAAA,IAAAF,EAAA,KAAAE,EAAA,IAAAF,EAAA,KAAAE,EAAA,GAUO,SAAS2F,GAAM7F,EAAAE,GACtB,IAAAiB,EAAAnB,EAAA,GACAiB,EAAAjB,EAAA,GACAoB,EAAApB,EAAA,GACAqB,EAAArB,EAAA,GACA4E,EAAA5E,EAAA,GACA6E,EAAA7E,EAAA,GACA0B,EAAAxB,EAAA,GACAyB,EAAAzB,EAAA,GACA0B,EAAA1B,EAAA,GACA2B,EAAA3B,EAAA,GACA4E,EAAA5E,EAAA,GACA6E,EAAA7E,EAAA,GACA,OAAAT,KAAAU,IAAAgB,EAAAO,IAA8BtC,EAAgBK,KAAAW,IAAA,EAAAX,KAAAU,IAAAgB,GAAA1B,KAAAU,IAAAuB,KAAAjC,KAAAU,IAAAc,EAAAU,IAAqEvC,EAAgBK,KAAAW,IAAA,EAAAX,KAAAU,IAAAc,GAAAxB,KAAAU,IAAAwB,KAAAlC,KAAAU,IAAAiB,EAAAQ,IAAqExC,EAAgBK,KAAAW,IAAA,EAAAX,KAAAU,IAAAiB,GAAA3B,KAAAU,IAAAyB,KAAAnC,KAAAU,IAAAkB,EAAAQ,IAAqEzC,EAAgBK,KAAAW,IAAA,EAAAX,KAAAU,IAAAkB,GAAA5B,KAAAU,IAAA0B,KAAApC,KAAAU,IAAAyE,EAAAE,IAAqE1F,EAAgBK,KAAAW,IAAA,EAAAX,KAAAU,IAAAyE,GAAAnF,KAAAU,IAAA2E,KAAArF,KAAAU,IAAA0E,EAAAE,IAAqE3F,EAAgBK,KAAAW,IAAA,EAAAX,KAAAU,IAAA0E,GAAApF,KAAAU,IAAA4E,IAOhd,IAAIe,GAAMnB,GAMNoB,GAAMN,GCzdV,SAASO,KAChB,IAAA1F,EAAA,IAAgBjB,EAAmB,GAcnC,OAZMA,GAAmBC,eACzBgB,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,MAGAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAUO,SAAA2F,GAAA3F,EAAAN,GAUP,OATAM,EAAA,GAAAN,EAAA,GACAM,EAAA,GAAAN,EAAA,GACAM,EAAA,GAAAN,EAAA,GACAM,EAAA,GAAAN,EAAA,GACAM,EAAA,GAAAN,EAAA,GACAM,EAAA,GAAAN,EAAA,GACAM,EAAA,GAAAN,EAAA,GACAM,EAAA,GAAAN,EAAA,GACAM,EAAA,GAAAN,EAAA,IACAM,EASO,SAAS4F,GAAKlG,GACrB,IAAAM,EAAA,IAAgBjB,EAAmB,GAUnC,OATAiB,EAAA,GAAAN,EAAA,GACAM,EAAA,GAAAN,EAAA,GACAM,EAAA,GAAAN,EAAA,GACAM,EAAA,GAAAN,EAAA,GACAM,EAAA,GAAAN,EAAA,GACAM,EAAA,GAAAN,EAAA,GACAM,EAAA,GAAAN,EAAA,GACAM,EAAA,GAAAN,EAAA,GACAM,EAAA,GAAAN,EAAA,GACAM,EAUO,SAAS6F,GAAI7F,EAAAN,GAUpB,OATAM,EAAA,GAAAN,EAAA,GACAM,EAAA,GAAAN,EAAA,GACAM,EAAA,GAAAN,EAAA,GACAM,EAAA,GAAAN,EAAA,GACAM,EAAA,GAAAN,EAAA,GACAM,EAAA,GAAAN,EAAA,GACAM,EAAA,GAAAN,EAAA,GACAM,EAAA,GAAAN,EAAA,GACAM,EAAA,GAAAN,EAAA,GACAM,EAiBO,SAAS8F,GAAUzF,EAAAC,EAAAyF,EAAAxF,EAAAC,EAAAwF,EAAAC,EAAAC,EAAAC,GAC1B,IAAAnG,EAAA,IAAgBjB,EAAmB,GAUnC,OATAiB,EAAA,GAAAK,EACAL,EAAA,GAAAM,EACAN,EAAA,GAAA+F,EACA/F,EAAA,GAAAO,EACAP,EAAA,GAAAQ,EACAR,EAAA,GAAAgG,EACAhG,EAAA,GAAAiG,EACAjG,EAAA,GAAAkG,EACAlG,EAAA,GAAAmG,EACAnG,EAkBO,SAASoG,GAAGpG,EAAAK,EAAAC,EAAAyF,EAAAxF,EAAAC,EAAAwF,EAAAC,EAAAC,EAAAC,GAUnB,OATAnG,EAAA,GAAAK,EACAL,EAAA,GAAAM,EACAN,EAAA,GAAA+F,EACA/F,EAAA,GAAAO,EACAP,EAAA,GAAAQ,EACAR,EAAA,GAAAgG,EACAhG,EAAA,GAAAiG,EACAjG,EAAA,GAAAkG,EACAlG,EAAA,GAAAmG,EACAnG,EASO,SAASqG,GAAQrG,GAUxB,OATAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAUO,SAASsG,GAAStG,EAAAN,GAEzB,GAAAM,IAAAN,EAAA,CACA,IAAA6G,EAAA7G,EAAA,GACA8G,EAAA9G,EAAA,GACA+G,EAAA/G,EAAA,GACAM,EAAA,GAAAN,EAAA,GACAM,EAAA,GAAAN,EAAA,GACAM,EAAA,GAAAuG,EACAvG,EAAA,GAAAN,EAAA,GACAM,EAAA,GAAAwG,EACAxG,EAAA,GAAAyG,OAEAzG,EAAA,GAAAN,EAAA,GACAM,EAAA,GAAAN,EAAA,GACAM,EAAA,GAAAN,EAAA,GACAM,EAAA,GAAAN,EAAA,GACAM,EAAA,GAAAN,EAAA,GACAM,EAAA,GAAAN,EAAA,GACAM,EAAA,GAAAN,EAAA,GACAM,EAAA,GAAAN,EAAA,GACAM,EAAA,GAAAN,EAAA,GAGA,OAAAM,EAUO,SAAS0G,GAAM1G,EAAAN,GACtB,IAAAiH,EAAAjH,EAAA,GACA6G,EAAA7G,EAAA,GACA8G,EAAA9G,EAAA,GACAkH,EAAAlH,EAAA,GACAmH,EAAAnH,EAAA,GACA+G,EAAA/G,EAAA,GACAoH,EAAApH,EAAA,GACAqH,EAAArH,EAAA,GACAsH,EAAAtH,EAAA,GACAuH,EAAAD,EAAAH,EAAAJ,EAAAM,EACAG,GAAAF,EAAAJ,EAAAH,EAAAK,EACAK,EAAAJ,EAAAH,EAAAC,EAAAC,EAEA9F,EAAA2F,EAAAM,EAAAV,EAAAW,EAAAV,EAAAW,EAEA,OAAAnG,GAIAA,EAAA,EAAAA,EACAhB,EAAA,GAAAiH,EAAAjG,EACAhB,EAAA,KAAAgH,EAAAT,EAAAC,EAAAO,GAAA/F,EACAhB,EAAA,IAAAyG,EAAAF,EAAAC,EAAAK,GAAA7F,EACAhB,EAAA,GAAAkH,EAAAlG,EACAhB,EAAA,IAAAgH,EAAAL,EAAAH,EAAAM,GAAA9F,EACAhB,EAAA,KAAAyG,EAAAE,EAAAH,EAAAI,GAAA5F,EACAhB,EAAA,GAAAmH,EAAAnG,EACAhB,EAAA,KAAA+G,EAAAJ,EAAAJ,EAAAO,GAAA9F,EACAhB,EAAA,IAAA6G,EAAAF,EAAAJ,EAAAK,GAAA5F,EACAhB,GAbA,KAuBO,SAASoH,GAAOpH,EAAAN,GACvB,IAAAiH,EAAAjH,EAAA,GACA6G,EAAA7G,EAAA,GACA8G,EAAA9G,EAAA,GACAkH,EAAAlH,EAAA,GACAmH,EAAAnH,EAAA,GACA+G,EAAA/G,EAAA,GACAoH,EAAApH,EAAA,GACAqH,EAAArH,EAAA,GACAsH,EAAAtH,EAAA,GAUA,OATAM,EAAA,GAAA6G,EAAAG,EAAAP,EAAAM,EACA/G,EAAA,GAAAwG,EAAAO,EAAAR,EAAAS,EACAhH,EAAA,GAAAuG,EAAAE,EAAAD,EAAAK,EACA7G,EAAA,GAAAyG,EAAAK,EAAAF,EAAAI,EACAhH,EAAA,GAAA2G,EAAAK,EAAAR,EAAAM,EACA9G,EAAA,GAAAwG,EAAAI,EAAAD,EAAAF,EACAzG,EAAA,GAAA4G,EAAAG,EAAAF,EAAAC,EACA9G,EAAA,GAAAuG,EAAAO,EAAAH,EAAAI,EACA/G,EAAA,GAAA2G,EAAAE,EAAAN,EAAAK,EACA5G,EASO,SAASqH,GAAW3H,GAC3B,IAAAiH,EAAAjH,EAAA,GACA6G,EAAA7G,EAAA,GACA8G,EAAA9G,EAAA,GACAkH,EAAAlH,EAAA,GACAmH,EAAAnH,EAAA,GACA+G,EAAA/G,EAAA,GACAoH,EAAApH,EAAA,GACAqH,EAAArH,EAAA,GACAsH,EAAAtH,EAAA,GACA,OAAAiH,GAAAK,EAAAH,EAAAJ,EAAAM,GAAAR,IAAAS,EAAAJ,EAAAH,EAAAK,GAAAN,GAAAO,EAAAH,EAAAC,EAAAC,GAWO,SAASQ,GAAQtH,EAAAN,EAAAE,GACxB,IAAA+G,EAAAjH,EAAA,GACA6G,EAAA7G,EAAA,GACA8G,EAAA9G,EAAA,GACAkH,EAAAlH,EAAA,GACAmH,EAAAnH,EAAA,GACA+G,EAAA/G,EAAA,GACAoH,EAAApH,EAAA,GACAqH,EAAArH,EAAA,GACAsH,EAAAtH,EAAA,GACA6H,EAAA3H,EAAA,GACAqH,EAAArH,EAAA,GACA4H,EAAA5H,EAAA,GACA6H,EAAA7H,EAAA,GACAsH,EAAAtH,EAAA,GACA8H,EAAA9H,EAAA,GACA+H,EAAA/H,EAAA,GACAuH,EAAAvH,EAAA,GACAgI,EAAAhI,EAAA,GAUA,OATAI,EAAA,GAAAuH,EAAAZ,EAAAM,EAAAL,EAAAY,EAAAV,EACA9G,EAAA,GAAAuH,EAAAhB,EAAAU,EAAAJ,EAAAW,EAAAT,EACA/G,EAAA,GAAAuH,EAAAf,EAAAS,EAAAR,EAAAe,EAAAR,EACAhH,EAAA,GAAAyH,EAAAd,EAAAO,EAAAN,EAAAc,EAAAZ,EACA9G,EAAA,GAAAyH,EAAAlB,EAAAW,EAAAL,EAAAa,EAAAX,EACA/G,EAAA,GAAAyH,EAAAjB,EAAAU,EAAAT,EAAAiB,EAAAV,EACAhH,EAAA,GAAA2H,EAAAhB,EAAAQ,EAAAP,EAAAgB,EAAAd,EACA9G,EAAA,GAAA2H,EAAApB,EAAAY,EAAAN,EAAAe,EAAAb,EACA/G,EAAA,GAAA2H,EAAAnB,EAAAW,EAAAV,EAAAmB,EAAAZ,EACAhH,EAWO,SAAS6H,GAAS7H,EAAAN,EAAAqC,GACzB,IAAA4E,EAAAjH,EAAA,GACA6G,EAAA7G,EAAA,GACA8G,EAAA9G,EAAA,GACAkH,EAAAlH,EAAA,GACAmH,EAAAnH,EAAA,GACA+G,EAAA/G,EAAA,GACAoH,EAAApH,EAAA,GACAqH,EAAArH,EAAA,GACAsH,EAAAtH,EAAA,GACAoI,EAAA/F,EAAA,GACAgG,EAAAhG,EAAA,GAUA,OATA/B,EAAA,GAAA2G,EACA3G,EAAA,GAAAuG,EACAvG,EAAA,GAAAwG,EACAxG,EAAA,GAAA4G,EACA5G,EAAA,GAAA6G,EACA7G,EAAA,GAAAyG,EACAzG,EAAA,GAAA8H,EAAAnB,EAAAoB,EAAAnB,EAAAE,EACA9G,EAAA,GAAA8H,EAAAvB,EAAAwB,EAAAlB,EAAAE,EACA/G,EAAA,GAAA8H,EAAAtB,EAAAuB,EAAAtB,EAAAO,EACAhH,EAWO,SAASgI,GAAMhI,EAAAN,EAAA+B,GACtB,IAAAkF,EAAAjH,EAAA,GACA6G,EAAA7G,EAAA,GACA8G,EAAA9G,EAAA,GACAkH,EAAAlH,EAAA,GACAmH,EAAAnH,EAAA,GACA+G,EAAA/G,EAAA,GACAoH,EAAApH,EAAA,GACAqH,EAAArH,EAAA,GACAsH,EAAAtH,EAAA,GACAgC,EAAAvC,KAAAwC,IAAAF,GACAG,EAAAzC,KAAA0C,IAAAJ,GAUA,OATAzB,EAAA,GAAA4B,EAAA+E,EAAAjF,EAAAkF,EACA5G,EAAA,GAAA4B,EAAA2E,EAAA7E,EAAAmF,EACA7G,EAAA,GAAA4B,EAAA4E,EAAA9E,EAAA+E,EACAzG,EAAA,GAAA4B,EAAAgF,EAAAlF,EAAAiF,EACA3G,EAAA,GAAA4B,EAAAiF,EAAAnF,EAAA6E,EACAvG,EAAA,GAAA4B,EAAA6E,EAAA/E,EAAA8E,EACAxG,EAAA,GAAA8G,EACA9G,EAAA,GAAA+G,EACA/G,EAAA,GAAAgH,EACAhH,EAYO,SAASiI,GAAKjI,EAAAN,EAAAqC,GACrB,IAAA+F,EAAA/F,EAAA,GACAgG,EAAAhG,EAAA,GAUA,OATA/B,EAAA,GAAA8H,EAAApI,EAAA,GACAM,EAAA,GAAA8H,EAAApI,EAAA,GACAM,EAAA,GAAA8H,EAAApI,EAAA,GACAM,EAAA,GAAA+H,EAAArI,EAAA,GACAM,EAAA,GAAA+H,EAAArI,EAAA,GACAM,EAAA,GAAA+H,EAAArI,EAAA,GACAM,EAAA,GAAAN,EAAA,GACAM,EAAA,GAAAN,EAAA,GACAM,EAAA,GAAAN,EAAA,GACAM,EAcO,SAASkI,GAAelI,EAAA+B,GAU/B,OATA/B,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,GAAA+B,EAAA,GACA/B,EAAA,GAAA+B,EAAA,GACA/B,EAAA,KACAA,EAcO,SAASmI,GAAYnI,EAAAyB,GAC5B,IAAAC,EAAAvC,KAAAwC,IAAAF,GACAG,EAAAzC,KAAA0C,IAAAJ,GAUA,OATAzB,EAAA,GAAA4B,EACA5B,EAAA,GAAA0B,EACA1B,EAAA,KACAA,EAAA,IAAA0B,EACA1B,EAAA,GAAA4B,EACA5B,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAcO,SAASoI,GAAWpI,EAAA+B,GAU3B,OATA/B,EAAA,GAAA+B,EAAA,GACA/B,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,GAAA+B,EAAA,GACA/B,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAUO,SAAAqI,GAAArI,EAAAN,GAUP,OATAM,EAAA,GAAAN,EAAA,GACAM,EAAA,GAAAN,EAAA,GACAM,EAAA,KACAA,EAAA,GAAAN,EAAA,GACAM,EAAA,GAAAN,EAAA,GACAM,EAAA,KACAA,EAAA,GAAAN,EAAA,GACAM,EAAA,GAAAN,EAAA,GACAM,EAAA,KACAA,EAWO,SAAAsI,GAAAtI,EAAAuI,GACP,IAAAT,EAAAS,EAAA,GACAR,EAAAQ,EAAA,GACAC,EAAAD,EAAA,GACAE,EAAAF,EAAA,GACAG,EAAAZ,IACAa,EAAAZ,IACAa,EAAAJ,IACAK,EAAAf,EAAAY,EACAI,EAAAf,EAAAW,EACAK,EAAAhB,EAAAY,EACAK,EAAAR,EAAAE,EACAO,EAAAT,EAAAG,EACAO,EAAAV,EAAAI,EACAO,EAAAV,EAAAC,EACAU,EAAAX,EAAAE,EACAU,EAAAZ,EAAAG,EAUA,OATA5I,EAAA,KAAA+I,EAAAG,EACAlJ,EAAA,GAAA8I,EAAAO,EACArJ,EAAA,GAAAgJ,EAAAI,EACApJ,EAAA,GAAA8I,EAAAO,EACArJ,EAAA,KAAA6I,EAAAK,EACAlJ,EAAA,GAAAiJ,EAAAE,EACAnJ,EAAA,GAAAgJ,EAAAI,EACApJ,EAAA,GAAAiJ,EAAAE,EACAnJ,EAAA,KAAA6I,EAAAE,EACA/I,EAWO,SAAAsJ,GAAAtJ,EAAAN,GACP,IAAAiH,EAAAjH,EAAA,GACA6G,EAAA7G,EAAA,GACA8G,EAAA9G,EAAA,GACA6J,EAAA7J,EAAA,GACAkH,EAAAlH,EAAA,GACAmH,EAAAnH,EAAA,GACA+G,EAAA/G,EAAA,GACA8J,EAAA9J,EAAA,GACAoH,EAAApH,EAAA,GACAqH,EAAArH,EAAA,GACAsH,EAAAtH,EAAA,IACA+J,EAAA/J,EAAA,IACAgK,EAAAhK,EAAA,IACAiK,EAAAjK,EAAA,IACAkK,EAAAlK,EAAA,IACAmK,EAAAnK,EAAA,IACA6H,EAAAZ,EAAAE,EAAAN,EAAAK,EACAK,EAAAN,EAAAF,EAAAD,EAAAI,EACAY,EAAAb,EAAA6C,EAAAD,EAAA3C,EACAkD,EAAAvD,EAAAE,EAAAD,EAAAK,EACAkD,EAAAxD,EAAAiD,EAAAD,EAAA1C,EACAmD,EAAAxD,EAAAgD,EAAAD,EAAA9C,EACAwD,EAAAnD,EAAA6C,EAAA5C,EAAA2C,EACAQ,EAAApD,EAAA8C,EAAA5C,EAAA0C,EACAS,EAAArD,EAAA+C,EAAAJ,EAAAC,EACAU,EAAArD,EAAA6C,EAAA5C,EAAA2C,EACAlC,EAAAV,EAAA8C,EAAAJ,EAAAE,EACAzC,EAAAF,EAAA6C,EAAAJ,EAAAG,EAEA5I,EAAAuG,EAAAL,EAAAD,EAAAQ,EAAAD,EAAA4C,EAAAN,EAAAK,EAAAJ,EAAAG,EAAAF,EAAAC,EAEA,OAAAjJ,GAIAA,EAAA,EAAAA,EACAhB,EAAA,IAAA6G,EAAAK,EAAAT,EAAAgB,EAAA+B,EAAAY,GAAApJ,EACAhB,EAAA,IAAAyG,EAAA0D,EAAAvD,EAAAM,EAAAsC,EAAAU,GAAAlJ,EACAhB,EAAA,IAAA4G,EAAAa,EAAAZ,EAAAsD,EAAAX,EAAAS,GAAAjJ,EACAhB,EAAA,IAAAwG,EAAAiB,EAAAlB,EAAAW,EAAAqC,EAAAa,GAAApJ,EACAhB,EAAA,IAAA2G,EAAAO,EAAAV,EAAA2D,EAAAZ,EAAAW,GAAAlJ,EACAhB,EAAA,IAAAuG,EAAA4D,EAAAxD,EAAAc,EAAA8B,EAAAU,GAAAjJ,EACAhB,EAAA,IAAA2J,EAAAK,EAAAJ,EAAAG,EAAAF,EAAAC,GAAA9I,EACAhB,EAAA,IAAA4J,EAAApC,EAAAkC,EAAAM,EAAAH,EAAA5C,GAAAjG,EACAhB,EAAA,IAAA0J,EAAAK,EAAAJ,EAAAnC,EAAAqC,EAAAtC,GAAAvG,EACAhB,GAbA,KAwBO,SAAAqK,GAAArK,EAAAsK,EAAAC,GAUP,OATAvK,EAAA,KAAAsK,EACAtK,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,MAAAuK,EACAvK,EAAA,KACAA,EAAA,MACAA,EAAA,KACAA,EAAA,KACAA,EASO,SAASwK,GAAG9K,GACnB,cAAAA,EAAA,QAAAA,EAAA,QAAAA,EAAA,QAAAA,EAAA,QAAAA,EAAA,QAAAA,EAAA,QAAAA,EAAA,QAAAA,EAAA,QAAAA,EAAA,OASO,SAAS+K,GAAI/K,GACpB,OAAAP,KAAAmD,KAAAnD,KAAAoD,IAAA7C,EAAA,MAAAP,KAAAoD,IAAA7C,EAAA,MAAAP,KAAAoD,IAAA7C,EAAA,MAAAP,KAAAoD,IAAA7C,EAAA,MAAAP,KAAAoD,IAAA7C,EAAA,MAAAP,KAAAoD,IAAA7C,EAAA,MAAAP,KAAAoD,IAAA7C,EAAA,MAAAP,KAAAoD,IAAA7C,EAAA,MAAAP,KAAAoD,IAAA7C,EAAA,OAWO,SAASgL,GAAG1K,EAAAN,EAAAE,GAUnB,OATAI,EAAA,GAAAN,EAAA,GAAAE,EAAA,GACAI,EAAA,GAAAN,EAAA,GAAAE,EAAA,GACAI,EAAA,GAAAN,EAAA,GAAAE,EAAA,GACAI,EAAA,GAAAN,EAAA,GAAAE,EAAA,GACAI,EAAA,GAAAN,EAAA,GAAAE,EAAA,GACAI,EAAA,GAAAN,EAAA,GAAAE,EAAA,GACAI,EAAA,GAAAN,EAAA,GAAAE,EAAA,GACAI,EAAA,GAAAN,EAAA,GAAAE,EAAA,GACAI,EAAA,GAAAN,EAAA,GAAAE,EAAA,GACAI,EAWO,SAAS2K,GAAQ3K,EAAAN,EAAAE,GAUxB,OATAI,EAAA,GAAAN,EAAA,GAAAE,EAAA,GACAI,EAAA,GAAAN,EAAA,GAAAE,EAAA,GACAI,EAAA,GAAAN,EAAA,GAAAE,EAAA,GACAI,EAAA,GAAAN,EAAA,GAAAE,EAAA,GACAI,EAAA,GAAAN,EAAA,GAAAE,EAAA,GACAI,EAAA,GAAAN,EAAA,GAAAE,EAAA,GACAI,EAAA,GAAAN,EAAA,GAAAE,EAAA,GACAI,EAAA,GAAAN,EAAA,GAAAE,EAAA,GACAI,EAAA,GAAAN,EAAA,GAAAE,EAAA,GACAI,EAWO,SAAS4K,GAAc5K,EAAAN,EAAAE,GAU9B,OATAI,EAAA,GAAAN,EAAA,GAAAE,EACAI,EAAA,GAAAN,EAAA,GAAAE,EACAI,EAAA,GAAAN,EAAA,GAAAE,EACAI,EAAA,GAAAN,EAAA,GAAAE,EACAI,EAAA,GAAAN,EAAA,GAAAE,EACAI,EAAA,GAAAN,EAAA,GAAAE,EACAI,EAAA,GAAAN,EAAA,GAAAE,EACAI,EAAA,GAAAN,EAAA,GAAAE,EACAI,EAAA,GAAAN,EAAA,GAAAE,EACAI,EAYO,SAAS6K,GAAoB7K,EAAAN,EAAAE,EAAAsD,GAUpC,OATAlD,EAAA,GAAAN,EAAA,GAAAE,EAAA,GAAAsD,EACAlD,EAAA,GAAAN,EAAA,GAAAE,EAAA,GAAAsD,EACAlD,EAAA,GAAAN,EAAA,GAAAE,EAAA,GAAAsD,EACAlD,EAAA,GAAAN,EAAA,GAAAE,EAAA,GAAAsD,EACAlD,EAAA,GAAAN,EAAA,GAAAE,EAAA,GAAAsD,EACAlD,EAAA,GAAAN,EAAA,GAAAE,EAAA,GAAAsD,EACAlD,EAAA,GAAAN,EAAA,GAAAE,EAAA,GAAAsD,EACAlD,EAAA,GAAAN,EAAA,GAAAE,EAAA,GAAAsD,EACAlD,EAAA,GAAAN,EAAA,GAAAE,EAAA,GAAAsD,EACAlD,EAUO,SAAS8K,GAAWpL,EAAAE,GAC3B,OAAAF,EAAA,KAAAE,EAAA,IAAAF,EAAA,KAAAE,EAAA,IAAAF,EAAA,KAAAE,EAAA,IAAAF,EAAA,KAAAE,EAAA,IAAAF,EAAA,KAAAE,EAAA,IAAAF,EAAA,KAAAE,EAAA,IAAAF,EAAA,KAAAE,EAAA,IAAAF,EAAA,KAAAE,EAAA,IAAAF,EAAA,KAAAE,EAAA,GAUO,SAASmL,GAAMrL,EAAAE,GACtB,IAAAiB,EAAAnB,EAAA,GACAiB,EAAAjB,EAAA,GACAoB,EAAApB,EAAA,GACAqB,EAAArB,EAAA,GACA4E,EAAA5E,EAAA,GACA6E,EAAA7E,EAAA,GACAsL,EAAAtL,EAAA,GACAuL,EAAAvL,EAAA,GACAwL,EAAAxL,EAAA,GACA0B,EAAAxB,EAAA,GACAyB,EAAAzB,EAAA,GACA0B,EAAA1B,EAAA,GACA2B,EAAA3B,EAAA,GACA4E,EAAA5E,EAAA,GACA6E,EAAA7E,EAAA,GACAuL,EAAAvL,EAAA,GACAwL,EAAAxL,EAAA,GACAyL,EAAAzL,EAAA,GACA,OAAAT,KAAAU,IAAAgB,EAAAO,IAA8BtC,EAAgBK,KAAAW,IAAA,EAAAX,KAAAU,IAAAgB,GAAA1B,KAAAU,IAAAuB,KAAAjC,KAAAU,IAAAc,EAAAU,IAAqEvC,EAAgBK,KAAAW,IAAA,EAAAX,KAAAU,IAAAc,GAAAxB,KAAAU,IAAAwB,KAAAlC,KAAAU,IAAAiB,EAAAQ,IAAqExC,EAAgBK,KAAAW,IAAA,EAAAX,KAAAU,IAAAiB,GAAA3B,KAAAU,IAAAyB,KAAAnC,KAAAU,IAAAkB,EAAAQ,IAAqEzC,EAAgBK,KAAAW,IAAA,EAAAX,KAAAU,IAAAkB,GAAA5B,KAAAU,IAAA0B,KAAApC,KAAAU,IAAAyE,EAAAE,IAAqE1F,EAAgBK,KAAAW,IAAA,EAAAX,KAAAU,IAAAyE,GAAAnF,KAAAU,IAAA2E,KAAArF,KAAAU,IAAA0E,EAAAE,IAAqE3F,EAAgBK,KAAAW,IAAA,EAAAX,KAAAU,IAAA0E,GAAApF,KAAAU,IAAA4E,KAAAtF,KAAAU,IAAAmL,EAAAG,IAAqErM,EAAgBK,KAAAW,IAAA,EAAAX,KAAAU,IAAAmL,GAAA7L,KAAAU,IAAAsL,KAAAhM,KAAAU,IAAAoL,EAAAG,IAAqEtM,EAAgBK,KAAAW,IAAA,EAAAX,KAAAU,IAAAoL,GAAA9L,KAAAU,IAAAuL,KAAAjM,KAAAU,IAAAqL,EAAAG,IAAqEvM,EAAgBK,KAAAW,IAAA,EAAAX,KAAAU,IAAAqL,GAAA/L,KAAAU,IAAAwL,IAO/sB,IAAIC,GAAMhE,GAMNiE,GAAMZ,GC9vBV,SAASa,KAChB,IAAAxL,EAAA,IAAgBjB,EAAmB,IAqBnC,OAnBMA,GAAmBC,eACzBgB,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,MACAA,EAAA,MACAA,EAAA,MACAA,EAAA,OAGAA,EAAA,KACAA,EAAA,KACAA,EAAA,MACAA,EAAA,MACAA,EASO,SAASyL,GAAK/L,GACrB,IAAAM,EAAA,IAAgBjB,EAAmB,IAiBnC,OAhBAiB,EAAA,GAAAN,EAAA,GACAM,EAAA,GAAAN,EAAA,GACAM,EAAA,GAAAN,EAAA,GACAM,EAAA,GAAAN,EAAA,GACAM,EAAA,GAAAN,EAAA,GACAM,EAAA,GAAAN,EAAA,GACAM,EAAA,GAAAN,EAAA,GACAM,EAAA,GAAAN,EAAA,GACAM,EAAA,GAAAN,EAAA,GACAM,EAAA,GAAAN,EAAA,GACAM,EAAA,IAAAN,EAAA,IACAM,EAAA,IAAAN,EAAA,IACAM,EAAA,IAAAN,EAAA,IACAM,EAAA,IAAAN,EAAA,IACAM,EAAA,IAAAN,EAAA,IACAM,EAAA,IAAAN,EAAA,IACAM,EAUO,SAAS0L,GAAI1L,EAAAN,GAiBpB,OAhBAM,EAAA,GAAAN,EAAA,GACAM,EAAA,GAAAN,EAAA,GACAM,EAAA,GAAAN,EAAA,GACAM,EAAA,GAAAN,EAAA,GACAM,EAAA,GAAAN,EAAA,GACAM,EAAA,GAAAN,EAAA,GACAM,EAAA,GAAAN,EAAA,GACAM,EAAA,GAAAN,EAAA,GACAM,EAAA,GAAAN,EAAA,GACAM,EAAA,GAAAN,EAAA,GACAM,EAAA,IAAAN,EAAA,IACAM,EAAA,IAAAN,EAAA,IACAM,EAAA,IAAAN,EAAA,IACAM,EAAA,IAAAN,EAAA,IACAM,EAAA,IAAAN,EAAA,IACAM,EAAA,IAAAN,EAAA,IACAM,EAwBO,SAAS2L,GAAUtL,EAAAC,EAAAyF,EAAA6F,EAAArL,EAAAC,EAAAwF,EAAA6F,EAAA5F,EAAAC,EAAAC,EAAA2F,EAAAC,EAAAC,EAAAC,EAAAC,GAC1B,IAAAlM,EAAA,IAAgBjB,EAAmB,IAiBnC,OAhBAiB,EAAA,GAAAK,EACAL,EAAA,GAAAM,EACAN,EAAA,GAAA+F,EACA/F,EAAA,GAAA4L,EACA5L,EAAA,GAAAO,EACAP,EAAA,GAAAQ,EACAR,EAAA,GAAAgG,EACAhG,EAAA,GAAA6L,EACA7L,EAAA,GAAAiG,EACAjG,EAAA,GAAAkG,EACAlG,EAAA,IAAAmG,EACAnG,EAAA,IAAA8L,EACA9L,EAAA,IAAA+L,EACA/L,EAAA,IAAAgM,EACAhM,EAAA,IAAAiM,EACAjM,EAAA,IAAAkM,EACAlM,EAyBO,SAASmM,GAAGnM,EAAAK,EAAAC,EAAAyF,EAAA6F,EAAArL,EAAAC,EAAAwF,EAAA6F,EAAA5F,EAAAC,EAAAC,EAAA2F,EAAAC,EAAAC,EAAAC,EAAAC,GAiBnB,OAhBAlM,EAAA,GAAAK,EACAL,EAAA,GAAAM,EACAN,EAAA,GAAA+F,EACA/F,EAAA,GAAA4L,EACA5L,EAAA,GAAAO,EACAP,EAAA,GAAAQ,EACAR,EAAA,GAAAgG,EACAhG,EAAA,GAAA6L,EACA7L,EAAA,GAAAiG,EACAjG,EAAA,GAAAkG,EACAlG,EAAA,IAAAmG,EACAnG,EAAA,IAAA8L,EACA9L,EAAA,IAAA+L,EACA/L,EAAA,IAAAgM,EACAhM,EAAA,IAAAiM,EACAjM,EAAA,IAAAkM,EACAlM,EASO,SAASoM,GAAQpM,GAiBxB,OAhBAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,MACAA,EAAA,MACAA,EAAA,MACAA,EAAA,MACAA,EAAA,MACAA,EAAA,MACAA,EAUO,SAASqM,GAASrM,EAAAN,GAEzB,GAAAM,IAAAN,EAAA,CACA,IAAA6G,EAAA7G,EAAA,GACA8G,EAAA9G,EAAA,GACA6J,EAAA7J,EAAA,GACA+G,EAAA/G,EAAA,GACA8J,EAAA9J,EAAA,GACA+J,EAAA/J,EAAA,IACAM,EAAA,GAAAN,EAAA,GACAM,EAAA,GAAAN,EAAA,GACAM,EAAA,GAAAN,EAAA,IACAM,EAAA,GAAAuG,EACAvG,EAAA,GAAAN,EAAA,GACAM,EAAA,GAAAN,EAAA,IACAM,EAAA,GAAAwG,EACAxG,EAAA,GAAAyG,EACAzG,EAAA,IAAAN,EAAA,IACAM,EAAA,IAAAuJ,EACAvJ,EAAA,IAAAwJ,EACAxJ,EAAA,IAAAyJ,OAEAzJ,EAAA,GAAAN,EAAA,GACAM,EAAA,GAAAN,EAAA,GACAM,EAAA,GAAAN,EAAA,GACAM,EAAA,GAAAN,EAAA,IACAM,EAAA,GAAAN,EAAA,GACAM,EAAA,GAAAN,EAAA,GACAM,EAAA,GAAAN,EAAA,GACAM,EAAA,GAAAN,EAAA,IACAM,EAAA,GAAAN,EAAA,GACAM,EAAA,GAAAN,EAAA,GACAM,EAAA,IAAAN,EAAA,IACAM,EAAA,IAAAN,EAAA,IACAM,EAAA,IAAAN,EAAA,GACAM,EAAA,IAAAN,EAAA,GACAM,EAAA,IAAAN,EAAA,IACAM,EAAA,IAAAN,EAAA,IAGA,OAAAM,EAUO,SAASsM,GAAMtM,EAAAN,GACtB,IAAAiH,EAAAjH,EAAA,GACA6G,EAAA7G,EAAA,GACA8G,EAAA9G,EAAA,GACA6J,EAAA7J,EAAA,GACAkH,EAAAlH,EAAA,GACAmH,EAAAnH,EAAA,GACA+G,EAAA/G,EAAA,GACA8J,EAAA9J,EAAA,GACAoH,EAAApH,EAAA,GACAqH,EAAArH,EAAA,GACAsH,EAAAtH,EAAA,IACA+J,EAAA/J,EAAA,IACAgK,EAAAhK,EAAA,IACAiK,EAAAjK,EAAA,IACAkK,EAAAlK,EAAA,IACAmK,EAAAnK,EAAA,IACA6H,EAAAZ,EAAAE,EAAAN,EAAAK,EACAK,EAAAN,EAAAF,EAAAD,EAAAI,EACAY,EAAAb,EAAA6C,EAAAD,EAAA3C,EACAkD,EAAAvD,EAAAE,EAAAD,EAAAK,EACAkD,EAAAxD,EAAAiD,EAAAD,EAAA1C,EACAmD,EAAAxD,EAAAgD,EAAAD,EAAA9C,EACAwD,EAAAnD,EAAA6C,EAAA5C,EAAA2C,EACAQ,EAAApD,EAAA8C,EAAA5C,EAAA0C,EACAS,EAAArD,EAAA+C,EAAAJ,EAAAC,EACAU,EAAArD,EAAA6C,EAAA5C,EAAA2C,EACAlC,EAAAV,EAAA8C,EAAAJ,EAAAE,EACAzC,EAAAF,EAAA6C,EAAAJ,EAAAG,EAEA5I,EAAAuG,EAAAL,EAAAD,EAAAQ,EAAAD,EAAA4C,EAAAN,EAAAK,EAAAJ,EAAAG,EAAAF,EAAAC,EAEA,OAAAjJ,GAIAA,EAAA,EAAAA,EACAhB,EAAA,IAAA6G,EAAAK,EAAAT,EAAAgB,EAAA+B,EAAAY,GAAApJ,EACAhB,EAAA,IAAAwG,EAAAiB,EAAAlB,EAAAW,EAAAqC,EAAAa,GAAApJ,EACAhB,EAAA,IAAA2J,EAAAK,EAAAJ,EAAAG,EAAAF,EAAAC,GAAA9I,EACAhB,EAAA,IAAAgH,EAAA+C,EAAAhD,EAAAiD,EAAAP,EAAAK,GAAA9I,EACAhB,EAAA,IAAAyG,EAAA0D,EAAAvD,EAAAM,EAAAsC,EAAAU,GAAAlJ,EACAhB,EAAA,IAAA2G,EAAAO,EAAAV,EAAA2D,EAAAZ,EAAAW,GAAAlJ,EACAhB,EAAA,IAAA4J,EAAApC,EAAAkC,EAAAM,EAAAH,EAAA5C,GAAAjG,EACAhB,EAAA,IAAA8G,EAAAkD,EAAAhD,EAAAQ,EAAAiC,EAAAxC,GAAAjG,EACAhB,EAAA,IAAA4G,EAAAa,EAAAZ,EAAAsD,EAAAX,EAAAS,GAAAjJ,EACAhB,EAAA,IAAAuG,EAAA4D,EAAAxD,EAAAc,EAAA8B,EAAAU,GAAAjJ,EACAhB,EAAA,KAAA0J,EAAAK,EAAAJ,EAAAnC,EAAAqC,EAAAtC,GAAAvG,EACAhB,EAAA,KAAA+G,EAAAS,EAAAV,EAAAiD,EAAAN,EAAAlC,GAAAvG,EACAhB,EAAA,KAAA6G,EAAAqD,EAAAtD,EAAAwD,EAAA3D,EAAAwD,GAAAjJ,EACAhB,EAAA,KAAA2G,EAAAyD,EAAA7D,EAAA2D,EAAA1D,EAAAyD,GAAAjJ,EACAhB,EAAA,KAAA2J,EAAA1C,EAAAyC,EAAAI,EAAAF,EAAArC,GAAAvG,EACAhB,EAAA,KAAA8G,EAAAgD,EAAA/C,EAAAE,EAAAD,EAAAO,GAAAvG,EACAhB,GApBA,KA8BO,SAASuM,GAAOvM,EAAAN,GACvB,IAAAiH,EAAAjH,EAAA,GACA6G,EAAA7G,EAAA,GACA8G,EAAA9G,EAAA,GACA6J,EAAA7J,EAAA,GACAkH,EAAAlH,EAAA,GACAmH,EAAAnH,EAAA,GACA+G,EAAA/G,EAAA,GACA8J,EAAA9J,EAAA,GACAoH,EAAApH,EAAA,GACAqH,EAAArH,EAAA,GACAsH,EAAAtH,EAAA,IACA+J,EAAA/J,EAAA,IACAgK,EAAAhK,EAAA,IACAiK,EAAAjK,EAAA,IACAkK,EAAAlK,EAAA,IACAmK,EAAAnK,EAAA,IAiBA,OAhBAM,EAAA,GAAA6G,GAAAG,EAAA6C,EAAAJ,EAAAG,GAAA7C,GAAAN,EAAAoD,EAAAL,EAAAI,GAAAD,GAAAlD,EAAAgD,EAAAD,EAAAxC,GACAhH,EAAA,KAAAuG,GAAAS,EAAA6C,EAAAJ,EAAAG,GAAA7C,GAAAP,EAAAqD,EAAAN,EAAAK,GAAAD,GAAAnD,EAAAiD,EAAAF,EAAAvC,IACAhH,EAAA,GAAAuG,GAAAE,EAAAoD,EAAAL,EAAAI,GAAA/C,GAAAL,EAAAqD,EAAAN,EAAAK,GAAAD,GAAAnD,EAAAgD,EAAAD,EAAA9C,GACAzG,EAAA,KAAAuG,GAAAE,EAAAgD,EAAAD,EAAAxC,GAAAH,GAAAL,EAAAiD,EAAAF,EAAAvC,GAAAD,GAAAP,EAAAgD,EAAAD,EAAA9C,IACAzG,EAAA,KAAA4G,GAAAI,EAAA6C,EAAAJ,EAAAG,GAAA9C,GAAAL,EAAAoD,EAAAL,EAAAI,GAAAF,GAAAjD,EAAAgD,EAAAD,EAAAxC,IACAhH,EAAA,GAAA2G,GAAAK,EAAA6C,EAAAJ,EAAAG,GAAA9C,GAAAN,EAAAqD,EAAAN,EAAAK,GAAAF,GAAAlD,EAAAiD,EAAAF,EAAAvC,GACAhH,EAAA,KAAA2G,GAAAF,EAAAoD,EAAAL,EAAAI,GAAAhD,GAAAJ,EAAAqD,EAAAN,EAAAK,GAAAF,GAAAlD,EAAAgD,EAAAD,EAAA9C,IACAzG,EAAA,GAAA2G,GAAAF,EAAAgD,EAAAD,EAAAxC,GAAAJ,GAAAJ,EAAAiD,EAAAF,EAAAvC,GAAAF,GAAAN,EAAAgD,EAAAD,EAAA9C,GACAzG,EAAA,GAAA4G,GAAAG,EAAA8C,EAAAJ,EAAAE,GAAA7C,GAAAD,EAAAgD,EAAAL,EAAAG,GAAAD,GAAA7C,EAAA4C,EAAAD,EAAAzC,GACA/G,EAAA,KAAA2G,GAAAI,EAAA8C,EAAAJ,EAAAE,GAAA7C,GAAAP,EAAAsD,EAAAN,EAAAI,GAAAD,GAAAnD,EAAAkD,EAAAF,EAAAxC,IACA/G,EAAA,IAAA2G,GAAAE,EAAAgD,EAAAL,EAAAG,GAAA/C,GAAAL,EAAAsD,EAAAN,EAAAI,GAAAD,GAAAnD,EAAAiD,EAAAD,EAAA1C,GACA7G,EAAA,MAAA2G,GAAAE,EAAA4C,EAAAD,EAAAzC,GAAAH,GAAAL,EAAAkD,EAAAF,EAAAxC,GAAAD,GAAAP,EAAAiD,EAAAD,EAAA1C,IACA7G,EAAA,MAAA4G,GAAAG,EAAA6C,EAAA5C,EAAA2C,GAAA7C,GAAAD,EAAA+C,EAAAnD,EAAAkD,GAAAD,GAAA7C,EAAAG,EAAAP,EAAAM,IACA/G,EAAA,IAAA2G,GAAAI,EAAA6C,EAAA5C,EAAA2C,GAAA7C,GAAAP,EAAAqD,EAAApD,EAAAmD,GAAAD,GAAAnD,EAAAS,EAAAR,EAAAO,GACA/G,EAAA,MAAA2G,GAAAE,EAAA+C,EAAAnD,EAAAkD,GAAA/C,GAAAL,EAAAqD,EAAApD,EAAAmD,GAAAD,GAAAnD,EAAAE,EAAAD,EAAAK,IACA7G,EAAA,IAAA2G,GAAAE,EAAAG,EAAAP,EAAAM,GAAAH,GAAAL,EAAAS,EAAAR,EAAAO,GAAAD,GAAAP,EAAAE,EAAAD,EAAAK,GACA7G,EASO,SAASwM,GAAW9M,GAC3B,IAAAiH,EAAAjH,EAAA,GACA6G,EAAA7G,EAAA,GACA8G,EAAA9G,EAAA,GACA6J,EAAA7J,EAAA,GACAkH,EAAAlH,EAAA,GACAmH,EAAAnH,EAAA,GACA+G,EAAA/G,EAAA,GACA8J,EAAA9J,EAAA,GACAoH,EAAApH,EAAA,GACAqH,EAAArH,EAAA,GACAsH,EAAAtH,EAAA,IACA+J,EAAA/J,EAAA,IACAgK,EAAAhK,EAAA,IACAiK,EAAAjK,EAAA,IACAkK,EAAAlK,EAAA,IACAmK,EAAAnK,EAAA,IAcA,OAbAiH,EAAAE,EAAAN,EAAAK,IAWAI,EAAA6C,EAAAJ,EAAAG,IAVAjD,EAAAF,EAAAD,EAAAI,IASAG,EAAA8C,EAAAJ,EAAAE,IARAhD,EAAA6C,EAAAD,EAAA3C,IAOAG,EAAA6C,EAAA5C,EAAA2C,IANApD,EAAAE,EAAAD,EAAAK,IAKAC,EAAA+C,EAAAJ,EAAAC,IAJAnD,EAAAiD,EAAAD,EAAA1C,IAGAC,EAAA8C,EAAA5C,EAAA0C,IAFAlD,EAAAgD,EAAAD,EAAA9C,IACAK,EAAA6C,EAAA5C,EAAA2C,GAkBO,SAAS+C,GAAQzM,EAAAN,EAAAE,GACxB,IAAA+G,EAAAjH,EAAA,GACA6G,EAAA7G,EAAA,GACA8G,EAAA9G,EAAA,GACA6J,EAAA7J,EAAA,GACAkH,EAAAlH,EAAA,GACAmH,EAAAnH,EAAA,GACA+G,EAAA/G,EAAA,GACA8J,EAAA9J,EAAA,GACAoH,EAAApH,EAAA,GACAqH,EAAArH,EAAA,GACAsH,EAAAtH,EAAA,IACA+J,EAAA/J,EAAA,IACAgK,EAAAhK,EAAA,IACAiK,EAAAjK,EAAA,IACAkK,EAAAlK,EAAA,IACAmK,EAAAnK,EAAA,IAEA0B,EAAAxB,EAAA,GACAyB,EAAAzB,EAAA,GACA0B,EAAA1B,EAAA,GACA2B,EAAA3B,EAAA,GA6BA,OA5BAI,EAAA,GAAAoB,EAAAuF,EAAAtF,EAAAuF,EAAAtF,EAAAwF,EAAAvF,EAAAmI,EACA1J,EAAA,GAAAoB,EAAAmF,EAAAlF,EAAAwF,EAAAvF,EAAAyF,EAAAxF,EAAAoI,EACA3J,EAAA,GAAAoB,EAAAoF,EAAAnF,EAAAoF,EAAAnF,EAAA0F,EAAAzF,EAAAqI,EACA5J,EAAA,GAAAoB,EAAAmI,EAAAlI,EAAAmI,EAAAlI,EAAAmI,EAAAlI,EAAAsI,EACAzI,EAAAxB,EAAA,GACAyB,EAAAzB,EAAA,GACA0B,EAAA1B,EAAA,GACA2B,EAAA3B,EAAA,GACAI,EAAA,GAAAoB,EAAAuF,EAAAtF,EAAAuF,EAAAtF,EAAAwF,EAAAvF,EAAAmI,EACA1J,EAAA,GAAAoB,EAAAmF,EAAAlF,EAAAwF,EAAAvF,EAAAyF,EAAAxF,EAAAoI,EACA3J,EAAA,GAAAoB,EAAAoF,EAAAnF,EAAAoF,EAAAnF,EAAA0F,EAAAzF,EAAAqI,EACA5J,EAAA,GAAAoB,EAAAmI,EAAAlI,EAAAmI,EAAAlI,EAAAmI,EAAAlI,EAAAsI,EACAzI,EAAAxB,EAAA,GACAyB,EAAAzB,EAAA,GACA0B,EAAA1B,EAAA,IACA2B,EAAA3B,EAAA,IACAI,EAAA,GAAAoB,EAAAuF,EAAAtF,EAAAuF,EAAAtF,EAAAwF,EAAAvF,EAAAmI,EACA1J,EAAA,GAAAoB,EAAAmF,EAAAlF,EAAAwF,EAAAvF,EAAAyF,EAAAxF,EAAAoI,EACA3J,EAAA,IAAAoB,EAAAoF,EAAAnF,EAAAoF,EAAAnF,EAAA0F,EAAAzF,EAAAqI,EACA5J,EAAA,IAAAoB,EAAAmI,EAAAlI,EAAAmI,EAAAlI,EAAAmI,EAAAlI,EAAAsI,EACAzI,EAAAxB,EAAA,IACAyB,EAAAzB,EAAA,IACA0B,EAAA1B,EAAA,IACA2B,EAAA3B,EAAA,IACAI,EAAA,IAAAoB,EAAAuF,EAAAtF,EAAAuF,EAAAtF,EAAAwF,EAAAvF,EAAAmI,EACA1J,EAAA,IAAAoB,EAAAmF,EAAAlF,EAAAwF,EAAAvF,EAAAyF,EAAAxF,EAAAoI,EACA3J,EAAA,IAAAoB,EAAAoF,EAAAnF,EAAAoF,EAAAnF,EAAA0F,EAAAzF,EAAAqI,EACA5J,EAAA,IAAAoB,EAAAmI,EAAAlI,EAAAmI,EAAAlI,EAAAmI,EAAAlI,EAAAsI,EACA7J,EAWO,SAAS0M,GAAS1M,EAAAN,EAAAqC,GACzB,IAGA4E,EAAAJ,EAAAC,EAAA+C,EACA3C,EAAAC,EAAAJ,EAAA+C,EACA1C,EAAAC,EAAAC,EAAAyC,EALA3B,EAAA/F,EAAA,GACAgG,EAAAhG,EAAA,GACAyG,EAAAzG,EAAA,GAyCA,OApCArC,IAAAM,GACAA,EAAA,IAAAN,EAAA,GAAAoI,EAAApI,EAAA,GAAAqI,EAAArI,EAAA,GAAA8I,EAAA9I,EAAA,IACAM,EAAA,IAAAN,EAAA,GAAAoI,EAAApI,EAAA,GAAAqI,EAAArI,EAAA,GAAA8I,EAAA9I,EAAA,IACAM,EAAA,IAAAN,EAAA,GAAAoI,EAAApI,EAAA,GAAAqI,EAAArI,EAAA,IAAA8I,EAAA9I,EAAA,IACAM,EAAA,IAAAN,EAAA,GAAAoI,EAAApI,EAAA,GAAAqI,EAAArI,EAAA,IAAA8I,EAAA9I,EAAA,MAEAiH,EAAAjH,EAAA,GACA6G,EAAA7G,EAAA,GACA8G,EAAA9G,EAAA,GACA6J,EAAA7J,EAAA,GACAkH,EAAAlH,EAAA,GACAmH,EAAAnH,EAAA,GACA+G,EAAA/G,EAAA,GACA8J,EAAA9J,EAAA,GACAoH,EAAApH,EAAA,GACAqH,EAAArH,EAAA,GACAsH,EAAAtH,EAAA,IACA+J,EAAA/J,EAAA,IACAM,EAAA,GAAA2G,EACA3G,EAAA,GAAAuG,EACAvG,EAAA,GAAAwG,EACAxG,EAAA,GAAAuJ,EACAvJ,EAAA,GAAA4G,EACA5G,EAAA,GAAA6G,EACA7G,EAAA,GAAAyG,EACAzG,EAAA,GAAAwJ,EACAxJ,EAAA,GAAA8G,EACA9G,EAAA,GAAA+G,EACA/G,EAAA,IAAAgH,EACAhH,EAAA,IAAAyJ,EACAzJ,EAAA,IAAA2G,EAAAmB,EAAAlB,EAAAmB,EAAAjB,EAAA0B,EAAA9I,EAAA,IACAM,EAAA,IAAAuG,EAAAuB,EAAAjB,EAAAkB,EAAAhB,EAAAyB,EAAA9I,EAAA,IACAM,EAAA,IAAAwG,EAAAsB,EAAArB,EAAAsB,EAAAf,EAAAwB,EAAA9I,EAAA,IACAM,EAAA,IAAAuJ,EAAAzB,EAAA0B,EAAAzB,EAAA0B,EAAAjB,EAAA9I,EAAA,KAGAM,EAWO,SAAS2M,GAAK3M,EAAAN,EAAAqC,GACrB,IAAA+F,EAAA/F,EAAA,GACAgG,EAAAhG,EAAA,GACAyG,EAAAzG,EAAA,GAiBA,OAhBA/B,EAAA,GAAAN,EAAA,GAAAoI,EACA9H,EAAA,GAAAN,EAAA,GAAAoI,EACA9H,EAAA,GAAAN,EAAA,GAAAoI,EACA9H,EAAA,GAAAN,EAAA,GAAAoI,EACA9H,EAAA,GAAAN,EAAA,GAAAqI,EACA/H,EAAA,GAAAN,EAAA,GAAAqI,EACA/H,EAAA,GAAAN,EAAA,GAAAqI,EACA/H,EAAA,GAAAN,EAAA,GAAAqI,EACA/H,EAAA,GAAAN,EAAA,GAAA8I,EACAxI,EAAA,GAAAN,EAAA,GAAA8I,EACAxI,EAAA,IAAAN,EAAA,IAAA8I,EACAxI,EAAA,IAAAN,EAAA,IAAA8I,EACAxI,EAAA,IAAAN,EAAA,IACAM,EAAA,IAAAN,EAAA,IACAM,EAAA,IAAAN,EAAA,IACAM,EAAA,IAAAN,EAAA,IACAM,EAYO,SAAS4M,GAAM5M,EAAAN,EAAA+B,EAAAoL,GACtB,IAIAnL,EAAAE,EAAAkL,EACAnG,EAAAJ,EAAAC,EAAA+C,EACA3C,EAAAC,EAAAJ,EAAA+C,EACA1C,EAAAC,EAAAC,EAAAyC,EACAlC,EAAAN,EAAAO,EACAC,EAAAP,EAAAQ,EACAC,EAAAR,EAAAS,EAVAE,EAAA+E,EAAA,GACA9E,EAAA8E,EAAA,GACArE,EAAAqE,EAAA,GACAE,EAAA5N,KAAAmD,KAAAwF,IAAAC,IAAAS,KASA,OAAAuE,EAAYjO,EACZ,MAIAgJ,GADAiF,EAAA,EAAAA,EAEAhF,GAAAgF,EACAvE,GAAAuE,EACArL,EAAAvC,KAAAwC,IAAAF,GAEAqL,EAAA,GADAlL,EAAAzC,KAAA0C,IAAAJ,IAEAkF,EAAAjH,EAAA,GACA6G,EAAA7G,EAAA,GACA8G,EAAA9G,EAAA,GACA6J,EAAA7J,EAAA,GACAkH,EAAAlH,EAAA,GACAmH,EAAAnH,EAAA,GACA+G,EAAA/G,EAAA,GACA8J,EAAA9J,EAAA,GACAoH,EAAApH,EAAA,GACAqH,EAAArH,EAAA,GACAsH,EAAAtH,EAAA,IACA+J,EAAA/J,EAAA,IAEA6H,EAAAO,IAAAgF,EAAAlL,EACAqF,EAAAc,EAAAD,EAAAgF,EAAAtE,EAAA9G,EACA8F,EAAAgB,EAAAV,EAAAgF,EAAA/E,EAAArG,EACA+F,EAAAK,EAAAC,EAAA+E,EAAAtE,EAAA9G,EACAwF,EAAAa,IAAA+E,EAAAlL,EACA8F,EAAAc,EAAAT,EAAA+E,EAAAhF,EAAApG,EACAiG,EAAAG,EAAAU,EAAAsE,EAAA/E,EAAArG,EACAyF,EAAAY,EAAAS,EAAAsE,EAAAhF,EAAApG,EACAkG,EAAAY,IAAAsE,EAAAlL,EAEA5B,EAAA,GAAA2G,EAAAY,EAAAX,EAAAK,EAAAH,EAAAU,EACAxH,EAAA,GAAAuG,EAAAgB,EAAAV,EAAAI,EAAAF,EAAAS,EACAxH,EAAA,GAAAwG,EAAAe,EAAAd,EAAAQ,EAAAD,EAAAQ,EACAxH,EAAA,GAAAuJ,EAAAhC,EAAAiC,EAAAvC,EAAAwC,EAAAjC,EACAxH,EAAA,GAAA2G,EAAAc,EAAAb,EAAAM,EAAAJ,EAAAY,EACA1H,EAAA,GAAAuG,EAAAkB,EAAAZ,EAAAK,EAAAH,EAAAW,EACA1H,EAAA,GAAAwG,EAAAiB,EAAAhB,EAAAS,EAAAF,EAAAU,EACA1H,EAAA,GAAAuJ,EAAA9B,EAAA+B,EAAAtC,EAAAuC,EAAA/B,EACA1H,EAAA,GAAA2G,EAAAgB,EAAAf,EAAAO,EAAAL,EAAAc,EACA5H,EAAA,GAAAuG,EAAAoB,EAAAd,EAAAM,EAAAJ,EAAAa,EACA5H,EAAA,IAAAwG,EAAAmB,EAAAlB,EAAAU,EAAAH,EAAAY,EACA5H,EAAA,IAAAuJ,EAAA5B,EAAA6B,EAAArC,EAAAsC,EAAA7B,EAEAlI,IAAAM,IAEAA,EAAA,IAAAN,EAAA,IACAM,EAAA,IAAAN,EAAA,IACAM,EAAA,IAAAN,EAAA,IACAM,EAAA,IAAAN,EAAA,KAGAM,GAWO,SAAAgN,GAAAhN,EAAAN,EAAA+B,GACP,IAAAC,EAAAvC,KAAAwC,IAAAF,GACAG,EAAAzC,KAAA0C,IAAAJ,GACAmF,EAAAlH,EAAA,GACAmH,EAAAnH,EAAA,GACA+G,EAAA/G,EAAA,GACA8J,EAAA9J,EAAA,GACAoH,EAAApH,EAAA,GACAqH,EAAArH,EAAA,GACAsH,EAAAtH,EAAA,IACA+J,EAAA/J,EAAA,IAuBA,OArBAA,IAAAM,IAEAA,EAAA,GAAAN,EAAA,GACAM,EAAA,GAAAN,EAAA,GACAM,EAAA,GAAAN,EAAA,GACAM,EAAA,GAAAN,EAAA,GACAM,EAAA,IAAAN,EAAA,IACAM,EAAA,IAAAN,EAAA,IACAM,EAAA,IAAAN,EAAA,IACAM,EAAA,IAAAN,EAAA,KAIAM,EAAA,GAAA4G,EAAAhF,EAAAkF,EAAApF,EACA1B,EAAA,GAAA6G,EAAAjF,EAAAmF,EAAArF,EACA1B,EAAA,GAAAyG,EAAA7E,EAAAoF,EAAAtF,EACA1B,EAAA,GAAAwJ,EAAA5H,EAAA6H,EAAA/H,EACA1B,EAAA,GAAA8G,EAAAlF,EAAAgF,EAAAlF,EACA1B,EAAA,GAAA+G,EAAAnF,EAAAiF,EAAAnF,EACA1B,EAAA,IAAAgH,EAAApF,EAAA6E,EAAA/E,EACA1B,EAAA,IAAAyJ,EAAA7H,EAAA4H,EAAA9H,EACA1B,EAWO,SAAAiN,GAAAjN,EAAAN,EAAA+B,GACP,IAAAC,EAAAvC,KAAAwC,IAAAF,GACAG,EAAAzC,KAAA0C,IAAAJ,GACAkF,EAAAjH,EAAA,GACA6G,EAAA7G,EAAA,GACA8G,EAAA9G,EAAA,GACA6J,EAAA7J,EAAA,GACAoH,EAAApH,EAAA,GACAqH,EAAArH,EAAA,GACAsH,EAAAtH,EAAA,IACA+J,EAAA/J,EAAA,IAuBA,OArBAA,IAAAM,IAEAA,EAAA,GAAAN,EAAA,GACAM,EAAA,GAAAN,EAAA,GACAM,EAAA,GAAAN,EAAA,GACAM,EAAA,GAAAN,EAAA,GACAM,EAAA,IAAAN,EAAA,IACAM,EAAA,IAAAN,EAAA,IACAM,EAAA,IAAAN,EAAA,IACAM,EAAA,IAAAN,EAAA,KAIAM,EAAA,GAAA2G,EAAA/E,EAAAkF,EAAApF,EACA1B,EAAA,GAAAuG,EAAA3E,EAAAmF,EAAArF,EACA1B,EAAA,GAAAwG,EAAA5E,EAAAoF,EAAAtF,EACA1B,EAAA,GAAAuJ,EAAA3H,EAAA6H,EAAA/H,EACA1B,EAAA,GAAA2G,EAAAjF,EAAAoF,EAAAlF,EACA5B,EAAA,GAAAuG,EAAA7E,EAAAqF,EAAAnF,EACA5B,EAAA,IAAAwG,EAAA9E,EAAAsF,EAAApF,EACA5B,EAAA,IAAAuJ,EAAA7H,EAAA+H,EAAA7H,EACA5B,EAWO,SAAAkN,GAAAlN,EAAAN,EAAA+B,GACP,IAAAC,EAAAvC,KAAAwC,IAAAF,GACAG,EAAAzC,KAAA0C,IAAAJ,GACAkF,EAAAjH,EAAA,GACA6G,EAAA7G,EAAA,GACA8G,EAAA9G,EAAA,GACA6J,EAAA7J,EAAA,GACAkH,EAAAlH,EAAA,GACAmH,EAAAnH,EAAA,GACA+G,EAAA/G,EAAA,GACA8J,EAAA9J,EAAA,GAuBA,OArBAA,IAAAM,IAEAA,EAAA,GAAAN,EAAA,GACAM,EAAA,GAAAN,EAAA,GACAM,EAAA,IAAAN,EAAA,IACAM,EAAA,IAAAN,EAAA,IACAM,EAAA,IAAAN,EAAA,IACAM,EAAA,IAAAN,EAAA,IACAM,EAAA,IAAAN,EAAA,IACAM,EAAA,IAAAN,EAAA,KAIAM,EAAA,GAAA2G,EAAA/E,EAAAgF,EAAAlF,EACA1B,EAAA,GAAAuG,EAAA3E,EAAAiF,EAAAnF,EACA1B,EAAA,GAAAwG,EAAA5E,EAAA6E,EAAA/E,EACA1B,EAAA,GAAAuJ,EAAA3H,EAAA4H,EAAA9H,EACA1B,EAAA,GAAA4G,EAAAhF,EAAA+E,EAAAjF,EACA1B,EAAA,GAAA6G,EAAAjF,EAAA2E,EAAA7E,EACA1B,EAAA,GAAAyG,EAAA7E,EAAA4E,EAAA9E,EACA1B,EAAA,GAAAwJ,EAAA5H,EAAA2H,EAAA7H,EACA1B,EAcO,SAASmN,GAAenN,EAAA+B,GAiB/B,OAhBA/B,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,MACAA,EAAA,MACAA,EAAA,IAAA+B,EAAA,GACA/B,EAAA,IAAA+B,EAAA,GACA/B,EAAA,IAAA+B,EAAA,GACA/B,EAAA,MACAA,EAcO,SAASoN,GAAWpN,EAAA+B,GAiB3B,OAhBA/B,EAAA,GAAA+B,EAAA,GACA/B,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,GAAA+B,EAAA,GACA/B,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,IAAA+B,EAAA,GACA/B,EAAA,MACAA,EAAA,MACAA,EAAA,MACAA,EAAA,MACAA,EAAA,MACAA,EAeO,SAASqN,GAAYrN,EAAAyB,EAAAoL,GAC5B,IAIAnL,EAAAE,EAAAkL,EAJAhF,EAAA+E,EAAA,GACA9E,EAAA8E,EAAA,GACArE,EAAAqE,EAAA,GACAE,EAAA5N,KAAAmD,KAAAwF,IAAAC,IAAAS,KAGA,OAAAuE,EAAYjO,EACZ,MAIAgJ,GADAiF,EAAA,EAAAA,EAEAhF,GAAAgF,EACAvE,GAAAuE,EACArL,EAAAvC,KAAAwC,IAAAF,GAEAqL,EAAA,GADAlL,EAAAzC,KAAA0C,IAAAJ,IAGAzB,EAAA,GAAA8H,IAAAgF,EAAAlL,EACA5B,EAAA,GAAA+H,EAAAD,EAAAgF,EAAAtE,EAAA9G,EACA1B,EAAA,GAAAwI,EAAAV,EAAAgF,EAAA/E,EAAArG,EACA1B,EAAA,KACAA,EAAA,GAAA8H,EAAAC,EAAA+E,EAAAtE,EAAA9G,EACA1B,EAAA,GAAA+H,IAAA+E,EAAAlL,EACA5B,EAAA,GAAAwI,EAAAT,EAAA+E,EAAAhF,EAAApG,EACA1B,EAAA,KACAA,EAAA,GAAA8H,EAAAU,EAAAsE,EAAA/E,EAAArG,EACA1B,EAAA,GAAA+H,EAAAS,EAAAsE,EAAAhF,EAAApG,EACA1B,EAAA,IAAAwI,IAAAsE,EAAAlL,EACA5B,EAAA,MACAA,EAAA,MACAA,EAAA,MACAA,EAAA,MACAA,EAAA,MACAA,GAcO,SAAAsN,GAAAtN,EAAAyB,GACP,IAAAC,EAAAvC,KAAAwC,IAAAF,GACAG,EAAAzC,KAAA0C,IAAAJ,GAkBA,OAhBAzB,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,GAAA4B,EACA5B,EAAA,GAAA0B,EACA1B,EAAA,KACAA,EAAA,KACAA,EAAA,IAAA0B,EACA1B,EAAA,IAAA4B,EACA5B,EAAA,MACAA,EAAA,MACAA,EAAA,MACAA,EAAA,MACAA,EAAA,MACAA,EAcO,SAAAuN,GAAAvN,EAAAyB,GACP,IAAAC,EAAAvC,KAAAwC,IAAAF,GACAG,EAAAzC,KAAA0C,IAAAJ,GAkBA,OAhBAzB,EAAA,GAAA4B,EACA5B,EAAA,KACAA,EAAA,IAAA0B,EACA1B,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,GAAA0B,EACA1B,EAAA,KACAA,EAAA,IAAA4B,EACA5B,EAAA,MACAA,EAAA,MACAA,EAAA,MACAA,EAAA,MACAA,EAAA,MACAA,EAcO,SAAAwN,GAAAxN,EAAAyB,GACP,IAAAC,EAAAvC,KAAAwC,IAAAF,GACAG,EAAAzC,KAAA0C,IAAAJ,GAkBA,OAhBAzB,EAAA,GAAA4B,EACA5B,EAAA,GAAA0B,EACA1B,EAAA,KACAA,EAAA,KACAA,EAAA,IAAA0B,EACA1B,EAAA,GAAA4B,EACA5B,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,MACAA,EAAA,MACAA,EAAA,MACAA,EAAA,MACAA,EAAA,MACAA,EAAA,MACAA,EAkBO,SAAAyN,GAAAzN,EAAAuI,EAAAxG,GAEP,IAAA+F,EAAAS,EAAA,GACAR,EAAAQ,EAAA,GACAC,EAAAD,EAAA,GACAE,EAAAF,EAAA,GACAG,EAAAZ,IACAa,EAAAZ,IACAa,EAAAJ,IACAK,EAAAf,EAAAY,EACAgF,EAAA5F,EAAAa,EACAgF,EAAA7F,EAAAc,EACAG,EAAAhB,EAAAY,EACAiF,EAAA7F,EAAAa,EACAM,EAAAV,EAAAI,EACAO,EAAAV,EAAAC,EACAU,EAAAX,EAAAE,EACAU,EAAAZ,EAAAG,EAiBA,OAhBA5I,EAAA,MAAA+I,EAAAG,GACAlJ,EAAA,GAAA0N,EAAArE,EACArJ,EAAA,GAAA2N,EAAAvE,EACApJ,EAAA,KACAA,EAAA,GAAA0N,EAAArE,EACArJ,EAAA,MAAA6I,EAAAK,GACAlJ,EAAA,GAAA4N,EAAAzE,EACAnJ,EAAA,KACAA,EAAA,GAAA2N,EAAAvE,EACApJ,EAAA,GAAA4N,EAAAzE,EACAnJ,EAAA,OAAA6I,EAAAE,GACA/I,EAAA,MACAA,EAAA,IAAA+B,EAAA,GACA/B,EAAA,IAAA+B,EAAA,GACA/B,EAAA,IAAA+B,EAAA,GACA/B,EAAA,MACAA,EAUO,SAAA6N,GAAA7N,EAAAN,GACP,IAAAoO,EAAA,IAAwB/O,EAAmB,GAC3CgP,GAAArO,EAAA,GACAsO,GAAAtO,EAAA,GACAuO,GAAAvO,EAAA,GACAwO,EAAAxO,EAAA,GACAyO,EAAAzO,EAAA,GACA0O,EAAA1O,EAAA,GACA2O,EAAA3O,EAAA,GACA4O,EAAA5O,EAAA,GACA6O,EAAAR,IAAAC,IAAAC,IAAAC,IAaA,OAXAK,EAAA,GACAT,EAAA,MAAAK,EAAAD,EAAAI,EAAAP,EAAAK,EAAAH,EAAAI,EAAAL,GAAAO,EACAT,EAAA,MAAAM,EAAAF,EAAAI,EAAAN,EAAAK,EAAAN,EAAAI,EAAAF,GAAAM,EACAT,EAAA,MAAAO,EAAAH,EAAAI,EAAAL,EAAAE,EAAAH,EAAAI,EAAAL,GAAAQ,IAEAT,EAAA,MAAAK,EAAAD,EAAAI,EAAAP,EAAAK,EAAAH,EAAAI,EAAAL,GACAF,EAAA,MAAAM,EAAAF,EAAAI,EAAAN,EAAAK,EAAAN,EAAAI,EAAAF,GACAH,EAAA,MAAAO,EAAAH,EAAAI,EAAAL,EAAAE,EAAAH,EAAAI,EAAAL,IAGAN,GAAAzN,EAAAN,EAAAoO,GACA9N,EAYO,SAAAwO,GAAAxO,EAAAyO,GAIP,OAHAzO,EAAA,GAAAyO,EAAA,IACAzO,EAAA,GAAAyO,EAAA,IACAzO,EAAA,GAAAyO,EAAA,IACAzO,EAaO,SAAA0O,GAAA1O,EAAAyO,GACP,IAAAjO,EAAAiO,EAAA,GACAzI,EAAAyI,EAAA,GACA5C,EAAA4C,EAAA,GACAvI,EAAAuI,EAAA,GACAtI,EAAAsI,EAAA,GACA3C,EAAA2C,EAAA,GACAzC,EAAAyC,EAAA,GACAxC,EAAAwC,EAAA,GACAvC,EAAAuC,EAAA,IAIA,OAHAzO,EAAA,GAAAb,KAAAmD,KAAA9B,IAAAwF,IAAA6F,KACA7L,EAAA,GAAAb,KAAAmD,KAAA4D,IAAAC,IAAA2F,KACA9L,EAAA,GAAAb,KAAAmD,KAAA0J,IAAAC,IAAAC,KACAlM,EAYO,SAAA2O,GAAA3O,EAAAyO,GAEP,IAAAG,EAAAH,EAAA,GAAAA,EAAA,GAAAA,EAAA,IACAI,EAAA,EA4BA,OA1BAD,EAAA,GACAC,EAAA,EAAA1P,KAAAmD,KAAAsM,EAAA,GACA5O,EAAA,OAAA6O,EACA7O,EAAA,IAAAyO,EAAA,GAAAA,EAAA,IAAAI,EACA7O,EAAA,IAAAyO,EAAA,GAAAA,EAAA,IAAAI,EACA7O,EAAA,IAAAyO,EAAA,GAAAA,EAAA,IAAAI,GACGJ,EAAA,GAAAA,EAAA,IAAAA,EAAA,GAAAA,EAAA,KACHI,EAAA,EAAA1P,KAAAmD,KAAA,EAAAmM,EAAA,GAAAA,EAAA,GAAAA,EAAA,KACAzO,EAAA,IAAAyO,EAAA,GAAAA,EAAA,IAAAI,EACA7O,EAAA,OAAA6O,EACA7O,EAAA,IAAAyO,EAAA,GAAAA,EAAA,IAAAI,EACA7O,EAAA,IAAAyO,EAAA,GAAAA,EAAA,IAAAI,GACGJ,EAAA,GAAAA,EAAA,KACHI,EAAA,EAAA1P,KAAAmD,KAAA,EAAAmM,EAAA,GAAAA,EAAA,GAAAA,EAAA,KACAzO,EAAA,IAAAyO,EAAA,GAAAA,EAAA,IAAAI,EACA7O,EAAA,IAAAyO,EAAA,GAAAA,EAAA,IAAAI,EACA7O,EAAA,OAAA6O,EACA7O,EAAA,IAAAyO,EAAA,GAAAA,EAAA,IAAAI,IAEAA,EAAA,EAAA1P,KAAAmD,KAAA,EAAAmM,EAAA,IAAAA,EAAA,GAAAA,EAAA,IACAzO,EAAA,IAAAyO,EAAA,GAAAA,EAAA,IAAAI,EACA7O,EAAA,IAAAyO,EAAA,GAAAA,EAAA,IAAAI,EACA7O,EAAA,IAAAyO,EAAA,GAAAA,EAAA,IAAAI,EACA7O,EAAA,OAAA6O,GAGA7O,EAoBO,SAAA8O,GAAA9O,EAAAuI,EAAAxG,EAAAL,GAEP,IAAAoG,EAAAS,EAAA,GACAR,EAAAQ,EAAA,GACAC,EAAAD,EAAA,GACAE,EAAAF,EAAA,GACAG,EAAAZ,IACAa,EAAAZ,IACAa,EAAAJ,IACAK,EAAAf,EAAAY,EACAgF,EAAA5F,EAAAa,EACAgF,EAAA7F,EAAAc,EACAG,EAAAhB,EAAAY,EACAiF,EAAA7F,EAAAa,EACAM,EAAAV,EAAAI,EACAO,EAAAV,EAAAC,EACAU,EAAAX,EAAAE,EACAU,EAAAZ,EAAAG,EACAmG,EAAArN,EAAA,GACAsN,EAAAtN,EAAA,GACAuN,EAAAvN,EAAA,GAiBA,OAhBA1B,EAAA,OAAA+I,EAAAG,IAAA6F,EACA/O,EAAA,IAAA0N,EAAArE,GAAA0F,EACA/O,EAAA,IAAA2N,EAAAvE,GAAA2F,EACA/O,EAAA,KACAA,EAAA,IAAA0N,EAAArE,GAAA2F,EACAhP,EAAA,OAAA6I,EAAAK,IAAA8F,EACAhP,EAAA,IAAA4N,EAAAzE,GAAA6F,EACAhP,EAAA,KACAA,EAAA,IAAA2N,EAAAvE,GAAA6F,EACAjP,EAAA,IAAA4N,EAAAzE,GAAA8F,EACAjP,EAAA,QAAA6I,EAAAE,IAAAkG,EACAjP,EAAA,MACAA,EAAA,IAAA+B,EAAA,GACA/B,EAAA,IAAA+B,EAAA,GACA/B,EAAA,IAAA+B,EAAA,GACA/B,EAAA,MACAA,EAuBO,SAAAkP,GAAAlP,EAAAuI,EAAAxG,EAAAL,EAAAyN,GAEP,IAAArH,EAAAS,EAAA,GACAR,EAAAQ,EAAA,GACAC,EAAAD,EAAA,GACAE,EAAAF,EAAA,GACAG,EAAAZ,IACAa,EAAAZ,IACAa,EAAAJ,IACAK,EAAAf,EAAAY,EACAgF,EAAA5F,EAAAa,EACAgF,EAAA7F,EAAAc,EACAG,EAAAhB,EAAAY,EACAiF,EAAA7F,EAAAa,EACAM,EAAAV,EAAAI,EACAO,EAAAV,EAAAC,EACAU,EAAAX,EAAAE,EACAU,EAAAZ,EAAAG,EACAmG,EAAArN,EAAA,GACAsN,EAAAtN,EAAA,GACAuN,EAAAvN,EAAA,GACA0N,EAAAD,EAAA,GACAE,EAAAF,EAAA,GACAG,EAAAH,EAAA,GACAI,GAAA,GAAAxG,EAAAG,IAAA6F,EACAS,GAAA9B,EAAArE,GAAA0F,EACAU,GAAA9B,EAAAvE,GAAA2F,EACAW,GAAAhC,EAAArE,GAAA2F,EACAW,GAAA,GAAA9G,EAAAK,IAAA8F,EACAY,GAAAhC,EAAAzE,GAAA6F,EACAa,GAAAlC,EAAAvE,GAAA6F,EACAa,GAAAlC,EAAAzE,GAAA8F,EACAc,GAAA,GAAAlH,EAAAE,IAAAkG,EAiBA,OAhBAjP,EAAA,GAAAuP,EACAvP,EAAA,GAAAwP,EACAxP,EAAA,GAAAyP,EACAzP,EAAA,KACAA,EAAA,GAAA0P,EACA1P,EAAA,GAAA2P,EACA3P,EAAA,GAAA4P,EACA5P,EAAA,KACAA,EAAA,GAAA6P,EACA7P,EAAA,GAAA8P,EACA9P,EAAA,IAAA+P,EACA/P,EAAA,MACAA,EAAA,IAAA+B,EAAA,GAAAqN,GAAAG,EAAAH,EAAAM,EAAAL,EAAAQ,EAAAP,GACAtP,EAAA,IAAA+B,EAAA,GAAAsN,GAAAG,EAAAJ,EAAAO,EAAAN,EAAAS,EAAAR,GACAtP,EAAA,IAAA+B,EAAA,GAAAuN,GAAAG,EAAAL,EAAAQ,EAAAP,EAAAU,EAAAT,GACAtP,EAAA,MACAA,EAWO,SAASgQ,GAAQhQ,EAAAuI,GACxB,IAAAT,EAAAS,EAAA,GACAR,EAAAQ,EAAA,GACAC,EAAAD,EAAA,GACAE,EAAAF,EAAA,GACAG,EAAAZ,IACAa,EAAAZ,IACAa,EAAAJ,IACAK,EAAAf,EAAAY,EACAI,EAAAf,EAAAW,EACAK,EAAAhB,EAAAY,EACAK,EAAAR,EAAAE,EACAO,EAAAT,EAAAG,EACAO,EAAAV,EAAAI,EACAO,EAAAV,EAAAC,EACAU,EAAAX,EAAAE,EACAU,EAAAZ,EAAAG,EAiBA,OAhBA5I,EAAA,KAAA+I,EAAAG,EACAlJ,EAAA,GAAA8I,EAAAO,EACArJ,EAAA,GAAAgJ,EAAAI,EACApJ,EAAA,KACAA,EAAA,GAAA8I,EAAAO,EACArJ,EAAA,KAAA6I,EAAAK,EACAlJ,EAAA,GAAAiJ,EAAAE,EACAnJ,EAAA,KACAA,EAAA,GAAAgJ,EAAAI,EACApJ,EAAA,GAAAiJ,EAAAE,EACAnJ,EAAA,MAAA6I,EAAAE,EACA/I,EAAA,MACAA,EAAA,MACAA,EAAA,MACAA,EAAA,MACAA,EAAA,MACAA,EAeO,SAAAiQ,GAAAjQ,EAAAkQ,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GACP,IAAAC,EAAA,GAAAL,EAAAD,GACAO,EAAA,GAAAJ,EAAAD,GACAM,EAAA,GAAAJ,EAAAC,GAiBA,OAhBAvQ,EAAA,KAAAsQ,EAAAE,EACAxQ,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KAAAsQ,EAAAG,EACAzQ,EAAA,KACAA,EAAA,KACAA,EAAA,IAAAmQ,EAAAD,GAAAM,EACAxQ,EAAA,IAAAqQ,EAAAD,GAAAK,EACAzQ,EAAA,KAAAuQ,EAAAD,GAAAI,EACA1Q,EAAA,OACAA,EAAA,MACAA,EAAA,MACAA,EAAA,IAAAuQ,EAAAD,EAAA,EAAAI,EACA1Q,EAAA,MACAA,EAcO,SAAA2Q,GAAA3Q,EAAA4Q,EAAAC,EAAAP,EAAAC,GACP,IACAG,EADAI,EAAA,EAAA3R,KAAA4R,IAAAH,EAAA,GA0BA,OAxBA5Q,EAAA,GAAA8Q,EAAAD,EACA7Q,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,GAAA8Q,EACA9Q,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,OACAA,EAAA,MACAA,EAAA,MACAA,EAAA,MAEA,MAAAuQ,OAAAS,KACAN,EAAA,GAAAJ,EAAAC,GACAvQ,EAAA,KAAAuQ,EAAAD,GAAAI,EACA1Q,EAAA,MAAAuQ,EAAAD,EAAAI,IAEA1Q,EAAA,OACAA,EAAA,OAAAsQ,GAGAtQ,EAcO,SAAAiR,GAAAjR,EAAAkR,EAAAZ,EAAAC,GACP,IAAAY,EAAAhS,KAAA4R,IAAAG,EAAAE,UAAAjS,KAAAK,GAAA,KACA6R,EAAAlS,KAAA4R,IAAAG,EAAAI,YAAAnS,KAAAK,GAAA,KACA+R,EAAApS,KAAA4R,IAAAG,EAAAM,YAAArS,KAAAK,GAAA,KACAiS,EAAAtS,KAAA4R,IAAAG,EAAAQ,aAAAvS,KAAAK,GAAA,KACAmS,EAAA,GAAAJ,EAAAE,GACAG,EAAA,GAAAT,EAAAE,GAiBA,OAhBArR,EAAA,GAAA2R,EACA3R,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,GAAA4R,EACA5R,EAAA,KACAA,EAAA,KACAA,EAAA,KAAAuR,EAAAE,GAAAE,EAAA,GACA3R,EAAA,IAAAmR,EAAAE,GAAAO,EAAA,GACA5R,EAAA,IAAAuQ,GAAAD,EAAAC,GACAvQ,EAAA,OACAA,EAAA,MACAA,EAAA,MACAA,EAAA,IAAAuQ,EAAAD,KAAAC,GACAvQ,EAAA,MACAA,EAeO,SAAA6R,GAAA7R,EAAAkQ,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GACP,IAAAuB,EAAA,GAAA5B,EAAAC,GACA4B,EAAA,GAAA3B,EAAAC,GACAK,EAAA,GAAAJ,EAAAC,GAiBA,OAhBAvQ,EAAA,MAAA8R,EACA9R,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,MAAA+R,EACA/R,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,MAAA0Q,EACA1Q,EAAA,MACAA,EAAA,KAAAkQ,EAAAC,GAAA2B,EACA9R,EAAA,KAAAqQ,EAAAD,GAAA2B,EACA/R,EAAA,KAAAuQ,EAAAD,GAAAI,EACA1Q,EAAA,MACAA,EAaO,SAAAgS,GAAAhS,EAAAiS,EAAAC,EAAAC,GACP,IAAAC,EAAAC,EAAA3J,EAAA4J,EAAAC,EAAA5J,EAAA6J,EAAAC,EAAA7J,EAAAmE,EACA2F,EAAAT,EAAA,GACAU,EAAAV,EAAA,GACAW,EAAAX,EAAA,GACAY,EAAAV,EAAA,GACAW,EAAAX,EAAA,GACAY,EAAAZ,EAAA,GACAa,EAAAd,EAAA,GACAe,EAAAf,EAAA,GACAgB,EAAAhB,EAAA,GAEA,OAAA/S,KAAAU,IAAA6S,EAAAM,GAAiClU,GAAgBK,KAAAU,IAAA8S,EAAAM,GAA+BnU,GAAgBK,KAAAU,IAAA+S,EAAAM,GAA+BpU,EACpHsN,GAAQpM,IAGnBwS,EAAAE,EAAAM,EACAP,EAAAE,EAAAM,EACArK,EAAAgK,EAAAM,EAKAd,EAAAU,GADAlK,GAHAmE,EAAA,EAAA5N,KAAAmD,KAAAkQ,IAAAC,IAAA7J,MAIAmK,GAFAN,GAAA1F,GAGAsF,EAAAU,GAJAP,GAAAzF,GAIA8F,EAAAjK,EACAF,EAAAmK,EAAAJ,EAAAK,EAAAN,GACAzF,EAAA5N,KAAAmD,KAAA8P,IAAAC,IAAA3J,OAQA0J,GADArF,EAAA,EAAAA,EAEAsF,GAAAtF,EACArE,GAAAqE,IAPAqF,EAAA,EACAC,EAAA,EACA3J,EAAA,GAQA4J,EAAAG,EAAA/J,EAAAE,EAAAyJ,EACAE,EAAA3J,EAAAwJ,EAAAI,EAAA9J,EACAC,EAAA6J,EAAAH,EAAAI,EAAAL,GACArF,EAAA5N,KAAAmD,KAAAgQ,IAAAC,IAAA5J,OAQA2J,GADAvF,EAAA,EAAAA,EAEAwF,GAAAxF,EACApE,GAAAoE,IAPAuF,EAAA,EACAC,EAAA,EACA5J,EAAA,GAQA3I,EAAA,GAAAoS,EACApS,EAAA,GAAAsS,EACAtS,EAAA,GAAAwS,EACAxS,EAAA,KACAA,EAAA,GAAAqS,EACArS,EAAA,GAAAuS,EACAvS,EAAA,GAAAyS,EACAzS,EAAA,KACAA,EAAA,GAAA0I,EACA1I,EAAA,GAAA2I,EACA3I,EAAA,IAAA4I,EACA5I,EAAA,MACAA,EAAA,MAAAoS,EAAAM,EAAAL,EAAAM,EAAAjK,EAAAkK,GACA5S,EAAA,MAAAsS,EAAAI,EAAAH,EAAAI,EAAAhK,EAAAiK,GACA5S,EAAA,MAAAwS,EAAAE,EAAAD,EAAAE,EAAA/J,EAAAgK,GACA5S,EAAA,MACAA,GAYO,SAAAmT,GAAAnT,EAAAiS,EAAAmB,EAAAjB,GACP,IAAAO,EAAAT,EAAA,GACAU,EAAAV,EAAA,GACAW,EAAAX,EAAA,GACAY,EAAAV,EAAA,GACAW,EAAAX,EAAA,GACAY,EAAAZ,EAAA,GACAK,EAAAE,EAAAU,EAAA,GACAX,EAAAE,EAAAS,EAAA,GACAxK,EAAAgK,EAAAQ,EAAA,GACArG,EAAAyF,IAAAC,IAAA7J,IAEAmE,EAAA,IAEAyF,GADAzF,EAAA,EAAA5N,KAAAmD,KAAAyK,GAEA0F,GAAA1F,EACAnE,GAAAmE,GAGA,IAAAqF,EAAAU,EAAAlK,EAAAmK,EAAAN,EACAJ,EAAAU,EAAAP,EAAAK,EAAAjK,EACAF,EAAAmK,EAAAJ,EAAAK,EAAAN,EA0BA,OAzBAzF,EAAAqF,IAAAC,IAAA3J,KAEA,IAEA0J,GADArF,EAAA,EAAA5N,KAAAmD,KAAAyK,GAEAsF,GAAAtF,EACArE,GAAAqE,GAGA/M,EAAA,GAAAoS,EACApS,EAAA,GAAAqS,EACArS,EAAA,GAAA0I,EACA1I,EAAA,KACAA,EAAA,GAAAyS,EAAA/J,EAAAE,EAAAyJ,EACArS,EAAA,GAAA4I,EAAAwJ,EAAAI,EAAA9J,EACA1I,EAAA,GAAAwS,EAAAH,EAAAI,EAAAL,EACApS,EAAA,KACAA,EAAA,GAAAwS,EACAxS,EAAA,GAAAyS,EACAzS,EAAA,IAAA4I,EACA5I,EAAA,MACAA,EAAA,IAAA0S,EACA1S,EAAA,IAAA2S,EACA3S,EAAA,IAAA4S,EACA5S,EAAA,MACAA,EAUO,SAASqT,GAAG3T,GACnB,cAAAA,EAAA,QAAAA,EAAA,QAAAA,EAAA,QAAAA,EAAA,QAAAA,EAAA,QAAAA,EAAA,QAAAA,EAAA,QAAAA,EAAA,QAAAA,EAAA,QAAAA,EAAA,QAAAA,EAAA,SAAAA,EAAA,SAAAA,EAAA,SAAAA,EAAA,SAAAA,EAAA,SAAAA,EAAA,QASO,SAAS4T,GAAI5T,GACpB,OAAAP,KAAAmD,KAAAnD,KAAAoD,IAAA7C,EAAA,MAAAP,KAAAoD,IAAA7C,EAAA,MAAAP,KAAAoD,IAAA7C,EAAA,MAAAP,KAAAoD,IAAA7C,EAAA,MAAAP,KAAAoD,IAAA7C,EAAA,MAAAP,KAAAoD,IAAA7C,EAAA,MAAAP,KAAAoD,IAAA7C,EAAA,MAAAP,KAAAoD,IAAA7C,EAAA,MAAAP,KAAAoD,IAAA7C,EAAA,MAAAP,KAAAoD,IAAA7C,EAAA,MAAAP,KAAAoD,IAAA7C,EAAA,OAAAP,KAAAoD,IAAA7C,EAAA,OAAAP,KAAAoD,IAAA7C,EAAA,OAAAP,KAAAoD,IAAA7C,EAAA,OAAAP,KAAAoD,IAAA7C,EAAA,OAAAP,KAAAoD,IAAA7C,EAAA,QAWO,SAAS6T,GAAGvT,EAAAN,EAAAE,GAiBnB,OAhBAI,EAAA,GAAAN,EAAA,GAAAE,EAAA,GACAI,EAAA,GAAAN,EAAA,GAAAE,EAAA,GACAI,EAAA,GAAAN,EAAA,GAAAE,EAAA,GACAI,EAAA,GAAAN,EAAA,GAAAE,EAAA,GACAI,EAAA,GAAAN,EAAA,GAAAE,EAAA,GACAI,EAAA,GAAAN,EAAA,GAAAE,EAAA,GACAI,EAAA,GAAAN,EAAA,GAAAE,EAAA,GACAI,EAAA,GAAAN,EAAA,GAAAE,EAAA,GACAI,EAAA,GAAAN,EAAA,GAAAE,EAAA,GACAI,EAAA,GAAAN,EAAA,GAAAE,EAAA,GACAI,EAAA,IAAAN,EAAA,IAAAE,EAAA,IACAI,EAAA,IAAAN,EAAA,IAAAE,EAAA,IACAI,EAAA,IAAAN,EAAA,IAAAE,EAAA,IACAI,EAAA,IAAAN,EAAA,IAAAE,EAAA,IACAI,EAAA,IAAAN,EAAA,IAAAE,EAAA,IACAI,EAAA,IAAAN,EAAA,IAAAE,EAAA,IACAI,EAWO,SAASwT,GAAQxT,EAAAN,EAAAE,GAiBxB,OAhBAI,EAAA,GAAAN,EAAA,GAAAE,EAAA,GACAI,EAAA,GAAAN,EAAA,GAAAE,EAAA,GACAI,EAAA,GAAAN,EAAA,GAAAE,EAAA,GACAI,EAAA,GAAAN,EAAA,GAAAE,EAAA,GACAI,EAAA,GAAAN,EAAA,GAAAE,EAAA,GACAI,EAAA,GAAAN,EAAA,GAAAE,EAAA,GACAI,EAAA,GAAAN,EAAA,GAAAE,EAAA,GACAI,EAAA,GAAAN,EAAA,GAAAE,EAAA,GACAI,EAAA,GAAAN,EAAA,GAAAE,EAAA,GACAI,EAAA,GAAAN,EAAA,GAAAE,EAAA,GACAI,EAAA,IAAAN,EAAA,IAAAE,EAAA,IACAI,EAAA,IAAAN,EAAA,IAAAE,EAAA,IACAI,EAAA,IAAAN,EAAA,IAAAE,EAAA,IACAI,EAAA,IAAAN,EAAA,IAAAE,EAAA,IACAI,EAAA,IAAAN,EAAA,IAAAE,EAAA,IACAI,EAAA,IAAAN,EAAA,IAAAE,EAAA,IACAI,EAWO,SAASyT,GAAczT,EAAAN,EAAAE,GAiB9B,OAhBAI,EAAA,GAAAN,EAAA,GAAAE,EACAI,EAAA,GAAAN,EAAA,GAAAE,EACAI,EAAA,GAAAN,EAAA,GAAAE,EACAI,EAAA,GAAAN,EAAA,GAAAE,EACAI,EAAA,GAAAN,EAAA,GAAAE,EACAI,EAAA,GAAAN,EAAA,GAAAE,EACAI,EAAA,GAAAN,EAAA,GAAAE,EACAI,EAAA,GAAAN,EAAA,GAAAE,EACAI,EAAA,GAAAN,EAAA,GAAAE,EACAI,EAAA,GAAAN,EAAA,GAAAE,EACAI,EAAA,IAAAN,EAAA,IAAAE,EACAI,EAAA,IAAAN,EAAA,IAAAE,EACAI,EAAA,IAAAN,EAAA,IAAAE,EACAI,EAAA,IAAAN,EAAA,IAAAE,EACAI,EAAA,IAAAN,EAAA,IAAAE,EACAI,EAAA,IAAAN,EAAA,IAAAE,EACAI,EAYO,SAAS0T,GAAoB1T,EAAAN,EAAAE,EAAAsD,GAiBpC,OAhBAlD,EAAA,GAAAN,EAAA,GAAAE,EAAA,GAAAsD,EACAlD,EAAA,GAAAN,EAAA,GAAAE,EAAA,GAAAsD,EACAlD,EAAA,GAAAN,EAAA,GAAAE,EAAA,GAAAsD,EACAlD,EAAA,GAAAN,EAAA,GAAAE,EAAA,GAAAsD,EACAlD,EAAA,GAAAN,EAAA,GAAAE,EAAA,GAAAsD,EACAlD,EAAA,GAAAN,EAAA,GAAAE,EAAA,GAAAsD,EACAlD,EAAA,GAAAN,EAAA,GAAAE,EAAA,GAAAsD,EACAlD,EAAA,GAAAN,EAAA,GAAAE,EAAA,GAAAsD,EACAlD,EAAA,GAAAN,EAAA,GAAAE,EAAA,GAAAsD,EACAlD,EAAA,GAAAN,EAAA,GAAAE,EAAA,GAAAsD,EACAlD,EAAA,IAAAN,EAAA,IAAAE,EAAA,IAAAsD,EACAlD,EAAA,IAAAN,EAAA,IAAAE,EAAA,IAAAsD,EACAlD,EAAA,IAAAN,EAAA,IAAAE,EAAA,IAAAsD,EACAlD,EAAA,IAAAN,EAAA,IAAAE,EAAA,IAAAsD,EACAlD,EAAA,IAAAN,EAAA,IAAAE,EAAA,IAAAsD,EACAlD,EAAA,IAAAN,EAAA,IAAAE,EAAA,IAAAsD,EACAlD,EAUO,SAAS2T,GAAWjU,EAAAE,GAC3B,OAAAF,EAAA,KAAAE,EAAA,IAAAF,EAAA,KAAAE,EAAA,IAAAF,EAAA,KAAAE,EAAA,IAAAF,EAAA,KAAAE,EAAA,IAAAF,EAAA,KAAAE,EAAA,IAAAF,EAAA,KAAAE,EAAA,IAAAF,EAAA,KAAAE,EAAA,IAAAF,EAAA,KAAAE,EAAA,IAAAF,EAAA,KAAAE,EAAA,IAAAF,EAAA,KAAAE,EAAA,IAAAF,EAAA,MAAAE,EAAA,KAAAF,EAAA,MAAAE,EAAA,KAAAF,EAAA,MAAAE,EAAA,KAAAF,EAAA,MAAAE,EAAA,KAAAF,EAAA,MAAAE,EAAA,KAAAF,EAAA,MAAAE,EAAA,IAUO,SAASgU,GAAMlU,EAAAE,GACtB,IAAAiB,EAAAnB,EAAA,GACAiB,EAAAjB,EAAA,GACAoB,EAAApB,EAAA,GACAqB,EAAArB,EAAA,GACA4E,EAAA5E,EAAA,GACA6E,EAAA7E,EAAA,GACAsL,EAAAtL,EAAA,GACAuL,EAAAvL,EAAA,GACAwL,EAAAxL,EAAA,GACAmU,EAAAnU,EAAA,GACAkH,EAAAlH,EAAA,IACAmH,EAAAnH,EAAA,IACA+G,EAAA/G,EAAA,IACA8J,EAAA9J,EAAA,IACAoU,EAAApU,EAAA,IACAqU,EAAArU,EAAA,IACA0B,EAAAxB,EAAA,GACAyB,EAAAzB,EAAA,GACA0B,EAAA1B,EAAA,GACA2B,EAAA3B,EAAA,GACA4E,EAAA5E,EAAA,GACA6E,EAAA7E,EAAA,GACAuL,EAAAvL,EAAA,GACAwL,EAAAxL,EAAA,GACAyL,EAAAzL,EAAA,GACAoU,EAAApU,EAAA,GACA6H,EAAA7H,EAAA,IACAsH,EAAAtH,EAAA,IACA8H,EAAA9H,EAAA,IACAqU,EAAArU,EAAA,IACAsU,EAAAtU,EAAA,IACAuU,EAAAvU,EAAA,IACA,OAAAT,KAAAU,IAAAgB,EAAAO,IAA8BtC,EAAgBK,KAAAW,IAAA,EAAAX,KAAAU,IAAAgB,GAAA1B,KAAAU,IAAAuB,KAAAjC,KAAAU,IAAAc,EAAAU,IAAqEvC,EAAgBK,KAAAW,IAAA,EAAAX,KAAAU,IAAAc,GAAAxB,KAAAU,IAAAwB,KAAAlC,KAAAU,IAAAiB,EAAAQ,IAAqExC,EAAgBK,KAAAW,IAAA,EAAAX,KAAAU,IAAAiB,GAAA3B,KAAAU,IAAAyB,KAAAnC,KAAAU,IAAAkB,EAAAQ,IAAqEzC,EAAgBK,KAAAW,IAAA,EAAAX,KAAAU,IAAAkB,GAAA5B,KAAAU,IAAA0B,KAAApC,KAAAU,IAAAyE,EAAAE,IAAqE1F,EAAgBK,KAAAW,IAAA,EAAAX,KAAAU,IAAAyE,GAAAnF,KAAAU,IAAA2E,KAAArF,KAAAU,IAAA0E,EAAAE,IAAqE3F,EAAgBK,KAAAW,IAAA,EAAAX,KAAAU,IAAA0E,GAAApF,KAAAU,IAAA4E,KAAAtF,KAAAU,IAAAmL,EAAAG,IAAqErM,EAAgBK,KAAAW,IAAA,EAAAX,KAAAU,IAAAmL,GAAA7L,KAAAU,IAAAsL,KAAAhM,KAAAU,IAAAoL,EAAAG,IAAqEtM,EAAgBK,KAAAW,IAAA,EAAAX,KAAAU,IAAAoL,GAAA9L,KAAAU,IAAAuL,KAAAjM,KAAAU,IAAAqL,EAAAG,IAAqEvM,EAAgBK,KAAAW,IAAA,EAAAX,KAAAU,IAAAqL,GAAA/L,KAAAU,IAAAwL,KAAAlM,KAAAU,IAAAgU,EAAAG,IAAqElV,EAAgBK,KAAAW,IAAA,EAAAX,KAAAU,IAAAgU,GAAA1U,KAAAU,IAAAmU,KAAA7U,KAAAU,IAAA+G,EAAAa,IAAuE3I,EAAgBK,KAAAW,IAAA,EAAAX,KAAAU,IAAA+G,GAAAzH,KAAAU,IAAA4H,KAAAtI,KAAAU,IAAAgH,EAAAK,IAAyEpI,EAAgBK,KAAAW,IAAA,EAAAX,KAAAU,IAAAgH,GAAA1H,KAAAU,IAAAqH,KAAA/H,KAAAU,IAAA4G,EAAAiB,IAAyE5I,EAAgBK,KAAAW,IAAA,EAAAX,KAAAU,IAAA4G,GAAAtH,KAAAU,IAAA6H,KAAAvI,KAAAU,IAAA2J,EAAAyK,IAAyEnV,EAAgBK,KAAAW,IAAA,EAAAX,KAAAU,IAAA2J,GAAArK,KAAAU,IAAAoU,KAAA9U,KAAAU,IAAAiU,EAAAI,IAAyEpV,EAAgBK,KAAAW,IAAA,EAAAX,KAAAU,IAAAiU,GAAA3U,KAAAU,IAAAqU,KAAA/U,KAAAU,IAAAkU,EAAAI,IAAyErV,EAAgBK,KAAAW,IAAA,EAAAX,KAAAU,IAAAkU,GAAA5U,KAAAU,IAAAsU,IAOxzC,IAAIC,GAAM3H,GAMN4H,GAAMb,GC7vDV,SAASc,KAChB,IAAAtU,EAAA,IAAgBjB,EAAmB,GAQnC,OANMA,GAAmBC,eACzBgB,EAAA,KACAA,EAAA,KACAA,EAAA,MAGAA,EASO,SAASuU,GAAK7U,GACrB,IAAAM,EAAA,IAAgBjB,EAAmB,GAInC,OAHAiB,EAAA,GAAAN,EAAA,GACAM,EAAA,GAAAN,EAAA,GACAM,EAAA,GAAAN,EAAA,GACAM,EASO,SAASwU,GAAM9U,GACtB,IAAAoI,EAAApI,EAAA,GACAqI,EAAArI,EAAA,GACA8I,EAAA9I,EAAA,GACA,OAAAP,KAAAmD,KAAAwF,IAAAC,IAAAS,KAWO,SAASiM,GAAU3M,EAAAC,EAAAS,GAC1B,IAAAxI,EAAA,IAAgBjB,EAAmB,GAInC,OAHAiB,EAAA,GAAA8H,EACA9H,EAAA,GAAA+H,EACA/H,EAAA,GAAAwI,EACAxI,EAUO,SAAS0U,GAAI1U,EAAAN,GAIpB,OAHAM,EAAA,GAAAN,EAAA,GACAM,EAAA,GAAAN,EAAA,GACAM,EAAA,GAAAN,EAAA,GACAM,EAYO,SAAS2U,GAAG3U,EAAA8H,EAAAC,EAAAS,GAInB,OAHAxI,EAAA,GAAA8H,EACA9H,EAAA,GAAA+H,EACA/H,EAAA,GAAAwI,EACAxI,EAWO,SAAS4U,GAAG5U,EAAAN,EAAAE,GAInB,OAHAI,EAAA,GAAAN,EAAA,GAAAE,EAAA,GACAI,EAAA,GAAAN,EAAA,GAAAE,EAAA,GACAI,EAAA,GAAAN,EAAA,GAAAE,EAAA,GACAI,EAWO,SAAS6U,GAAQ7U,EAAAN,EAAAE,GAIxB,OAHAI,EAAA,GAAAN,EAAA,GAAAE,EAAA,GACAI,EAAA,GAAAN,EAAA,GAAAE,EAAA,GACAI,EAAA,GAAAN,EAAA,GAAAE,EAAA,GACAI,EAWO,SAAS8U,GAAQ9U,EAAAN,EAAAE,GAIxB,OAHAI,EAAA,GAAAN,EAAA,GAAAE,EAAA,GACAI,EAAA,GAAAN,EAAA,GAAAE,EAAA,GACAI,EAAA,GAAAN,EAAA,GAAAE,EAAA,GACAI,EAWO,SAAA+U,GAAA/U,EAAAN,EAAAE,GAIP,OAHAI,EAAA,GAAAN,EAAA,GAAAE,EAAA,GACAI,EAAA,GAAAN,EAAA,GAAAE,EAAA,GACAI,EAAA,GAAAN,EAAA,GAAAE,EAAA,GACAI,EAUO,SAAAgV,GAAAhV,EAAAN,GAIP,OAHAM,EAAA,GAAAb,KAAA6V,KAAAtV,EAAA,IACAM,EAAA,GAAAb,KAAA6V,KAAAtV,EAAA,IACAM,EAAA,GAAAb,KAAA6V,KAAAtV,EAAA,IACAM,EAUO,SAAAiV,GAAAjV,EAAAN,GAIP,OAHAM,EAAA,GAAAb,KAAA8V,MAAAvV,EAAA,IACAM,EAAA,GAAAb,KAAA8V,MAAAvV,EAAA,IACAM,EAAA,GAAAb,KAAA8V,MAAAvV,EAAA,IACAM,EAWO,SAAAkV,GAAAlV,EAAAN,EAAAE,GAIP,OAHAI,EAAA,GAAAb,KAAA+V,IAAAxV,EAAA,GAAAE,EAAA,IACAI,EAAA,GAAAb,KAAA+V,IAAAxV,EAAA,GAAAE,EAAA,IACAI,EAAA,GAAAb,KAAA+V,IAAAxV,EAAA,GAAAE,EAAA,IACAI,EAWO,SAAAF,GAAAE,EAAAN,EAAAE,GAIP,OAHAI,EAAA,GAAAb,KAAAW,IAAAJ,EAAA,GAAAE,EAAA,IACAI,EAAA,GAAAb,KAAAW,IAAAJ,EAAA,GAAAE,EAAA,IACAI,EAAA,GAAAb,KAAAW,IAAAJ,EAAA,GAAAE,EAAA,IACAI,EAUO,SAAAmV,GAAAnV,EAAAN,GAIP,OAHAM,EAAA,GAAAb,KAAAgW,MAAAzV,EAAA,IACAM,EAAA,GAAAb,KAAAgW,MAAAzV,EAAA,IACAM,EAAA,GAAAb,KAAAgW,MAAAzV,EAAA,IACAM,EAWO,SAASoV,GAAKpV,EAAAN,EAAAE,GAIrB,OAHAI,EAAA,GAAAN,EAAA,GAAAE,EACAI,EAAA,GAAAN,EAAA,GAAAE,EACAI,EAAA,GAAAN,EAAA,GAAAE,EACAI,EAYO,SAAAqV,GAAArV,EAAAN,EAAAE,EAAAsD,GAIP,OAHAlD,EAAA,GAAAN,EAAA,GAAAE,EAAA,GAAAsD,EACAlD,EAAA,GAAAN,EAAA,GAAAE,EAAA,GAAAsD,EACAlD,EAAA,GAAAN,EAAA,GAAAE,EAAA,GAAAsD,EACAlD,EAUO,SAAAsV,GAAA5V,EAAAE,GACP,IAAAkI,EAAAlI,EAAA,GAAAF,EAAA,GACAqI,EAAAnI,EAAA,GAAAF,EAAA,GACA8I,EAAA5I,EAAA,GAAAF,EAAA,GACA,OAAAP,KAAAmD,KAAAwF,IAAAC,IAAAS,KAUO,SAAA+M,GAAA7V,EAAAE,GACP,IAAAkI,EAAAlI,EAAA,GAAAF,EAAA,GACAqI,EAAAnI,EAAA,GAAAF,EAAA,GACA8I,EAAA5I,EAAA,GAAAF,EAAA,GACA,OAAAoI,IAAAC,IAAAS,IASO,SAAAgN,GAAA9V,GACP,IAAAoI,EAAApI,EAAA,GACAqI,EAAArI,EAAA,GACA8I,EAAA9I,EAAA,GACA,OAAAoI,IAAAC,IAAAS,IAUO,SAAAiN,GAAAzV,EAAAN,GAIP,OAHAM,EAAA,IAAAN,EAAA,GACAM,EAAA,IAAAN,EAAA,GACAM,EAAA,IAAAN,EAAA,GACAM,EAUO,SAAA0V,GAAA1V,EAAAN,GAIP,OAHAM,EAAA,KAAAN,EAAA,GACAM,EAAA,KAAAN,EAAA,GACAM,EAAA,KAAAN,EAAA,GACAM,EAUO,SAAA2V,GAAA3V,EAAAN,GACP,IAAAoI,EAAApI,EAAA,GACAqI,EAAArI,EAAA,GACA8I,EAAA9I,EAAA,GACAqN,EAAAjF,IAAAC,IAAAS,IAUA,OARAuE,EAAA,IAEAA,EAAA,EAAA5N,KAAAmD,KAAAyK,IAGA/M,EAAA,GAAAN,EAAA,GAAAqN,EACA/M,EAAA,GAAAN,EAAA,GAAAqN,EACA/M,EAAA,GAAAN,EAAA,GAAAqN,EACA/M,EAUO,SAAS4V,GAAGlW,EAAAE,GACnB,OAAAF,EAAA,GAAAE,EAAA,GAAAF,EAAA,GAAAE,EAAA,GAAAF,EAAA,GAAAE,EAAA,GAWO,SAAAiW,GAAA7V,EAAAN,EAAAE,GACP,IAAAuO,EAAAzO,EAAA,GACA0O,EAAA1O,EAAA,GACA2O,EAAA3O,EAAA,GACAqO,EAAAnO,EAAA,GACAoO,EAAApO,EAAA,GACAqO,EAAArO,EAAA,GAIA,OAHAI,EAAA,GAAAoO,EAAAH,EAAAI,EAAAL,EACAhO,EAAA,GAAAqO,EAAAN,EAAAI,EAAAF,EACAjO,EAAA,GAAAmO,EAAAH,EAAAI,EAAAL,EACA/N,EAYO,SAAA8V,GAAA9V,EAAAN,EAAAE,EAAAkN,GACP,IAAAqB,EAAAzO,EAAA,GACA0O,EAAA1O,EAAA,GACA2O,EAAA3O,EAAA,GAIA,OAHAM,EAAA,GAAAmO,EAAArB,GAAAlN,EAAA,GAAAuO,GACAnO,EAAA,GAAAoO,EAAAtB,GAAAlN,EAAA,GAAAwO,GACApO,EAAA,GAAAqO,EAAAvB,GAAAlN,EAAA,GAAAyO,GACArO,EAcO,SAAA+V,GAAA/V,EAAAN,EAAAE,EAAAgC,EAAAhD,EAAAkO,GACP,IAAAkJ,EAAAlJ,IACAmJ,EAAAD,GAAA,EAAAlJ,EAAA,KACAoJ,EAAAF,GAAAlJ,EAAA,GAAAA,EACAqJ,EAAAH,GAAAlJ,EAAA,GACAsJ,EAAAJ,GAAA,IAAAlJ,GAIA,OAHA9M,EAAA,GAAAN,EAAA,GAAAuW,EAAArW,EAAA,GAAAsW,EAAAtU,EAAA,GAAAuU,EAAAvX,EAAA,GAAAwX,EACApW,EAAA,GAAAN,EAAA,GAAAuW,EAAArW,EAAA,GAAAsW,EAAAtU,EAAA,GAAAuU,EAAAvX,EAAA,GAAAwX,EACApW,EAAA,GAAAN,EAAA,GAAAuW,EAAArW,EAAA,GAAAsW,EAAAtU,EAAA,GAAAuU,EAAAvX,EAAA,GAAAwX,EACApW,EAcO,SAAAqW,GAAArW,EAAAN,EAAAE,EAAAgC,EAAAhD,EAAAkO,GACP,IAAAwJ,EAAA,EAAAxJ,EACAyJ,EAAAD,IACAN,EAAAlJ,IACAmJ,EAAAM,EAAAD,EACAJ,EAAA,EAAApJ,EAAAyJ,EACAJ,EAAA,EAAAH,EAAAM,EACAF,EAAAJ,EAAAlJ,EAIA,OAHA9M,EAAA,GAAAN,EAAA,GAAAuW,EAAArW,EAAA,GAAAsW,EAAAtU,EAAA,GAAAuU,EAAAvX,EAAA,GAAAwX,EACApW,EAAA,GAAAN,EAAA,GAAAuW,EAAArW,EAAA,GAAAsW,EAAAtU,EAAA,GAAAuU,EAAAvX,EAAA,GAAAwX,EACApW,EAAA,GAAAN,EAAA,GAAAuW,EAAArW,EAAA,GAAAsW,EAAAtU,EAAA,GAAAuU,EAAAvX,EAAA,GAAAwX,EACApW,EAUO,SAAAZ,GAAAY,EAAAkD,GACPA,KAAA,EACA,IAAAsT,EAAyB,EAAftX,IAAeC,KAAAK,GACzBgJ,EAAyB,EAAftJ,IAAe,EACzBuX,EAAAtX,KAAAmD,KAAA,EAAAkG,KAAAtF,EAIA,OAHAlD,EAAA,GAAAb,KAAA0C,IAAA2U,GAAAC,EACAzW,EAAA,GAAAb,KAAAwC,IAAA6U,GAAAC,EACAzW,EAAA,GAAAwI,EAAAtF,EACAlD,EAYO,SAAA0W,GAAA1W,EAAAN,EAAAiX,GACP,IAAA7O,EAAApI,EAAA,GACAqI,EAAArI,EAAA,GACA8I,EAAA9I,EAAA,GACA+I,EAAAkO,EAAA,GAAA7O,EAAA6O,EAAA,GAAA5O,EAAA4O,EAAA,IAAAnO,EAAAmO,EAAA,IAKA,OAJAlO,KAAA,EACAzI,EAAA,IAAA2W,EAAA,GAAA7O,EAAA6O,EAAA,GAAA5O,EAAA4O,EAAA,GAAAnO,EAAAmO,EAAA,KAAAlO,EACAzI,EAAA,IAAA2W,EAAA,GAAA7O,EAAA6O,EAAA,GAAA5O,EAAA4O,EAAA,GAAAnO,EAAAmO,EAAA,KAAAlO,EACAzI,EAAA,IAAA2W,EAAA,GAAA7O,EAAA6O,EAAA,GAAA5O,EAAA4O,EAAA,IAAAnO,EAAAmO,EAAA,KAAAlO,EACAzI,EAWO,SAAA4W,GAAA5W,EAAAN,EAAAiX,GACP,IAAA7O,EAAApI,EAAA,GACAqI,EAAArI,EAAA,GACA8I,EAAA9I,EAAA,GAIA,OAHAM,EAAA,GAAA8H,EAAA6O,EAAA,GAAA5O,EAAA4O,EAAA,GAAAnO,EAAAmO,EAAA,GACA3W,EAAA,GAAA8H,EAAA6O,EAAA,GAAA5O,EAAA4O,EAAA,GAAAnO,EAAAmO,EAAA,GACA3W,EAAA,GAAA8H,EAAA6O,EAAA,GAAA5O,EAAA4O,EAAA,GAAAnO,EAAAmO,EAAA,GACA3W,EAYO,SAAA6W,GAAA7W,EAAAN,EAAA6I,GAEP,IAAAuO,EAAAvO,EAAA,GACAwO,EAAAxO,EAAA,GACAyO,EAAAzO,EAAA,GACA0O,EAAA1O,EAAA,GACAT,EAAApI,EAAA,GACAqI,EAAArI,EAAA,GACA8I,EAAA9I,EAAA,GAGAwX,EAAAH,EAAAvO,EAAAwO,EAAAjP,EACAoP,EAAAH,EAAAlP,EAAAgP,EAAAtO,EACA4O,EAAAN,EAAA/O,EAAAgP,EAAAjP,EAEAuP,EAAAN,EAAAK,EAAAJ,EAAAG,EACAG,EAAAN,EAAAE,EAAAJ,EAAAM,EACAG,EAAAT,EAAAK,EAAAJ,EAAAG,EAEAM,EAAA,EAAAP,EAYA,OAXAC,GAAAM,EACAL,GAAAK,EACAJ,GAAAI,EAEAH,GAAA,EACAC,GAAA,EACAC,GAAA,EAEAvX,EAAA,GAAA8H,EAAAoP,EAAAG,EACArX,EAAA,GAAA+H,EAAAoP,EAAAG,EACAtX,EAAA,GAAAwI,EAAA4O,EAAAG,EACAvX,EAWO,SAASyX,GAAOzX,EAAAN,EAAAE,EAAAgC,GACvB,IAAA8V,EAAA,GACAlB,EAAA,GAaA,OAXAkB,EAAA,GAAAhY,EAAA,GAAAE,EAAA,GACA8X,EAAA,GAAAhY,EAAA,GAAAE,EAAA,GACA8X,EAAA,GAAAhY,EAAA,GAAAE,EAAA,GAEA4W,EAAA,GAAAkB,EAAA,GACAlB,EAAA,GAAAkB,EAAA,GAAAvY,KAAA0C,IAAAD,GAAA8V,EAAA,GAAAvY,KAAAwC,IAAAC,GACA4U,EAAA,GAAAkB,EAAA,GAAAvY,KAAAwC,IAAAC,GAAA8V,EAAA,GAAAvY,KAAA0C,IAAAD,GAEA5B,EAAA,GAAAwW,EAAA,GAAA5W,EAAA,GACAI,EAAA,GAAAwW,EAAA,GAAA5W,EAAA,GACAI,EAAA,GAAAwW,EAAA,GAAA5W,EAAA,GACAI,EAWO,SAAS2X,GAAO3X,EAAAN,EAAAE,EAAAgC,GACvB,IAAA8V,EAAA,GACAlB,EAAA,GAaA,OAXAkB,EAAA,GAAAhY,EAAA,GAAAE,EAAA,GACA8X,EAAA,GAAAhY,EAAA,GAAAE,EAAA,GACA8X,EAAA,GAAAhY,EAAA,GAAAE,EAAA,GAEA4W,EAAA,GAAAkB,EAAA,GAAAvY,KAAAwC,IAAAC,GAAA8V,EAAA,GAAAvY,KAAA0C,IAAAD,GACA4U,EAAA,GAAAkB,EAAA,GACAlB,EAAA,GAAAkB,EAAA,GAAAvY,KAAA0C,IAAAD,GAAA8V,EAAA,GAAAvY,KAAAwC,IAAAC,GAEA5B,EAAA,GAAAwW,EAAA,GAAA5W,EAAA,GACAI,EAAA,GAAAwW,EAAA,GAAA5W,EAAA,GACAI,EAAA,GAAAwW,EAAA,GAAA5W,EAAA,GACAI,EAWO,SAAS4X,GAAO5X,EAAAN,EAAAE,EAAAgC,GACvB,IAAA8V,EAAA,GACAlB,EAAA,GAaA,OAXAkB,EAAA,GAAAhY,EAAA,GAAAE,EAAA,GACA8X,EAAA,GAAAhY,EAAA,GAAAE,EAAA,GACA8X,EAAA,GAAAhY,EAAA,GAAAE,EAAA,GAEA4W,EAAA,GAAAkB,EAAA,GAAAvY,KAAA0C,IAAAD,GAAA8V,EAAA,GAAAvY,KAAAwC,IAAAC,GACA4U,EAAA,GAAAkB,EAAA,GAAAvY,KAAAwC,IAAAC,GAAA8V,EAAA,GAAAvY,KAAA0C,IAAAD,GACA4U,EAAA,GAAAkB,EAAA,GAEA1X,EAAA,GAAAwW,EAAA,GAAA5W,EAAA,GACAI,EAAA,GAAAwW,EAAA,GAAA5W,EAAA,GACAI,EAAA,GAAAwW,EAAA,GAAA5W,EAAA,GACAI,EASO,SAAA6X,GAAAnY,EAAAE,GACP,IAAAkY,EAAcrD,GAAU/U,EAAA,GAAAA,EAAA,GAAAA,EAAA,IACxBqY,EAActD,GAAU7U,EAAA,GAAAA,EAAA,GAAAA,EAAA,IACxB+V,GAAAmC,KACAnC,GAAAoC,KACA,IAAAC,EAAepC,GAAGkC,EAAAC,GAElB,OAAAC,EAAA,EACA,EACGA,GAAA,EACH7Y,KAAAK,GAEAL,KAAA8Y,KAAAD,GAUO,SAAAE,GAAAlY,GAIP,OAHAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EASO,SAASmY,GAAGzY,GACnB,cAAAA,EAAA,QAAAA,EAAA,QAAAA,EAAA,OAUO,SAAS0Y,GAAW1Y,EAAAE,GAC3B,OAAAF,EAAA,KAAAE,EAAA,IAAAF,EAAA,KAAAE,EAAA,IAAAF,EAAA,KAAAE,EAAA,GAUO,SAASyY,GAAM3Y,EAAAE,GACtB,IAAAiB,EAAAnB,EAAA,GACAiB,EAAAjB,EAAA,GACAoB,EAAApB,EAAA,GACA0B,EAAAxB,EAAA,GACAyB,EAAAzB,EAAA,GACA0B,EAAA1B,EAAA,GACA,OAAAT,KAAAU,IAAAgB,EAAAO,IAA8BtC,EAAgBK,KAAAW,IAAA,EAAAX,KAAAU,IAAAgB,GAAA1B,KAAAU,IAAAuB,KAAAjC,KAAAU,IAAAc,EAAAU,IAAqEvC,EAAgBK,KAAAW,IAAA,EAAAX,KAAAU,IAAAc,GAAAxB,KAAAU,IAAAwB,KAAAlC,KAAAU,IAAAiB,EAAAQ,IAAqExC,EAAgBK,KAAAW,IAAA,EAAAX,KAAAU,IAAAiB,GAAA3B,KAAAU,IAAAyB,IAOjN,IAAIgX,GAAMzD,GAMN0D,GAAMzD,GAMV0D,GAAAzD,GAMA0D,GAAAnD,GAMAoD,GAAAnD,GAMIoD,GAAMnE,GAMVoE,GAAApD,GAcAqD,GAAA,WACP,IAAAC,EAAYxE,KACZ,gBAAA5U,EAAAqZ,EAAAC,EAAAC,EAAA7a,EAAAR,GACA,IAAAsb,EAAAC,EAgBA,IAdAJ,IACAA,EAAA,GAGAC,IACAA,EAAA,GAIAG,EADAF,EACA9Z,KAAA+V,IAAA+D,EAAAF,EAAAC,EAAAtZ,EAAA0Z,QAEA1Z,EAAA0Z,OAGAF,EAAAF,EAAoBE,EAAAC,EAAOD,GAAAH,EAC3BD,EAAA,GAAApZ,EAAAwZ,GACAJ,EAAA,GAAApZ,EAAAwZ,EAAA,GACAJ,EAAA,GAAApZ,EAAAwZ,EAAA,GACA9a,EAAA0a,IAAAlb,GACA8B,EAAAwZ,GAAAJ,EAAA,GACApZ,EAAAwZ,EAAA,GAAAJ,EAAA,GACApZ,EAAAwZ,EAAA,GAAAJ,EAAA,GAGA,OAAApZ,GA7BO,GCzuBA,SAAS2Z,KAChB,IAAArZ,EAAA,IAAgBjB,EAAmB,GASnC,OAPMA,GAAmBC,eACzBgB,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,MAGAA,EASO,SAASsZ,GAAK5Z,GACrB,IAAAM,EAAA,IAAgBjB,EAAmB,GAKnC,OAJAiB,EAAA,GAAAN,EAAA,GACAM,EAAA,GAAAN,EAAA,GACAM,EAAA,GAAAN,EAAA,GACAM,EAAA,GAAAN,EAAA,GACAM,EAYO,SAASuZ,GAAUzR,EAAAC,EAAAS,EAAAC,GAC1B,IAAAzI,EAAA,IAAgBjB,EAAmB,GAKnC,OAJAiB,EAAA,GAAA8H,EACA9H,EAAA,GAAA+H,EACA/H,EAAA,GAAAwI,EACAxI,EAAA,GAAAyI,EACAzI,EAUO,SAASwZ,GAAIxZ,EAAAN,GAKpB,OAJAM,EAAA,GAAAN,EAAA,GACAM,EAAA,GAAAN,EAAA,GACAM,EAAA,GAAAN,EAAA,GACAM,EAAA,GAAAN,EAAA,GACAM,EAaO,SAASyZ,GAAGzZ,EAAA8H,EAAAC,EAAAS,EAAAC,GAKnB,OAJAzI,EAAA,GAAA8H,EACA9H,EAAA,GAAA+H,EACA/H,EAAA,GAAAwI,EACAxI,EAAA,GAAAyI,EACAzI,EAWO,SAAS0Z,GAAG1Z,EAAAN,EAAAE,GAKnB,OAJAI,EAAA,GAAAN,EAAA,GAAAE,EAAA,GACAI,EAAA,GAAAN,EAAA,GAAAE,EAAA,GACAI,EAAA,GAAAN,EAAA,GAAAE,EAAA,GACAI,EAAA,GAAAN,EAAA,GAAAE,EAAA,GACAI,EAWO,SAAS2Z,GAAQ3Z,EAAAN,EAAAE,GAKxB,OAJAI,EAAA,GAAAN,EAAA,GAAAE,EAAA,GACAI,EAAA,GAAAN,EAAA,GAAAE,EAAA,GACAI,EAAA,GAAAN,EAAA,GAAAE,EAAA,GACAI,EAAA,GAAAN,EAAA,GAAAE,EAAA,GACAI,EAWO,SAAS4Z,GAAQ5Z,EAAAN,EAAAE,GAKxB,OAJAI,EAAA,GAAAN,EAAA,GAAAE,EAAA,GACAI,EAAA,GAAAN,EAAA,GAAAE,EAAA,GACAI,EAAA,GAAAN,EAAA,GAAAE,EAAA,GACAI,EAAA,GAAAN,EAAA,GAAAE,EAAA,GACAI,EAWO,SAAS6Z,GAAM7Z,EAAAN,EAAAE,GAKtB,OAJAI,EAAA,GAAAN,EAAA,GAAAE,EAAA,GACAI,EAAA,GAAAN,EAAA,GAAAE,EAAA,GACAI,EAAA,GAAAN,EAAA,GAAAE,EAAA,GACAI,EAAA,GAAAN,EAAA,GAAAE,EAAA,GACAI,EAUO,SAAS8Z,GAAI9Z,EAAAN,GAKpB,OAJAM,EAAA,GAAAb,KAAA6V,KAAAtV,EAAA,IACAM,EAAA,GAAAb,KAAA6V,KAAAtV,EAAA,IACAM,EAAA,GAAAb,KAAA6V,KAAAtV,EAAA,IACAM,EAAA,GAAAb,KAAA6V,KAAAtV,EAAA,IACAM,EAUO,SAAS+Z,GAAK/Z,EAAAN,GAKrB,OAJAM,EAAA,GAAAb,KAAA8V,MAAAvV,EAAA,IACAM,EAAA,GAAAb,KAAA8V,MAAAvV,EAAA,IACAM,EAAA,GAAAb,KAAA8V,MAAAvV,EAAA,IACAM,EAAA,GAAAb,KAAA8V,MAAAvV,EAAA,IACAM,EAWO,SAASga,GAAGha,EAAAN,EAAAE,GAKnB,OAJAI,EAAA,GAAAb,KAAA+V,IAAAxV,EAAA,GAAAE,EAAA,IACAI,EAAA,GAAAb,KAAA+V,IAAAxV,EAAA,GAAAE,EAAA,IACAI,EAAA,GAAAb,KAAA+V,IAAAxV,EAAA,GAAAE,EAAA,IACAI,EAAA,GAAAb,KAAA+V,IAAAxV,EAAA,GAAAE,EAAA,IACAI,EAWO,SAASia,GAAGja,EAAAN,EAAAE,GAKnB,OAJAI,EAAA,GAAAb,KAAAW,IAAAJ,EAAA,GAAAE,EAAA,IACAI,EAAA,GAAAb,KAAAW,IAAAJ,EAAA,GAAAE,EAAA,IACAI,EAAA,GAAAb,KAAAW,IAAAJ,EAAA,GAAAE,EAAA,IACAI,EAAA,GAAAb,KAAAW,IAAAJ,EAAA,GAAAE,EAAA,IACAI,EAUO,SAASka,GAAKla,EAAAN,GAKrB,OAJAM,EAAA,GAAAb,KAAAgW,MAAAzV,EAAA,IACAM,EAAA,GAAAb,KAAAgW,MAAAzV,EAAA,IACAM,EAAA,GAAAb,KAAAgW,MAAAzV,EAAA,IACAM,EAAA,GAAAb,KAAAgW,MAAAzV,EAAA,IACAM,EAWO,SAASma,GAAKna,EAAAN,EAAAE,GAKrB,OAJAI,EAAA,GAAAN,EAAA,GAAAE,EACAI,EAAA,GAAAN,EAAA,GAAAE,EACAI,EAAA,GAAAN,EAAA,GAAAE,EACAI,EAAA,GAAAN,EAAA,GAAAE,EACAI,EAYO,SAASoa,GAAWpa,EAAAN,EAAAE,EAAAsD,GAK3B,OAJAlD,EAAA,GAAAN,EAAA,GAAAE,EAAA,GAAAsD,EACAlD,EAAA,GAAAN,EAAA,GAAAE,EAAA,GAAAsD,EACAlD,EAAA,GAAAN,EAAA,GAAAE,EAAA,GAAAsD,EACAlD,EAAA,GAAAN,EAAA,GAAAE,EAAA,GAAAsD,EACAlD,EAUO,SAASqa,GAAQ3a,EAAAE,GACxB,IAAAkI,EAAAlI,EAAA,GAAAF,EAAA,GACAqI,EAAAnI,EAAA,GAAAF,EAAA,GACA8I,EAAA5I,EAAA,GAAAF,EAAA,GACA+I,EAAA7I,EAAA,GAAAF,EAAA,GACA,OAAAP,KAAAmD,KAAAwF,IAAAC,IAAAS,IAAAC,KAUO,SAAS6R,GAAe5a,EAAAE,GAC/B,IAAAkI,EAAAlI,EAAA,GAAAF,EAAA,GACAqI,EAAAnI,EAAA,GAAAF,EAAA,GACA8I,EAAA5I,EAAA,GAAAF,EAAA,GACA+I,EAAA7I,EAAA,GAAAF,EAAA,GACA,OAAAoI,IAAAC,IAAAS,IAAAC,IASO,SAAS8R,GAAM7a,GACtB,IAAAoI,EAAApI,EAAA,GACAqI,EAAArI,EAAA,GACA8I,EAAA9I,EAAA,GACA+I,EAAA/I,EAAA,GACA,OAAAP,KAAAmD,KAAAwF,IAAAC,IAAAS,IAAAC,KASO,SAAS+R,GAAa9a,GAC7B,IAAAoI,EAAApI,EAAA,GACAqI,EAAArI,EAAA,GACA8I,EAAA9I,EAAA,GACA+I,EAAA/I,EAAA,GACA,OAAAoI,IAAAC,IAAAS,IAAAC,IAUO,SAASgS,GAAMza,EAAAN,GAKtB,OAJAM,EAAA,IAAAN,EAAA,GACAM,EAAA,IAAAN,EAAA,GACAM,EAAA,IAAAN,EAAA,GACAM,EAAA,IAAAN,EAAA,GACAM,EAUO,SAAS0a,GAAO1a,EAAAN,GAKvB,OAJAM,EAAA,KAAAN,EAAA,GACAM,EAAA,KAAAN,EAAA,GACAM,EAAA,KAAAN,EAAA,GACAM,EAAA,KAAAN,EAAA,GACAM,EAUO,SAAS2a,GAAS3a,EAAAN,GACzB,IAAAoI,EAAApI,EAAA,GACAqI,EAAArI,EAAA,GACA8I,EAAA9I,EAAA,GACA+I,EAAA/I,EAAA,GACAqN,EAAAjF,IAAAC,IAAAS,IAAAC,IAUA,OARAsE,EAAA,IACAA,EAAA,EAAA5N,KAAAmD,KAAAyK,IAGA/M,EAAA,GAAA8H,EAAAiF,EACA/M,EAAA,GAAA+H,EAAAgF,EACA/M,EAAA,GAAAwI,EAAAuE,EACA/M,EAAA,GAAAyI,EAAAsE,EACA/M,EAUO,SAAS4a,GAAGlb,EAAAE,GACnB,OAAAF,EAAA,GAAAE,EAAA,GAAAF,EAAA,GAAAE,EAAA,GAAAF,EAAA,GAAAE,EAAA,GAAAF,EAAA,GAAAE,EAAA,GAYO,SAASib,GAAK7a,EAAA8a,EAAA/Y,EAAA0G,GACrB,IAAAsS,EAAAhZ,EAAA,GAAA0G,EAAA,GAAA1G,EAAA,GAAA0G,EAAA,GACAuS,EAAAjZ,EAAA,GAAA0G,EAAA,GAAA1G,EAAA,GAAA0G,EAAA,GACAwS,EAAAlZ,EAAA,GAAA0G,EAAA,GAAA1G,EAAA,GAAA0G,EAAA,GACA/F,EAAAX,EAAA,GAAA0G,EAAA,GAAA1G,EAAA,GAAA0G,EAAA,GACAyS,EAAAnZ,EAAA,GAAA0G,EAAA,GAAA1G,EAAA,GAAA0G,EAAA,GACA0S,EAAApZ,EAAA,GAAA0G,EAAA,GAAA1G,EAAA,GAAA0G,EAAA,GACA2S,EAAAN,EAAA,GACAO,EAAAP,EAAA,GACAQ,EAAAR,EAAA,GACAS,EAAAT,EAAA,GAKA,OAJA9a,EAAA,GAAAqb,EAAAF,EAAAG,EAAAJ,EAAAK,EAAA7Y,EACA1C,EAAA,IAAAob,EAAAD,EAAAG,EAAAL,EAAAM,EAAAP,EACAhb,EAAA,GAAAob,EAAAF,EAAAG,EAAAJ,EAAAM,EAAAR,EACA/a,EAAA,IAAAob,EAAA1Y,EAAA2Y,EAAAL,EAAAM,EAAAP,EACA/a,EAaO,SAASwb,GAAIxb,EAAAN,EAAAE,EAAAkN,GACpB,IAAAqB,EAAAzO,EAAA,GACA0O,EAAA1O,EAAA,GACA2O,EAAA3O,EAAA,GACA4O,EAAA5O,EAAA,GAKA,OAJAM,EAAA,GAAAmO,EAAArB,GAAAlN,EAAA,GAAAuO,GACAnO,EAAA,GAAAoO,EAAAtB,GAAAlN,EAAA,GAAAwO,GACApO,EAAA,GAAAqO,EAAAvB,GAAAlN,EAAA,GAAAyO,GACArO,EAAA,GAAAsO,EAAAxB,GAAAlN,EAAA,GAAA0O,GACAtO,EAUO,SAASyb,GAAMzb,EAAAkD,GAKtB,IAAAjB,EAAAyZ,EAAAC,EAAAC,EACAC,EAAAC,EALA5Y,KAAA,EAOA,GAGA2Y,GAFA5Z,EAAwB,EAAf/C,IAAe,GAExB+C,GADAyZ,EAAwB,EAAfxc,IAAe,GACxBwc,QACGG,GAAA,GAEH,GAGAC,GAFAH,EAAwB,EAAfzc,IAAe,GAExByc,GADAC,EAAwB,EAAf1c,IAAe,GACxB0c,QACGE,GAAA,GAEH,IAAAld,EAAAO,KAAAmD,MAAA,EAAAuZ,GAAAC,GAKA,OAJA9b,EAAA,GAAAkD,EAAAjB,EACAjC,EAAA,GAAAkD,EAAAwY,EACA1b,EAAA,GAAAkD,EAAAyY,EAAA/c,EACAoB,EAAA,GAAAkD,EAAA0Y,EAAAhd,EACAoB,EAWO,SAAS+b,GAAa/b,EAAAN,EAAAiX,GAC7B,IAAA7O,EAAApI,EAAA,GACAqI,EAAArI,EAAA,GACA8I,EAAA9I,EAAA,GACA+I,EAAA/I,EAAA,GAKA,OAJAM,EAAA,GAAA2W,EAAA,GAAA7O,EAAA6O,EAAA,GAAA5O,EAAA4O,EAAA,GAAAnO,EAAAmO,EAAA,IAAAlO,EACAzI,EAAA,GAAA2W,EAAA,GAAA7O,EAAA6O,EAAA,GAAA5O,EAAA4O,EAAA,GAAAnO,EAAAmO,EAAA,IAAAlO,EACAzI,EAAA,GAAA2W,EAAA,GAAA7O,EAAA6O,EAAA,GAAA5O,EAAA4O,EAAA,IAAAnO,EAAAmO,EAAA,IAAAlO,EACAzI,EAAA,GAAA2W,EAAA,GAAA7O,EAAA6O,EAAA,GAAA5O,EAAA4O,EAAA,IAAAnO,EAAAmO,EAAA,IAAAlO,EACAzI,EAWO,SAASgc,GAAahc,EAAAN,EAAA6I,GAC7B,IAAAT,EAAApI,EAAA,GACAqI,EAAArI,EAAA,GACA8I,EAAA9I,EAAA,GACAoX,EAAAvO,EAAA,GACAwO,EAAAxO,EAAA,GACAyO,EAAAzO,EAAA,GACA0O,EAAA1O,EAAA,GAEA0T,EAAAhF,EAAAnP,EAAAiP,EAAAvO,EAAAwO,EAAAjP,EACAmU,EAAAjF,EAAAlP,EAAAiP,EAAAlP,EAAAgP,EAAAtO,EACA2T,EAAAlF,EAAAzO,EAAAsO,EAAA/O,EAAAgP,EAAAjP,EACAsU,GAAAtF,EAAAhP,EAAAiP,EAAAhP,EAAAiP,EAAAxO,EAMA,OAJAxI,EAAA,GAAAic,EAAAhF,EAAAmF,GAAAtF,EAAAoF,GAAAlF,EAAAmF,GAAApF,EACA/W,EAAA,GAAAkc,EAAAjF,EAAAmF,GAAArF,EAAAoF,GAAArF,EAAAmF,GAAAjF,EACAhX,EAAA,GAAAmc,EAAAlF,EAAAmF,GAAApF,EAAAiF,GAAAlF,EAAAmF,GAAApF,EACA9W,EAAA,GAAAN,EAAA,GACAM,EASO,SAASqc,GAAIrc,GAKpB,OAJAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EASO,SAASsc,GAAG5c,GACnB,cAAAA,EAAA,QAAAA,EAAA,QAAAA,EAAA,QAAAA,EAAA,OAUO,SAAS6c,GAAW7c,EAAAE,GAC3B,OAAAF,EAAA,KAAAE,EAAA,IAAAF,EAAA,KAAAE,EAAA,IAAAF,EAAA,KAAAE,EAAA,IAAAF,EAAA,KAAAE,EAAA,GAUO,SAAS4c,GAAM9c,EAAAE,GACtB,IAAAiB,EAAAnB,EAAA,GACAiB,EAAAjB,EAAA,GACAoB,EAAApB,EAAA,GACAqB,EAAArB,EAAA,GACA0B,EAAAxB,EAAA,GACAyB,EAAAzB,EAAA,GACA0B,EAAA1B,EAAA,GACA2B,EAAA3B,EAAA,GACA,OAAAT,KAAAU,IAAAgB,EAAAO,IAA8BtC,EAAgBK,KAAAW,IAAA,EAAAX,KAAAU,IAAAgB,GAAA1B,KAAAU,IAAAuB,KAAAjC,KAAAU,IAAAc,EAAAU,IAAqEvC,EAAgBK,KAAAW,IAAA,EAAAX,KAAAU,IAAAc,GAAAxB,KAAAU,IAAAwB,KAAAlC,KAAAU,IAAAiB,EAAAQ,IAAqExC,EAAgBK,KAAAW,IAAA,EAAAX,KAAAU,IAAAiB,GAAA3B,KAAAU,IAAAyB,KAAAnC,KAAAU,IAAAkB,EAAAQ,IAAqEzC,EAAgBK,KAAAW,IAAA,EAAAX,KAAAU,IAAAkB,GAAA5B,KAAAU,IAAA0B,IAOtS,IAAIkb,GAAM9C,GAMN+C,GAAM9C,GAMN+C,GAAM9C,GAMN+C,GAAOvC,GAMPwC,GAAUvC,GAMVwC,GAAMvC,GAMNwC,GAASvC,GAcTwC,GAAO,WAClB,IAAAlE,EAAYO,KACZ,gBAAA3Z,EAAAqZ,EAAAC,EAAAC,EAAA7a,EAAAR,GACA,IAAAsb,EAAAC,EAgBA,IAdAJ,IACAA,EAAA,GAGAC,IACAA,EAAA,GAIAG,EADAF,EACA9Z,KAAA+V,IAAA+D,EAAAF,EAAAC,EAAAtZ,EAAA0Z,QAEA1Z,EAAA0Z,OAGAF,EAAAF,EAAoBE,EAAAC,EAAOD,GAAAH,EAC3BD,EAAA,GAAApZ,EAAAwZ,GACAJ,EAAA,GAAApZ,EAAAwZ,EAAA,GACAJ,EAAA,GAAApZ,EAAAwZ,EAAA,GACAJ,EAAA,GAAApZ,EAAAwZ,EAAA,GACA9a,EAAA0a,IAAAlb,GACA8B,EAAAwZ,GAAAJ,EAAA,GACApZ,EAAAwZ,EAAA,GAAAJ,EAAA,GACApZ,EAAAwZ,EAAA,GAAAJ,EAAA,GACApZ,EAAAwZ,EAAA,GAAAJ,EAAA,GAGA,OAAApZ,GA/BkB,GCvmBX,SAASud,KAChB,IAAAjd,EAAA,IAAgBjB,EAAmB,GASnC,OAPMA,GAAmBC,eACzBgB,EAAA,KACAA,EAAA,KACAA,EAAA,MAGAA,EAAA,KACAA,EASO,SAASkd,GAAQld,GAKxB,OAJAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAYO,SAAAmd,GAAAnd,EAAA6M,EAAApL,GACPA,GAAA,GACA,IAAAC,EAAAvC,KAAAwC,IAAAF,GAKA,OAJAzB,EAAA,GAAA0B,EAAAmL,EAAA,GACA7M,EAAA,GAAA0B,EAAAmL,EAAA,GACA7M,EAAA,GAAA0B,EAAAmL,EAAA,GACA7M,EAAA,GAAAb,KAAA0C,IAAAJ,GACAzB,EAgBO,SAAAod,GAAAC,EAAA9U,GACP,IAAA9G,EAAA,EAAAtC,KAAA8Y,KAAA1P,EAAA,IACA7G,EAAAvC,KAAAwC,IAAAF,EAAA,GAaA,OAXAC,EAAU5C,GACVue,EAAA,GAAA9U,EAAA,GAAA7G,EACA2b,EAAA,GAAA9U,EAAA,GAAA7G,EACA2b,EAAA,GAAA9U,EAAA,GAAA7G,IAGA2b,EAAA,KACAA,EAAA,KACAA,EAAA,MAGA5b,EAWO,SAAS6b,GAAQtd,EAAAN,EAAAE,GACxB,IAAAuO,EAAAzO,EAAA,GACA0O,EAAA1O,EAAA,GACA2O,EAAA3O,EAAA,GACA4O,EAAA5O,EAAA,GACAqO,EAAAnO,EAAA,GACAoO,EAAApO,EAAA,GACAqO,EAAArO,EAAA,GACAsO,EAAAtO,EAAA,GAKA,OAJAI,EAAA,GAAAmO,EAAAD,EAAAI,EAAAP,EAAAK,EAAAH,EAAAI,EAAAL,EACAhO,EAAA,GAAAoO,EAAAF,EAAAI,EAAAN,EAAAK,EAAAN,EAAAI,EAAAF,EACAjO,EAAA,GAAAqO,EAAAH,EAAAI,EAAAL,EAAAE,EAAAH,EAAAI,EAAAL,EACA/N,EAAA,GAAAsO,EAAAJ,EAAAC,EAAAJ,EAAAK,EAAAJ,EAAAK,EAAAJ,EACAjO,EAWO,SAASud,GAAOvd,EAAAN,EAAA+B,GACvBA,GAAA,GACA,IAAA0M,EAAAzO,EAAA,GACA0O,EAAA1O,EAAA,GACA2O,EAAA3O,EAAA,GACA4O,EAAA5O,EAAA,GACAqO,EAAA5O,KAAAwC,IAAAF,GACAyM,EAAA/O,KAAA0C,IAAAJ,GAKA,OAJAzB,EAAA,GAAAmO,EAAAD,EAAAI,EAAAP,EACA/N,EAAA,GAAAoO,EAAAF,EAAAG,EAAAN,EACA/N,EAAA,GAAAqO,EAAAH,EAAAE,EAAAL,EACA/N,EAAA,GAAAsO,EAAAJ,EAAAC,EAAAJ,EACA/N,EAWO,SAASwd,GAAOxd,EAAAN,EAAA+B,GACvBA,GAAA,GACA,IAAA0M,EAAAzO,EAAA,GACA0O,EAAA1O,EAAA,GACA2O,EAAA3O,EAAA,GACA4O,EAAA5O,EAAA,GACAsO,EAAA7O,KAAAwC,IAAAF,GACAyM,EAAA/O,KAAA0C,IAAAJ,GAKA,OAJAzB,EAAA,GAAAmO,EAAAD,EAAAG,EAAAL,EACAhO,EAAA,GAAAoO,EAAAF,EAAAI,EAAAN,EACAhO,EAAA,GAAAqO,EAAAH,EAAAC,EAAAH,EACAhO,EAAA,GAAAsO,EAAAJ,EAAAE,EAAAJ,EACAhO,EAWO,SAASyd,GAAOzd,EAAAN,EAAA+B,GACvBA,GAAA,GACA,IAAA0M,EAAAzO,EAAA,GACA0O,EAAA1O,EAAA,GACA2O,EAAA3O,EAAA,GACA4O,EAAA5O,EAAA,GACAuO,EAAA9O,KAAAwC,IAAAF,GACAyM,EAAA/O,KAAA0C,IAAAJ,GAKA,OAJAzB,EAAA,GAAAmO,EAAAD,EAAAE,EAAAH,EACAjO,EAAA,GAAAoO,EAAAF,EAAAC,EAAAF,EACAjO,EAAA,GAAAqO,EAAAH,EAAAI,EAAAL,EACAjO,EAAA,GAAAsO,EAAAJ,EAAAG,EAAAJ,EACAjO,EAYO,SAAA0d,GAAA1d,EAAAN,GACP,IAAAoI,EAAApI,EAAA,GACAqI,EAAArI,EAAA,GACA8I,EAAA9I,EAAA,GAKA,OAJAM,EAAA,GAAA8H,EACA9H,EAAA,GAAA+H,EACA/H,EAAA,GAAAwI,EACAxI,EAAA,GAAAb,KAAAmD,KAAAnD,KAAAU,IAAA,EAAAiI,IAAAC,IAAAS,MACAxI,EAYO,SAAA2d,GAAA3d,EAAAN,EAAAE,EAAAkN,GAGP,IAQA8Q,EAAAC,EAAAC,EAAAC,EAAAC,EARA7P,EAAAzO,EAAA,GACA0O,EAAA1O,EAAA,GACA2O,EAAA3O,EAAA,GACA4O,EAAA5O,EAAA,GACAqO,EAAAnO,EAAA,GACAoO,EAAApO,EAAA,GACAqO,EAAArO,EAAA,GACAsO,EAAAtO,EAAA,GAgCA,OA7BAie,EAAA1P,EAAAJ,EAAAK,EAAAJ,EAAAK,EAAAJ,EAAAK,EAAAJ,GAEA,IACA2P,KACA9P,KACAC,KACAC,KACAC,MAIA,EAAA2P,EAAoB/e,GAEpB8e,EAAAze,KAAA8Y,KAAA4F,GACAC,EAAA3e,KAAAwC,IAAAic,GACAG,EAAA5e,KAAAwC,KAAA,EAAAmL,GAAA8Q,GAAAE,EACAE,EAAA7e,KAAAwC,IAAAmL,EAAA8Q,GAAAE,IAIAC,EAAA,EAAAjR,EACAkR,EAAAlR,GAIA9M,EAAA,GAAA+d,EAAA5P,EAAA6P,EAAAjQ,EACA/N,EAAA,GAAA+d,EAAA3P,EAAA4P,EAAAhQ,EACAhO,EAAA,GAAA+d,EAAA1P,EAAA2P,EAAA/P,EACAjO,EAAA,GAAA+d,EAAAzP,EAAA0P,EAAA9P,EACAlO,EASO,SAASie,GAAMje,GAGtB,IAAAke,EAAWhf,IACXif,EAAWjf,IACXkf,EAAWlf,IACXmf,EAAAlf,KAAAmD,KAAA,EAAA4b,GACAI,EAAAnf,KAAAmD,KAAA4b,GAKA,OAJAle,EAAA,GAAAqe,EAAAlf,KAAAwC,IAAA,EAAAxC,KAAAK,GAAA2e,GACAne,EAAA,GAAAqe,EAAAlf,KAAA0C,IAAA,EAAA1C,KAAAK,GAAA2e,GACAne,EAAA,GAAAse,EAAAnf,KAAAwC,IAAA,EAAAxC,KAAAK,GAAA4e,GACApe,EAAA,GAAAse,EAAAnf,KAAA0C,IAAA,EAAA1C,KAAAK,GAAA4e,GACApe,EAUO,SAASue,GAAMve,EAAAN,GACtB,IAAAmB,EAAAnB,EAAA,GACAiB,EAAAjB,EAAA,GACAoB,EAAApB,EAAA,GACAqB,EAAArB,EAAA,GACA8e,EAAA3d,IAAAF,IAAAG,IAAAC,IACA0d,EAAAD,EAAA,EAAAA,EAAA,EAMA,OAJAxe,EAAA,IAAAa,EAAA4d,EACAze,EAAA,IAAAW,EAAA8d,EACAze,EAAA,IAAAc,EAAA2d,EACAze,EAAA,GAAAe,EAAA0d,EACAze,EAWO,SAAA0e,GAAA1e,EAAAN,GAKP,OAJAM,EAAA,IAAAN,EAAA,GACAM,EAAA,IAAAN,EAAA,GACAM,EAAA,IAAAN,EAAA,GACAM,EAAA,GAAAN,EAAA,GACAM,EAcO,SAAA2e,GAAA3e,EAAA2W,GAGP,IACAiI,EADAC,EAAAlI,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAGA,GAAAkI,EAAA,EAEAD,EAAAzf,KAAAmD,KAAAuc,EAAA,GAEA7e,EAAA,MAAA4e,EACAA,EAAA,GAAAA,EAEA5e,EAAA,IAAA2W,EAAA,GAAAA,EAAA,IAAAiI,EACA5e,EAAA,IAAA2W,EAAA,GAAAA,EAAA,IAAAiI,EACA5e,EAAA,IAAA2W,EAAA,GAAAA,EAAA,IAAAiI,MACG,CAEH,IAAA1F,EAAA,EACAvC,EAAA,GAAAA,EAAA,KAAAuC,EAAA,GACAvC,EAAA,GAAAA,EAAA,EAAAuC,SAAA,GACA,IAAA4F,GAAA5F,EAAA,KACA6F,GAAA7F,EAAA,KACA0F,EAAAzf,KAAAmD,KAAAqU,EAAA,EAAAuC,KAAAvC,EAAA,EAAAmI,KAAAnI,EAAA,EAAAoI,KAAA,GACA/e,EAAAkZ,GAAA,GAAA0F,EACAA,EAAA,GAAAA,EACA5e,EAAA,IAAA2W,EAAA,EAAAmI,EAAAC,GAAApI,EAAA,EAAAoI,EAAAD,IAAAF,EACA5e,EAAA8e,IAAAnI,EAAA,EAAAmI,EAAA5F,GAAAvC,EAAA,EAAAuC,EAAA4F,IAAAF,EACA5e,EAAA+e,IAAApI,EAAA,EAAAoI,EAAA7F,GAAAvC,EAAA,EAAAuC,EAAA6F,IAAAH,EAGA,OAAA5e,EAaO,SAAAgf,GAAAhf,EAAA8H,EAAAC,EAAAS,GACP,IAAAyW,EAAA,GAAA9f,KAAAK,GAAA,IACAsI,GAAAmX,EACAlX,GAAAkX,EACAzW,GAAAyW,EACA,IAAAlQ,EAAA5P,KAAAwC,IAAAmG,GACAoX,EAAA/f,KAAA0C,IAAAiG,GACAkH,EAAA7P,KAAAwC,IAAAoG,GACAoX,EAAAhgB,KAAA0C,IAAAkG,GACAkH,EAAA9P,KAAAwC,IAAA6G,GACA4W,EAAAjgB,KAAA0C,IAAA2G,GAKA,OAJAxI,EAAA,GAAA+O,EAAAoQ,EAAAC,EAAAF,EAAAlQ,EAAAC,EACAjP,EAAA,GAAAkf,EAAAlQ,EAAAoQ,EAAArQ,EAAAoQ,EAAAlQ,EACAjP,EAAA,GAAAkf,EAAAC,EAAAlQ,EAAAF,EAAAC,EAAAoQ,EACApf,EAAA,GAAAkf,EAAAC,EAAAC,EAAArQ,EAAAC,EAAAC,EACAjP,EASO,SAASqf,GAAG3f,GACnB,cAAAA,EAAA,QAAAA,EAAA,QAAAA,EAAA,QAAAA,EAAA,OAUO,IAAI4f,GAAQhG,GAYRiG,GAAahG,GAUbiG,GAAOhG,GAaPiG,GAAMhG,GAWNiG,GAAMhG,GAMNiG,GAAMrC,GAWNsC,GAAQzF,GAUR0F,GAAMjF,GAYNkF,GAAOtE,GAQPuE,GAASxF,GAMTyF,GAAMD,GASNE,GAAgBzF,GAMhB0F,GAASD,GAUTE,GAAYxF,GASZyF,GAAc7D,GASd8D,GAAS7D,GAab8D,GAAA,WACP,IAAAC,EAAgBjM,KAChBkM,EAAkB/L,GAAe,OACjCgM,EAAkBhM,GAAe,OACjC,gBAAAzU,EAAAN,EAAAE,GACA,IAAA4e,EAAc5I,GAAQlW,EAAAE,GAEtB,OAAA4e,GAAA,SACM3I,GAAU0K,EAAAC,EAAA9gB,GACNiZ,GAAQ4H,GAAA,MAAsB1K,GAAU0K,EAAAE,EAAA/gB,GAC5CiW,GAAc4K,KACpBpD,GAAAnd,EAAAugB,EAAAphB,KAAAK,IACAQ,GACKwe,EAAA,SACLxe,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,IAEM6V,GAAU0K,EAAA7gB,EAAAE,GAChBI,EAAA,GAAAugB,EAAA,GACAvgB,EAAA,GAAAugB,EAAA,GACAvgB,EAAA,GAAAugB,EAAA,GACAvgB,EAAA,KAAAwe,EACa2B,GAASngB,OAzBf,GAyCA0gB,GAAA,WACP,IAAAC,EAAc1D,KACd2D,EAAc3D,KACd,gBAAAjd,EAAAN,EAAAE,EAAAgC,EAAAhD,EAAAkO,GAIA,OAHA6Q,GAAAgD,EAAAjhB,EAAAd,EAAAkO,GACA6Q,GAAAiD,EAAAhhB,EAAAgC,EAAAkL,GACA6Q,GAAA3d,EAAA2gB,EAAAC,EAAA,EAAA9T,GAAA,EAAAA,IACA9M,GAPO,GAqBA6gB,GAAA,WACP,IAAAC,EAAapb,KACb,gBAAA1F,EAAA+gB,EAAA5Q,EAAAgC,GAUA,OATA2O,EAAA,GAAA3Q,EAAA,GACA2Q,EAAA,GAAA3Q,EAAA,GACA2Q,EAAA,GAAA3Q,EAAA,GACA2Q,EAAA,GAAA3O,EAAA,GACA2O,EAAA,GAAA3O,EAAA,GACA2O,EAAA,GAAA3O,EAAA,GACA2O,EAAA,IAAAC,EAAA,GACAD,EAAA,IAAAC,EAAA,GACAD,EAAA,IAAAC,EAAA,GACWZ,GAASngB,EAAA2e,GAAA3e,EAAA8gB,KAZb,GChmBA,SAASE,KAChB,IAAAC,EAAA,IAAeliB,EAAmB,GAalC,OAXMA,GAAmBC,eACzBiiB,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,MAGAA,EAAA,KACAA,EAUO,SAASC,GAAKxhB,GACrB,IAAAuhB,EAAA,IAAeliB,EAAmB,GASlC,OARAkiB,EAAA,GAAAvhB,EAAA,GACAuhB,EAAA,GAAAvhB,EAAA,GACAuhB,EAAA,GAAAvhB,EAAA,GACAuhB,EAAA,GAAAvhB,EAAA,GACAuhB,EAAA,GAAAvhB,EAAA,GACAuhB,EAAA,GAAAvhB,EAAA,GACAuhB,EAAA,GAAAvhB,EAAA,GACAuhB,EAAA,GAAAvhB,EAAA,GACAuhB,EAiBO,SAASE,GAAU9O,EAAAE,EAAAE,EAAA2O,EAAA1Y,EAAAC,EAAAC,EAAA4O,GAC1B,IAAAyJ,EAAA,IAAeliB,EAAmB,GASlC,OARAkiB,EAAA,GAAA5O,EACA4O,EAAA,GAAA1O,EACA0O,EAAA,GAAAxO,EACAwO,EAAA,GAAAG,EACAH,EAAA,GAAAvY,EACAuY,EAAA,GAAAtY,EACAsY,EAAA,GAAArY,EACAqY,EAAA,GAAAzJ,EACAyJ,EAgBO,SAAAI,GAAAhP,EAAAE,EAAAE,EAAA2O,EAAA1Y,EAAAC,EAAAC,GACP,IAAAqY,EAAA,IAAeliB,EAAmB,GAClCkiB,EAAA,GAAA5O,EACA4O,EAAA,GAAA1O,EACA0O,EAAA,GAAAxO,EACAwO,EAAA,GAAAG,EACA,IAAAjT,EAAA,GAAAzF,EACA0F,EAAA,GAAAzF,EACA0F,EAAA,GAAAzF,EAKA,OAJAqY,EAAA,GAAA9S,EAAAiT,EAAAhT,EAAAqE,EAAApE,EAAAkE,EACA0O,EAAA,GAAA7S,EAAAgT,EAAA/S,EAAAgE,EAAAlE,EAAAsE,EACAwO,EAAA,GAAA5S,EAAA+S,EAAAjT,EAAAoE,EAAAnE,EAAAiE,EACA4O,EAAA,IAAA9S,EAAAkE,EAAAjE,EAAAmE,EAAAlE,EAAAoE,EACAwO,EAYO,SAASK,GAAuBthB,EAAAuI,EAAAuE,GACvC,IAAAqB,EAAA,GAAArB,EAAA,GACAsB,EAAA,GAAAtB,EAAA,GACAuB,EAAA,GAAAvB,EAAA,GACAiB,EAAAxF,EAAA,GACAyF,EAAAzF,EAAA,GACA0F,EAAA1F,EAAA,GACA2F,EAAA3F,EAAA,GASA,OARAvI,EAAA,GAAA+N,EACA/N,EAAA,GAAAgO,EACAhO,EAAA,GAAAiO,EACAjO,EAAA,GAAAkO,EACAlO,EAAA,GAAAmO,EAAAD,EAAAE,EAAAH,EAAAI,EAAAL,EACAhO,EAAA,GAAAoO,EAAAF,EAAAG,EAAAN,EAAAI,EAAAF,EACAjO,EAAA,GAAAqO,EAAAH,EAAAC,EAAAH,EAAAI,EAAAL,EACA/N,EAAA,IAAAmO,EAAAJ,EAAAK,EAAAJ,EAAAK,EAAAJ,EACAjO,EAWO,SAASuhB,GAAevhB,EAAA8M,GAS/B,OARA9M,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,MAAA8M,EAAA,GACA9M,EAAA,MAAA8M,EAAA,GACA9M,EAAA,MAAA8M,EAAA,GACA9M,EAAA,KACAA,EAWO,SAASwhB,GAAYxhB,EAAAuI,GAS5B,OARAvI,EAAA,GAAAuI,EAAA,GACAvI,EAAA,GAAAuI,EAAA,GACAvI,EAAA,GAAAuI,EAAA,GACAvI,EAAA,GAAAuI,EAAA,GACAvI,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAWO,SAASyhB,GAAQzhB,EAAAN,GAExB,IAAAgiB,EAAczE,KACZtO,GAAgB+S,EAAAhiB,GAClB,IAAAoN,EAAA,IAAc/N,EAAmB,GAGjC,OAFEyP,GAAmB1B,EAAApN,GACnB4hB,GAAuBthB,EAAA0hB,EAAA5U,GACzB9M,EAWO,SAAS2hB,GAAI3hB,EAAAN,GASpB,OARAM,EAAA,GAAAN,EAAA,GACAM,EAAA,GAAAN,EAAA,GACAM,EAAA,GAAAN,EAAA,GACAM,EAAA,GAAAN,EAAA,GACAM,EAAA,GAAAN,EAAA,GACAM,EAAA,GAAAN,EAAA,GACAM,EAAA,GAAAN,EAAA,GACAM,EAAA,GAAAN,EAAA,GACAM,EASO,SAAS4hB,GAAQ5hB,GASxB,OARAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAkBO,SAAS6hB,GAAG7hB,EAAAqS,EAAAE,EAAAE,EAAA2O,EAAA1Y,EAAAC,EAAAC,EAAA4O,GASnB,OARAxX,EAAA,GAAAqS,EACArS,EAAA,GAAAuS,EACAvS,EAAA,GAAAyS,EACAzS,EAAA,GAAAohB,EACAphB,EAAA,GAAA0I,EACA1I,EAAA,GAAA2I,EACA3I,EAAA,GAAA4I,EACA5I,EAAA,GAAAwX,EACAxX,EASO,IAAA8hB,GAActC,GAQd,SAAAuC,GAAA/hB,EAAAN,GAKP,OAJAM,EAAA,GAAAN,EAAA,GACAM,EAAA,GAAAN,EAAA,GACAM,EAAA,GAAAN,EAAA,GACAM,EAAA,GAAAN,EAAA,GACAM,EAWO,IAAAgiB,GAAcxC,GAUd,SAAAyC,GAAAjiB,EAAAuI,GAKP,OAJAvI,EAAA,GAAAuI,EAAA,GACAvI,EAAA,GAAAuI,EAAA,GACAvI,EAAA,GAAAuI,EAAA,GACAvI,EAAA,GAAAuI,EAAA,GACAvI,EASO,SAASkiB,GAAcliB,EAAAN,GAC9B,IAAAyO,EAAAzO,EAAA,GACA0O,EAAA1O,EAAA,GACA2O,EAAA3O,EAAA,GACA4O,EAAA5O,EAAA,GACAqO,GAAArO,EAAA,GACAsO,GAAAtO,EAAA,GACAuO,GAAAvO,EAAA,GACAwO,EAAAxO,EAAA,GAIA,OAHAM,EAAA,MAAAmO,EAAAD,EAAAI,EAAAP,EAAAK,EAAAH,EAAAI,EAAAL,GACAhO,EAAA,MAAAoO,EAAAF,EAAAI,EAAAN,EAAAK,EAAAN,EAAAI,EAAAF,GACAjO,EAAA,MAAAqO,EAAAH,EAAAI,EAAAL,EAAAE,EAAAH,EAAAI,EAAAL,GACA/N,EAWO,SAASmiB,GAASniB,EAAAN,EAAAqC,GACzB,IAAAqgB,EAAA1iB,EAAA,GACA2iB,EAAA3iB,EAAA,GACA4iB,EAAA5iB,EAAA,GACA6iB,EAAA7iB,EAAA,GACA8iB,EAAA,GAAAzgB,EAAA,GACA0gB,EAAA,GAAA1gB,EAAA,GACA2gB,EAAA,GAAA3gB,EAAA,GACA4gB,EAAAjjB,EAAA,GACAkjB,EAAAljB,EAAA,GACAmjB,EAAAnjB,EAAA,GACAojB,EAAApjB,EAAA,GASA,OARAM,EAAA,GAAAoiB,EACApiB,EAAA,GAAAqiB,EACAriB,EAAA,GAAAsiB,EACAtiB,EAAA,GAAAuiB,EACAviB,EAAA,GAAAuiB,EAAAC,EAAAH,EAAAK,EAAAJ,EAAAG,EAAAE,EACA3iB,EAAA,GAAAuiB,EAAAE,EAAAH,EAAAE,EAAAJ,EAAAM,EAAAE,EACA5iB,EAAA,GAAAuiB,EAAAG,EAAAN,EAAAK,EAAAJ,EAAAG,EAAAK,EACA7iB,EAAA,IAAAoiB,EAAAI,EAAAH,EAAAI,EAAAH,EAAAI,EAAAI,EACA9iB,EAWO,SAAS+iB,GAAO/iB,EAAAN,EAAA+B,GACvB,IAAAsM,GAAArO,EAAA,GACAsO,GAAAtO,EAAA,GACAuO,GAAAvO,EAAA,GACAwO,EAAAxO,EAAA,GACAyO,EAAAzO,EAAA,GACA0O,EAAA1O,EAAA,GACA2O,EAAA3O,EAAA,GACA4O,EAAA5O,EAAA,GACA0iB,EAAAjU,EAAAD,EAAAI,EAAAP,EAAAK,EAAAH,EAAAI,EAAAL,EACAqU,EAAAjU,EAAAF,EAAAI,EAAAN,EAAAK,EAAAN,EAAAI,EAAAF,EACAqU,EAAAjU,EAAAH,EAAAI,EAAAL,EAAAE,EAAAH,EAAAI,EAAAL,EACAwU,EAAAjU,EAAAJ,EAAAC,EAAAJ,EAAAK,EAAAJ,EAAAK,EAAAJ,EAUA,OATEsP,GAAYvd,EAAAN,EAAA+B,GACdsM,EAAA/N,EAAA,GACAgO,EAAAhO,EAAA,GACAiO,EAAAjO,EAAA,GACAkO,EAAAlO,EAAA,GACAA,EAAA,GAAAoiB,EAAAlU,EAAAqU,EAAAxU,EAAAsU,EAAApU,EAAAqU,EAAAtU,EACAhO,EAAA,GAAAqiB,EAAAnU,EAAAqU,EAAAvU,EAAAsU,EAAAvU,EAAAqU,EAAAnU,EACAjO,EAAA,GAAAsiB,EAAApU,EAAAqU,EAAAtU,EAAAmU,EAAApU,EAAAqU,EAAAtU,EACA/N,EAAA,GAAAuiB,EAAArU,EAAAkU,EAAArU,EAAAsU,EAAArU,EAAAsU,EAAArU,EACAjO,EAWO,SAASgjB,GAAOhjB,EAAAN,EAAA+B,GACvB,IAAAsM,GAAArO,EAAA,GACAsO,GAAAtO,EAAA,GACAuO,GAAAvO,EAAA,GACAwO,EAAAxO,EAAA,GACAyO,EAAAzO,EAAA,GACA0O,EAAA1O,EAAA,GACA2O,EAAA3O,EAAA,GACA4O,EAAA5O,EAAA,GACA0iB,EAAAjU,EAAAD,EAAAI,EAAAP,EAAAK,EAAAH,EAAAI,EAAAL,EACAqU,EAAAjU,EAAAF,EAAAI,EAAAN,EAAAK,EAAAN,EAAAI,EAAAF,EACAqU,EAAAjU,EAAAH,EAAAI,EAAAL,EAAAE,EAAAH,EAAAI,EAAAL,EACAwU,EAAAjU,EAAAJ,EAAAC,EAAAJ,EAAAK,EAAAJ,EAAAK,EAAAJ,EAUA,OATEuP,GAAYxd,EAAAN,EAAA+B,GACdsM,EAAA/N,EAAA,GACAgO,EAAAhO,EAAA,GACAiO,EAAAjO,EAAA,GACAkO,EAAAlO,EAAA,GACAA,EAAA,GAAAoiB,EAAAlU,EAAAqU,EAAAxU,EAAAsU,EAAApU,EAAAqU,EAAAtU,EACAhO,EAAA,GAAAqiB,EAAAnU,EAAAqU,EAAAvU,EAAAsU,EAAAvU,EAAAqU,EAAAnU,EACAjO,EAAA,GAAAsiB,EAAApU,EAAAqU,EAAAtU,EAAAmU,EAAApU,EAAAqU,EAAAtU,EACA/N,EAAA,GAAAuiB,EAAArU,EAAAkU,EAAArU,EAAAsU,EAAArU,EAAAsU,EAAArU,EACAjO,EAWO,SAASijB,GAAOjjB,EAAAN,EAAA+B,GACvB,IAAAsM,GAAArO,EAAA,GACAsO,GAAAtO,EAAA,GACAuO,GAAAvO,EAAA,GACAwO,EAAAxO,EAAA,GACAyO,EAAAzO,EAAA,GACA0O,EAAA1O,EAAA,GACA2O,EAAA3O,EAAA,GACA4O,EAAA5O,EAAA,GACA0iB,EAAAjU,EAAAD,EAAAI,EAAAP,EAAAK,EAAAH,EAAAI,EAAAL,EACAqU,EAAAjU,EAAAF,EAAAI,EAAAN,EAAAK,EAAAN,EAAAI,EAAAF,EACAqU,EAAAjU,EAAAH,EAAAI,EAAAL,EAAAE,EAAAH,EAAAI,EAAAL,EACAwU,EAAAjU,EAAAJ,EAAAC,EAAAJ,EAAAK,EAAAJ,EAAAK,EAAAJ,EAUA,OATEwP,GAAYzd,EAAAN,EAAA+B,GACdsM,EAAA/N,EAAA,GACAgO,EAAAhO,EAAA,GACAiO,EAAAjO,EAAA,GACAkO,EAAAlO,EAAA,GACAA,EAAA,GAAAoiB,EAAAlU,EAAAqU,EAAAxU,EAAAsU,EAAApU,EAAAqU,EAAAtU,EACAhO,EAAA,GAAAqiB,EAAAnU,EAAAqU,EAAAvU,EAAAsU,EAAAvU,EAAAqU,EAAAnU,EACAjO,EAAA,GAAAsiB,EAAApU,EAAAqU,EAAAtU,EAAAmU,EAAApU,EAAAqU,EAAAtU,EACA/N,EAAA,GAAAuiB,EAAArU,EAAAkU,EAAArU,EAAAsU,EAAArU,EAAAsU,EAAArU,EACAjO,EAWO,SAAAkjB,GAAAljB,EAAAN,EAAA6I,GACP,IAAAuO,EAAAvO,EAAA,GACAwO,EAAAxO,EAAA,GACAyO,EAAAzO,EAAA,GACA0O,EAAA1O,EAAA,GACA4F,EAAAzO,EAAA,GACA0O,EAAA1O,EAAA,GACA2O,EAAA3O,EAAA,GACA4O,EAAA5O,EAAA,GAaA,OAZAM,EAAA,GAAAmO,EAAA8I,EAAA3I,EAAAwI,EAAA1I,EAAA4I,EAAA3I,EAAA0I,EACA/W,EAAA,GAAAoO,EAAA6I,EAAA3I,EAAAyI,EAAA1I,EAAAyI,EAAA3I,EAAA6I,EACAhX,EAAA,GAAAqO,EAAA4I,EAAA3I,EAAA0I,EAAA7I,EAAA4I,EAAA3I,EAAA0I,EACA9W,EAAA,GAAAsO,EAAA2I,EAAA9I,EAAA2I,EAAA1I,EAAA2I,EAAA1I,EAAA2I,EACA7I,EAAAzO,EAAA,GACA0O,EAAA1O,EAAA,GACA2O,EAAA3O,EAAA,GACA4O,EAAA5O,EAAA,GACAM,EAAA,GAAAmO,EAAA8I,EAAA3I,EAAAwI,EAAA1I,EAAA4I,EAAA3I,EAAA0I,EACA/W,EAAA,GAAAoO,EAAA6I,EAAA3I,EAAAyI,EAAA1I,EAAAyI,EAAA3I,EAAA6I,EACAhX,EAAA,GAAAqO,EAAA4I,EAAA3I,EAAA0I,EAAA7I,EAAA4I,EAAA3I,EAAA0I,EACA9W,EAAA,GAAAsO,EAAA2I,EAAA9I,EAAA2I,EAAA1I,EAAA2I,EAAA1I,EAAA2I,EACAhX,EAWO,SAAAmjB,GAAAnjB,EAAAuI,EAAA7I,GACP,IAAAoX,EAAAvO,EAAA,GACAwO,EAAAxO,EAAA,GACAyO,EAAAzO,EAAA,GACA0O,EAAA1O,EAAA,GACAwF,EAAArO,EAAA,GACAsO,EAAAtO,EAAA,GACAuO,EAAAvO,EAAA,GACAwO,EAAAxO,EAAA,GAaA,OAZAM,EAAA,GAAA8W,EAAA5I,EAAA+I,EAAAlJ,EAAAgJ,EAAA9I,EAAA+I,EAAAhJ,EACAhO,EAAA,GAAA+W,EAAA7I,EAAA+I,EAAAjJ,EAAAgJ,EAAAjJ,EAAA+I,EAAA7I,EACAjO,EAAA,GAAAgX,EAAA9I,EAAA+I,EAAAhJ,EAAA6I,EAAA9I,EAAA+I,EAAAhJ,EACA/N,EAAA,GAAAiX,EAAA/I,EAAA4I,EAAA/I,EAAAgJ,EAAA/I,EAAAgJ,EAAA/I,EACAF,EAAArO,EAAA,GACAsO,EAAAtO,EAAA,GACAuO,EAAAvO,EAAA,GACAwO,EAAAxO,EAAA,GACAM,EAAA,GAAA8W,EAAA5I,EAAA+I,EAAAlJ,EAAAgJ,EAAA9I,EAAA+I,EAAAhJ,EACAhO,EAAA,GAAA+W,EAAA7I,EAAA+I,EAAAjJ,EAAAgJ,EAAAjJ,EAAA+I,EAAA7I,EACAjO,EAAA,GAAAgX,EAAA9I,EAAA+I,EAAAhJ,EAAA6I,EAAA9I,EAAA+I,EAAAhJ,EACA/N,EAAA,GAAAiX,EAAA/I,EAAA4I,EAAA/I,EAAAgJ,EAAA/I,EAAAgJ,EAAA/I,EACAjO,EAYO,SAAAojB,GAAApjB,EAAAN,EAAAmN,EAAApL,GAEP,GAAAtC,KAAAU,IAAA4B,GAAsB3C,EACtB,OAAW6iB,GAAI3hB,EAAAN,GAGf,IAAA2jB,EAAAlkB,KAAAmD,KAAAuK,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,IACApL,GAAA,GACA,IAAAC,EAAAvC,KAAAwC,IAAAF,GACAsM,EAAArM,EAAAmL,EAAA,GAAAwW,EACArV,EAAAtM,EAAAmL,EAAA,GAAAwW,EACApV,EAAAvM,EAAAmL,EAAA,GAAAwW,EACAnV,EAAA/O,KAAA0C,IAAAJ,GACA2gB,EAAA1iB,EAAA,GACA2iB,EAAA3iB,EAAA,GACA4iB,EAAA5iB,EAAA,GACA6iB,EAAA7iB,EAAA,GACAM,EAAA,GAAAoiB,EAAAlU,EAAAqU,EAAAxU,EAAAsU,EAAApU,EAAAqU,EAAAtU,EACAhO,EAAA,GAAAqiB,EAAAnU,EAAAqU,EAAAvU,EAAAsU,EAAAvU,EAAAqU,EAAAnU,EACAjO,EAAA,GAAAsiB,EAAApU,EAAAqU,EAAAtU,EAAAmU,EAAApU,EAAAqU,EAAAtU,EACA/N,EAAA,GAAAuiB,EAAArU,EAAAkU,EAAArU,EAAAsU,EAAArU,EAAAsU,EAAArU,EACA,IAAAE,EAAAzO,EAAA,GACA0O,EAAA1O,EAAA,GACA2O,EAAA3O,EAAA,GACA4O,EAAA5O,EAAA,GAKA,OAJAM,EAAA,GAAAmO,EAAAD,EAAAI,EAAAP,EAAAK,EAAAH,EAAAI,EAAAL,EACAhO,EAAA,GAAAoO,EAAAF,EAAAI,EAAAN,EAAAK,EAAAN,EAAAI,EAAAF,EACAjO,EAAA,GAAAqO,EAAAH,EAAAI,EAAAL,EAAAE,EAAAH,EAAAI,EAAAL,EACA/N,EAAA,GAAAsO,EAAAJ,EAAAC,EAAAJ,EAAAK,EAAAJ,EAAAK,EAAAJ,EACAjO,EAYO,SAASsjB,GAAGtjB,EAAAN,EAAAE,GASnB,OARAI,EAAA,GAAAN,EAAA,GAAAE,EAAA,GACAI,EAAA,GAAAN,EAAA,GAAAE,EAAA,GACAI,EAAA,GAAAN,EAAA,GAAAE,EAAA,GACAI,EAAA,GAAAN,EAAA,GAAAE,EAAA,GACAI,EAAA,GAAAN,EAAA,GAAAE,EAAA,GACAI,EAAA,GAAAN,EAAA,GAAAE,EAAA,GACAI,EAAA,GAAAN,EAAA,GAAAE,EAAA,GACAI,EAAA,GAAAN,EAAA,GAAAE,EAAA,GACAI,EAWO,SAASujB,GAAQvjB,EAAAN,EAAAE,GACxB,IAAA4jB,EAAA9jB,EAAA,GACA+jB,EAAA/jB,EAAA,GACAgkB,EAAAhkB,EAAA,GACAikB,EAAAjkB,EAAA,GACA8iB,EAAA5iB,EAAA,GACA6iB,EAAA7iB,EAAA,GACA8iB,EAAA9iB,EAAA,GACAgkB,EAAAhkB,EAAA,GACAwiB,EAAA1iB,EAAA,GACA2iB,EAAA3iB,EAAA,GACA4iB,EAAA5iB,EAAA,GACA6iB,EAAA7iB,EAAA,GACAmkB,EAAAjkB,EAAA,GACAkkB,EAAAlkB,EAAA,GACAmkB,EAAAnkB,EAAA,GACAokB,EAAApkB,EAAA,GASA,OARAI,EAAA,GAAAwjB,EAAAQ,EAAAL,EAAAE,EAAAJ,EAAAM,EAAAL,EAAAI,EACA9jB,EAAA,GAAAyjB,EAAAO,EAAAL,EAAAG,EAAAJ,EAAAG,EAAAL,EAAAO,EACA/jB,EAAA,GAAA0jB,EAAAM,EAAAL,EAAAI,EAAAP,EAAAM,EAAAL,EAAAI,EACA7jB,EAAA,GAAA2jB,EAAAK,EAAAR,EAAAK,EAAAJ,EAAAK,EAAAJ,EAAAK,EACA/jB,EAAA,GAAAwjB,EAAAI,EAAAD,EAAAnB,EAAAiB,EAAAf,EAAAgB,EAAAjB,EAAAL,EAAA4B,EAAAzB,EAAAsB,EAAAxB,EAAA0B,EAAAzB,EAAAwB,EACA9jB,EAAA,GAAAyjB,EAAAG,EAAAD,EAAAlB,EAAAiB,EAAAlB,EAAAgB,EAAAd,EAAAL,EAAA2B,EAAAzB,EAAAuB,EAAAxB,EAAAuB,EAAAzB,EAAA2B,EACA/jB,EAAA,GAAA0jB,EAAAE,EAAAD,EAAAjB,EAAAc,EAAAf,EAAAgB,EAAAjB,EAAAF,EAAA0B,EAAAzB,EAAAwB,EAAA3B,EAAA0B,EAAAzB,EAAAwB,EACA7jB,EAAA,GAAA2jB,EAAAC,EAAAJ,EAAAhB,EAAAiB,EAAAhB,EAAAiB,EAAAhB,EAAAH,EAAAyB,EAAA5B,EAAAyB,EAAAxB,EAAAyB,EAAAxB,EAAAyB,EACA/jB,EAOO,IAAIikB,GAAMV,GAWV,SAASW,GAAKlkB,EAAAN,EAAAE,GASrB,OARAI,EAAA,GAAAN,EAAA,GAAAE,EACAI,EAAA,GAAAN,EAAA,GAAAE,EACAI,EAAA,GAAAN,EAAA,GAAAE,EACAI,EAAA,GAAAN,EAAA,GAAAE,EACAI,EAAA,GAAAN,EAAA,GAAAE,EACAI,EAAA,GAAAN,EAAA,GAAAE,EACAI,EAAA,GAAAN,EAAA,GAAAE,EACAI,EAAA,GAAAN,EAAA,GAAAE,EACAI,EAWO,IAAImkB,GAAMtE,GAYV,SAASuE,GAAIpkB,EAAAN,EAAAE,EAAAkN,GACpB,IAAAuX,EAAA,EAAAvX,EAUA,OATMqX,GAAGzkB,EAAAE,GAAA,IAAAkN,MACT9M,EAAA,GAAAN,EAAA,GAAA2kB,EAAAzkB,EAAA,GAAAkN,EACA9M,EAAA,GAAAN,EAAA,GAAA2kB,EAAAzkB,EAAA,GAAAkN,EACA9M,EAAA,GAAAN,EAAA,GAAA2kB,EAAAzkB,EAAA,GAAAkN,EACA9M,EAAA,GAAAN,EAAA,GAAA2kB,EAAAzkB,EAAA,GAAAkN,EACA9M,EAAA,GAAAN,EAAA,GAAA2kB,EAAAzkB,EAAA,GAAAkN,EACA9M,EAAA,GAAAN,EAAA,GAAA2kB,EAAAzkB,EAAA,GAAAkN,EACA9M,EAAA,GAAAN,EAAA,GAAA2kB,EAAAzkB,EAAA,GAAAkN,EACA9M,EAAA,GAAAN,EAAA,GAAA2kB,EAAAzkB,EAAA,GAAAkN,EACA9M,EAUO,SAASskB,GAAMtkB,EAAAN,GACtB,IAAA6kB,EAAcC,GAAa9kB,GAS3B,OARAM,EAAA,IAAAN,EAAA,GAAA6kB,EACAvkB,EAAA,IAAAN,EAAA,GAAA6kB,EACAvkB,EAAA,IAAAN,EAAA,GAAA6kB,EACAvkB,EAAA,GAAAN,EAAA,GAAA6kB,EACAvkB,EAAA,IAAAN,EAAA,GAAA6kB,EACAvkB,EAAA,IAAAN,EAAA,GAAA6kB,EACAvkB,EAAA,IAAAN,EAAA,GAAA6kB,EACAvkB,EAAA,GAAAN,EAAA,GAAA6kB,EACAvkB,EAWO,SAASykB,GAASzkB,EAAAN,GASzB,OARAM,EAAA,IAAAN,EAAA,GACAM,EAAA,IAAAN,EAAA,GACAM,EAAA,IAAAN,EAAA,GACAM,EAAA,GAAAN,EAAA,GACAM,EAAA,IAAAN,EAAA,GACAM,EAAA,IAAAN,EAAA,GACAM,EAAA,IAAAN,EAAA,GACAM,EAAA,GAAAN,EAAA,GACAM,EAUO,IAAI0kB,GAAS3E,GAMT4E,GAAMD,GASNF,GAAgBvE,GAMhB2E,GAASJ,GAUb,SAASK,GAAS7kB,EAAAN,GACzB,IAAA6O,EAAkBiW,GAAa9kB,GAE/B,GAAA6O,EAAA,GACAA,EAAApP,KAAAmD,KAAAiM,GACA,IAAA1N,EAAAnB,EAAA,GAAA6O,EACA5N,EAAAjB,EAAA,GAAA6O,EACAzN,EAAApB,EAAA,GAAA6O,EACAxN,EAAArB,EAAA,GAAA6O,EACAnN,EAAA1B,EAAA,GACA2B,EAAA3B,EAAA,GACA4B,EAAA5B,EAAA,GACA6B,EAAA7B,EAAA,GACAolB,EAAAjkB,EAAAO,EAAAT,EAAAU,EAAAP,EAAAQ,EAAAP,EAAAQ,EACAvB,EAAA,GAAAa,EACAb,EAAA,GAAAW,EACAX,EAAA,GAAAc,EACAd,EAAA,GAAAe,EACAf,EAAA,IAAAoB,EAAAP,EAAAikB,GAAAvW,EACAvO,EAAA,IAAAqB,EAAAV,EAAAmkB,GAAAvW,EACAvO,EAAA,IAAAsB,EAAAR,EAAAgkB,GAAAvW,EACAvO,EAAA,IAAAuB,EAAAR,EAAA+jB,GAAAvW,EAGA,OAAAvO,EASO,SAAS+kB,GAAGrlB,GACnB,eAAAA,EAAA,QAAAA,EAAA,QAAAA,EAAA,QAAAA,EAAA,QAAAA,EAAA,QAAAA,EAAA,QAAAA,EAAA,QAAAA,EAAA,OAUO,SAASslB,GAAWtlB,EAAAE,GAC3B,OAAAF,EAAA,KAAAE,EAAA,IAAAF,EAAA,KAAAE,EAAA,IAAAF,EAAA,KAAAE,EAAA,IAAAF,EAAA,KAAAE,EAAA,IAAAF,EAAA,KAAAE,EAAA,IAAAF,EAAA,KAAAE,EAAA,IAAAF,EAAA,KAAAE,EAAA,IAAAF,EAAA,KAAAE,EAAA,GAUO,SAASqlB,GAAMvlB,EAAAE,GACtB,IAAAiB,EAAAnB,EAAA,GACAiB,EAAAjB,EAAA,GACAoB,EAAApB,EAAA,GACAqB,EAAArB,EAAA,GACA4E,EAAA5E,EAAA,GACA6E,EAAA7E,EAAA,GACAsL,EAAAtL,EAAA,GACAuL,EAAAvL,EAAA,GACA0B,EAAAxB,EAAA,GACAyB,EAAAzB,EAAA,GACA0B,EAAA1B,EAAA,GACA2B,EAAA3B,EAAA,GACA4E,EAAA5E,EAAA,GACA6E,EAAA7E,EAAA,GACAuL,EAAAvL,EAAA,GACAwL,EAAAxL,EAAA,GACA,OAAAT,KAAAU,IAAAgB,EAAAO,IAA8BtC,EAAgBK,KAAAW,IAAA,EAAAX,KAAAU,IAAAgB,GAAA1B,KAAAU,IAAAuB,KAAAjC,KAAAU,IAAAc,EAAAU,IAAqEvC,EAAgBK,KAAAW,IAAA,EAAAX,KAAAU,IAAAc,GAAAxB,KAAAU,IAAAwB,KAAAlC,KAAAU,IAAAiB,EAAAQ,IAAqExC,EAAgBK,KAAAW,IAAA,EAAAX,KAAAU,IAAAiB,GAAA3B,KAAAU,IAAAyB,KAAAnC,KAAAU,IAAAkB,EAAAQ,IAAqEzC,EAAgBK,KAAAW,IAAA,EAAAX,KAAAU,IAAAkB,GAAA5B,KAAAU,IAAA0B,KAAApC,KAAAU,IAAAyE,EAAAE,IAAqE1F,EAAgBK,KAAAW,IAAA,EAAAX,KAAAU,IAAAyE,GAAAnF,KAAAU,IAAA2E,KAAArF,KAAAU,IAAA0E,EAAAE,IAAqE3F,EAAgBK,KAAAW,IAAA,EAAAX,KAAAU,IAAA0E,GAAApF,KAAAU,IAAA4E,KAAAtF,KAAAU,IAAAmL,EAAAG,IAAqErM,EAAgBK,KAAAW,IAAA,EAAAX,KAAAU,IAAAmL,GAAA7L,KAAAU,IAAAsL,KAAAhM,KAAAU,IAAAoL,EAAAG,IAAqEtM,EAAgBK,KAAAW,IAAA,EAAAX,KAAAU,IAAAoL,GAAA9L,KAAAU,IAAAuL,ICrzB1nB,SAAS8Z,KAChB,IAAAllB,EAAA,IAAgBjB,EAAmB,GAOnC,OALMA,GAAmBC,eACzBgB,EAAA,KACAA,EAAA,MAGAA,EASO,SAASmlB,GAAKzlB,GACrB,IAAAM,EAAA,IAAgBjB,EAAmB,GAGnC,OAFAiB,EAAA,GAAAN,EAAA,GACAM,EAAA,GAAAN,EAAA,GACAM,EAUO,SAASolB,GAAUtd,EAAAC,GAC1B,IAAA/H,EAAA,IAAgBjB,EAAmB,GAGnC,OAFAiB,EAAA,GAAA8H,EACA9H,EAAA,GAAA+H,EACA/H,EAUO,SAASqlB,GAAIrlB,EAAAN,GAGpB,OAFAM,EAAA,GAAAN,EAAA,GACAM,EAAA,GAAAN,EAAA,GACAM,EAWO,SAASslB,GAAGtlB,EAAA8H,EAAAC,GAGnB,OAFA/H,EAAA,GAAA8H,EACA9H,EAAA,GAAA+H,EACA/H,EAWO,SAASulB,GAAGvlB,EAAAN,EAAAE,GAGnB,OAFAI,EAAA,GAAAN,EAAA,GAAAE,EAAA,GACAI,EAAA,GAAAN,EAAA,GAAAE,EAAA,GACAI,EAWO,SAASwlB,GAAQxlB,EAAAN,EAAAE,GAGxB,OAFAI,EAAA,GAAAN,EAAA,GAAAE,EAAA,GACAI,EAAA,GAAAN,EAAA,GAAAE,EAAA,GACAI,EAWO,SAASylB,GAAQzlB,EAAAN,EAAAE,GAGxB,OAFAI,EAAA,GAAAN,EAAA,GAAAE,EAAA,GACAI,EAAA,GAAAN,EAAA,GAAAE,EAAA,GACAI,EAWO,SAAS0lB,GAAM1lB,EAAAN,EAAAE,GAGtB,OAFAI,EAAA,GAAAN,EAAA,GAAAE,EAAA,GACAI,EAAA,GAAAN,EAAA,GAAAE,EAAA,GACAI,EAUO,SAAS2lB,GAAI3lB,EAAAN,GAGpB,OAFAM,EAAA,GAAAb,KAAA6V,KAAAtV,EAAA,IACAM,EAAA,GAAAb,KAAA6V,KAAAtV,EAAA,IACAM,EAUO,SAAS4lB,GAAK5lB,EAAAN,GAGrB,OAFAM,EAAA,GAAAb,KAAA8V,MAAAvV,EAAA,IACAM,EAAA,GAAAb,KAAA8V,MAAAvV,EAAA,IACAM,EAWO,SAAS6lB,GAAG7lB,EAAAN,EAAAE,GAGnB,OAFAI,EAAA,GAAAb,KAAA+V,IAAAxV,EAAA,GAAAE,EAAA,IACAI,EAAA,GAAAb,KAAA+V,IAAAxV,EAAA,GAAAE,EAAA,IACAI,EAWO,SAAS8lB,GAAG9lB,EAAAN,EAAAE,GAGnB,OAFAI,EAAA,GAAAb,KAAAW,IAAAJ,EAAA,GAAAE,EAAA,IACAI,EAAA,GAAAb,KAAAW,IAAAJ,EAAA,GAAAE,EAAA,IACAI,EAUO,SAAS+lB,GAAK/lB,EAAAN,GAGrB,OAFAM,EAAA,GAAAb,KAAAgW,MAAAzV,EAAA,IACAM,EAAA,GAAAb,KAAAgW,MAAAzV,EAAA,IACAM,EAWO,SAASgmB,GAAKhmB,EAAAN,EAAAE,GAGrB,OAFAI,EAAA,GAAAN,EAAA,GAAAE,EACAI,EAAA,GAAAN,EAAA,GAAAE,EACAI,EAYO,SAASimB,GAAWjmB,EAAAN,EAAAE,EAAAsD,GAG3B,OAFAlD,EAAA,GAAAN,EAAA,GAAAE,EAAA,GAAAsD,EACAlD,EAAA,GAAAN,EAAA,GAAAE,EAAA,GAAAsD,EACAlD,EAUO,SAASkmB,GAAQxmB,EAAAE,GACxB,IAAAkI,EAAAlI,EAAA,GAAAF,EAAA,GACAqI,EAAAnI,EAAA,GAAAF,EAAA,GACA,OAAAP,KAAAmD,KAAAwF,IAAAC,KAUO,SAASoe,GAAezmB,EAAAE,GAC/B,IAAAkI,EAAAlI,EAAA,GAAAF,EAAA,GACAqI,EAAAnI,EAAA,GAAAF,EAAA,GACA,OAAAoI,IAAAC,IASO,SAASqe,GAAM1mB,GACtB,IAAAoI,EAAApI,EAAA,GACAqI,EAAArI,EAAA,GACA,OAAAP,KAAAmD,KAAAwF,IAAAC,KASO,SAASse,GAAa3mB,GAC7B,IAAAoI,EAAApI,EAAA,GACAqI,EAAArI,EAAA,GACA,OAAAoI,IAAAC,IAUO,SAASue,GAAMtmB,EAAAN,GAGtB,OAFAM,EAAA,IAAAN,EAAA,GACAM,EAAA,IAAAN,EAAA,GACAM,EAUO,SAASumB,GAAOvmB,EAAAN,GAGvB,OAFAM,EAAA,KAAAN,EAAA,GACAM,EAAA,KAAAN,EAAA,GACAM,EAUO,SAASwmB,GAASxmB,EAAAN,GACzB,IAAAoI,EAAApI,EAAA,GACAqI,EAAArI,EAAA,GACAqN,EAAAjF,IAAAC,IASA,OAPAgF,EAAA,IAEAA,EAAA,EAAA5N,KAAAmD,KAAAyK,IAGA/M,EAAA,GAAAN,EAAA,GAAAqN,EACA/M,EAAA,GAAAN,EAAA,GAAAqN,EACA/M,EAUO,SAASymB,GAAG/mB,EAAAE,GACnB,OAAAF,EAAA,GAAAE,EAAA,GAAAF,EAAA,GAAAE,EAAA,GAYO,SAAS8mB,GAAK1mB,EAAAN,EAAAE,GACrB,IAAA4I,EAAA9I,EAAA,GAAAE,EAAA,GAAAF,EAAA,GAAAE,EAAA,GAGA,OAFAI,EAAA,GAAAA,EAAA,KACAA,EAAA,GAAAwI,EACAxI,EAYO,SAAS2mB,GAAI3mB,EAAAN,EAAAE,EAAAkN,GACpB,IAAAqB,EAAAzO,EAAA,GACA0O,EAAA1O,EAAA,GAGA,OAFAM,EAAA,GAAAmO,EAAArB,GAAAlN,EAAA,GAAAuO,GACAnO,EAAA,GAAAoO,EAAAtB,GAAAlN,EAAA,GAAAwO,GACApO,EAUO,SAAS4mB,GAAM5mB,EAAAkD,GACtBA,KAAA,EACA,IAAAsT,EAAyB,EAAftX,IAAeC,KAAAK,GAGzB,OAFAQ,EAAA,GAAAb,KAAA0C,IAAA2U,GAAAtT,EACAlD,EAAA,GAAAb,KAAAwC,IAAA6U,GAAAtT,EACAlD,EAWO,SAAA6mB,GAAA7mB,EAAAN,EAAAiX,GACP,IAAA7O,EAAApI,EAAA,GACAqI,EAAArI,EAAA,GAGA,OAFAM,EAAA,GAAA2W,EAAA,GAAA7O,EAAA6O,EAAA,GAAA5O,EACA/H,EAAA,GAAA2W,EAAA,GAAA7O,EAAA6O,EAAA,GAAA5O,EACA/H,EAWO,SAAA8mB,GAAA9mB,EAAAN,EAAAiX,GACP,IAAA7O,EAAApI,EAAA,GACAqI,EAAArI,EAAA,GAGA,OAFAM,EAAA,GAAA2W,EAAA,GAAA7O,EAAA6O,EAAA,GAAA5O,EAAA4O,EAAA,GACA3W,EAAA,GAAA2W,EAAA,GAAA7O,EAAA6O,EAAA,GAAA5O,EAAA4O,EAAA,GACA3W,EAYO,SAAS+mB,GAAa/mB,EAAAN,EAAAiX,GAC7B,IAAA7O,EAAApI,EAAA,GACAqI,EAAArI,EAAA,GAGA,OAFAM,EAAA,GAAA2W,EAAA,GAAA7O,EAAA6O,EAAA,GAAA5O,EAAA4O,EAAA,GACA3W,EAAA,GAAA2W,EAAA,GAAA7O,EAAA6O,EAAA,GAAA5O,EAAA4O,EAAA,GACA3W,EAaO,SAASgnB,GAAahnB,EAAAN,EAAAiX,GAC7B,IAAA7O,EAAApI,EAAA,GACAqI,EAAArI,EAAA,GAGA,OAFAM,EAAA,GAAA2W,EAAA,GAAA7O,EAAA6O,EAAA,GAAA5O,EAAA4O,EAAA,IACA3W,EAAA,GAAA2W,EAAA,GAAA7O,EAAA6O,EAAA,GAAA5O,EAAA4O,EAAA,IACA3W,EAWO,SAASinB,GAAMjnB,EAAAN,EAAAE,EAAAgC,GAEtB,IAAAslB,EAAAxnB,EAAA,GAAAE,EAAA,GACAunB,EAAAznB,EAAA,GAAAE,EAAA,GACAwnB,EAAAjoB,KAAAwC,IAAAC,GACAylB,EAAAloB,KAAA0C,IAAAD,GAIA,OAFA5B,EAAA,GAAAknB,EAAAG,EAAAF,EAAAC,EAAAxnB,EAAA,GACAI,EAAA,GAAAknB,EAAAE,EAAAD,EAAAE,EAAAznB,EAAA,GACAI,EASO,SAASsnB,GAAK5nB,EAAAE,GACrB,IAAAyS,EAAA3S,EAAA,GACA6S,EAAA7S,EAAA,GACAgJ,EAAA9I,EAAA,GACA+I,EAAA/I,EAAA,GACA2nB,EAAAlV,IAAAE,IAEAgV,EAAA,IAEAA,EAAA,EAAApoB,KAAAmD,KAAAilB,IAGA,IAAAC,EAAA9e,IAAAC,IAEA6e,EAAA,IAEAA,EAAA,EAAAroB,KAAAmD,KAAAklB,IAGA,IAAAxP,GAAA3F,EAAA3J,EAAA6J,EAAA5J,GAAA4e,EAAAC,EAEA,OAAAxP,EAAA,EACA,EACGA,GAAA,EACH7Y,KAAAK,GAEAL,KAAA8Y,KAAAD,GAUO,SAASyP,GAAIznB,GAGpB,OAFAA,EAAA,KACAA,EAAA,KACAA,EASO,SAAS0nB,GAAGhoB,GACnB,cAAAA,EAAA,QAAAA,EAAA,OAUO,SAASioB,GAAWjoB,EAAAE,GAC3B,OAAAF,EAAA,KAAAE,EAAA,IAAAF,EAAA,KAAAE,EAAA,GAUO,SAASgoB,GAAMloB,EAAAE,GACtB,IAAAiB,EAAAnB,EAAA,GACAiB,EAAAjB,EAAA,GACA0B,EAAAxB,EAAA,GACAyB,EAAAzB,EAAA,GACA,OAAAT,KAAAU,IAAAgB,EAAAO,IAA8BtC,EAAgBK,KAAAW,IAAA,EAAAX,KAAAU,IAAAgB,GAAA1B,KAAAU,IAAAuB,KAAAjC,KAAAU,IAAAc,EAAAU,IAAqEvC,EAAgBK,KAAAW,IAAA,EAAAX,KAAAU,IAAAc,GAAAxB,KAAAU,IAAAwB,IAO5H,IAAIwmB,GAAMzB,GAMN0B,GAAMtC,GAMNuC,GAAMtC,GAMNuC,GAAMtC,GAMNuC,GAAO/B,GAMPgC,GAAU/B,GAMVgC,GAAS9B,GAcT+B,GAAO,WAClB,IAAAtP,EAAYoM,KACZ,gBAAAxlB,EAAAqZ,EAAAC,EAAAC,EAAA7a,EAAAR,GACA,IAAAsb,EAAAC,EAgBA,IAdAJ,IACAA,EAAA,GAGAC,IACAA,EAAA,GAIAG,EADAF,EACA9Z,KAAA+V,IAAA+D,EAAAF,EAAAC,EAAAtZ,EAAA0Z,QAEA1Z,EAAA0Z,OAGAF,EAAAF,EAAoBE,EAAAC,EAAOD,GAAAH,EAC3BD,EAAA,GAAApZ,EAAAwZ,GACAJ,EAAA,GAAApZ,EAAAwZ,EAAA,GACA9a,EAAA0a,IAAAlb,GACA8B,EAAAwZ,GAAAJ,EAAA,GACApZ,EAAAwZ,EAAA,GAAAJ,EAAA,GAGA,OAAApZ,GA3BkB,GCnmBlBtC,EAAAwB,EAAAC,EAAA,6BAAAwpB,IAAAjrB,EAAAwB,EAAAC,EAAA,yBAAAypB,IAAAlrB,EAAAwB,EAAAC,EAAA,0BAAA0pB,IAAAnrB,EAAAwB,EAAAC,EAAA,yBAAA2pB,IAAAprB,EAAAwB,EAAAC,EAAA,yBAAA4pB,IAAArrB,EAAAwB,EAAAC,EAAA,yBAAA6pB,IAAAtrB,EAAAwB,EAAAC,EAAA,0BAAA8pB,IAAAvrB,EAAAwB,EAAAC,EAAA,yBAAA+pB,IAAAxrB,EAAAwB,EAAAC,EAAA,yBAAAgqB,IAAAzrB,EAAAwB,EAAAC,EAAA,yBAAAiqB,wBCQA,IAAAC,EAAA,WACA,OAAAzqB,MAAA,kBAAAD,WADA,IAEC2qB,SAAA,cAAAA,GAIDC,EAAAF,EAAAG,oBAAAC,OAAAC,oBAAAL,GAAAM,QAAA,yBAEAC,EAAAL,GAAAF,EAAAG,mBAKA,GAHAH,EAAAG,wBAAAvqB,EACAzB,EAAAC,QAAiBC,EAAQ,IAEzB6rB,EAEAF,EAAAG,mBAAAI,OAGA,WACAP,EAAAG,mBACG,MAAAK,GACHR,EAAAG,wBAAAvqB,sBCvBA,SAAA6qB,GACA,aAEA,IAEA7qB,EAFA8qB,EAAAN,OAAAO,UACAC,EAAAF,EAAAG,eAGAC,EAAA,oBAAAC,cAAA,GACAC,EAAAF,EAAAG,UAAA,aACAC,EAAAJ,EAAAK,eAAA,kBACAC,EAAAN,EAAAO,aAAA,gBACAC,EAAA,kBAAAntB,EACAotB,EAAAd,EAAAN,mBAEA,GAAAoB,EACAD,IAGAntB,EAAAC,QAAAmtB,OAJA,EAcAA,EAAAd,EAAAN,mBAAAmB,EAAAntB,EAAAC,QAAA,IAaAotB,OAyBA,IAAAC,EAAA,iBACAC,EAAA,iBACAC,EAAA,YACAC,EAAA,YAGAC,EAAA,GAaAC,EAAA,GAEAA,EAAAd,GAAA,WACA,OAAAzrB,MAGA,IAAAwsB,EAAA3B,OAAA4B,eACAC,EAAAF,OAAAG,EAAA,MAEAD,OAAAvB,GAAAE,EAAAuB,KAAAF,EAAAjB,KAGAc,EAAAG,GAGA,IAAAG,EAAAC,EAAA1B,UAAA2B,EAAA3B,UAAAP,OAAAppB,OAAA8qB,GACAS,EAAA5B,UAAAyB,EAAAI,YAAAH,EACAA,EAAAG,YAAAD,EACAF,EAAAjB,GAAAmB,EAAAE,YAAA,oBAWAlB,EAAAmB,oBAAA,SAAAC,GACA,IAAAC,EAAA,oBAAAD,KAAAH,YACA,QAAAI,QAAAL,GAEA,uBAAAK,EAAAH,aAAAG,EAAAC,QAGAtB,EAAAuB,KAAA,SAAAH,GAYA,OAXAvC,OAAA2C,eACA3C,OAAA2C,eAAAJ,EAAAN,IAEAM,EAAAK,UAAAX,EAEAjB,KAAAuB,IACAA,EAAAvB,GAAA,sBAIAuB,EAAAhC,UAAAP,OAAAppB,OAAAorB,GACAO,GAOApB,EAAA0B,MAAA,SAAApuB,GACA,OACAquB,QAAAruB,IAmEAsuB,EAAAC,EAAAzC,WAEAyC,EAAAzC,UAAAO,GAAA,WACA,OAAA3rB,MAGAgsB,EAAA6B,gBAIA7B,EAAA8B,MAAA,SAAAC,EAAAC,EAAAjuB,EAAAkuB,GACA,IAAAC,EAAA,IAAAL,EAAA5B,EAAA8B,EAAAC,EAAAjuB,EAAAkuB,IACA,OAAAjC,EAAAmB,oBAAAa,GAAAE,EACAA,EAAAC,OAAAvuB,KAAA,SAAAwuB,GACA,OAAAA,EAAA1uB,KAAA0uB,EAAA5uB,MAAA0uB,EAAAC,UA+JAP,EAAAf,GACAA,EAAAhB,GAAA,YAMAgB,EAAApB,GAAA,WACA,OAAAzrB,MAGA6sB,EAAAwB,SAAA,WACA,4BAsCArC,EAAAsC,KAAA,SAAAC,GACA,IAAAD,EAAA,GAEA,QAAAjvB,KAAAkvB,EACAD,EAAAE,KAAAnvB,GAMA,OAHAivB,EAAAG,UAGA,SAAAN,IACA,KAAAG,EAAAxT,QAAA,CACA,IAAAzb,EAAAivB,EAAAI,MAEA,GAAArvB,KAAAkvB,EAGA,OAFAJ,EAAA3uB,MAAAH,EACA8uB,EAAAzuB,MAAA,EACAyuB,EAQA,OADAA,EAAAzuB,MAAA,EACAyuB,IA0CAnC,EAAAW,SASAgC,EAAAvD,UAAA,CACA6B,YAAA0B,EACAC,MAAA,SAAAC,GAYA,GAXA7uB,KAAA8uB,KAAA,EACA9uB,KAAAmuB,KAAA,EAGAnuB,KAAA+uB,KAAA/uB,KAAAgvB,MAAA3uB,EACAL,KAAAN,MAAA,EACAM,KAAAivB,SAAA,KACAjvB,KAAAkvB,OAAA,OACAlvB,KAAAV,IAAAe,EACAL,KAAAmvB,WAAA5U,QAAA6U,IAEAP,EACA,QAAAvB,KAAAttB,KAEA,MAAAstB,EAAA+B,OAAA,IAAAhE,EAAAuB,KAAA5sB,KAAAstB,KAAAgC,OAAAhC,EAAAiC,MAAA,MACAvvB,KAAAstB,GAAAjtB,IAKAmvB,KAAA,WACAxvB,KAAAN,MAAA,EACA,IACA+vB,EADAzvB,KAAAmvB,WAAA,GACAO,WAEA,aAAAD,EAAAzuB,KACA,MAAAyuB,EAAAnwB,IAGA,OAAAU,KAAA2vB,MAEAC,kBAAA,SAAAC,GACA,GAAA7vB,KAAAN,KACA,MAAAmwB,EAGA,IAAAC,EAAA9vB,KAEA,SAAA+vB,EAAAC,EAAAC,GAYA,OAXAC,EAAAlvB,KAAA,QACAkvB,EAAA5wB,IAAAuwB,EACAC,EAAA3B,KAAA6B,EAEAC,IAGAH,EAAAZ,OAAA,OACAY,EAAAxwB,IAAAe,KAGA4vB,EAGA,QAAArV,EAAA5a,KAAAmvB,WAAArU,OAAA,EAA8CF,GAAA,IAAQA,EAAA,CACtD,IAAAuV,EAAAnwB,KAAAmvB,WAAAvU,GACAsV,EAAAC,EAAAT,WAEA,YAAAS,EAAAC,OAIA,OAAAL,EAAA,OAGA,GAAAI,EAAAC,QAAApwB,KAAA8uB,KAAA,CACA,IAAAuB,EAAAhF,EAAAuB,KAAAuD,EAAA,YACAG,EAAAjF,EAAAuB,KAAAuD,EAAA,cAEA,GAAAE,GAAAC,EAAA,CACA,GAAAtwB,KAAA8uB,KAAAqB,EAAAI,SACA,OAAAR,EAAAI,EAAAI,UAAA,GACa,GAAAvwB,KAAA8uB,KAAAqB,EAAAK,WACb,OAAAT,EAAAI,EAAAK,iBAEW,GAAAH,GACX,GAAArwB,KAAA8uB,KAAAqB,EAAAI,SACA,OAAAR,EAAAI,EAAAI,UAAA,OAEW,KAAAD,EAKX,UAAAG,MAAA,0CAJA,GAAAzwB,KAAA8uB,KAAAqB,EAAAK,WACA,OAAAT,EAAAI,EAAAK,gBAQAE,OAAA,SAAA1vB,EAAA1B,GACA,QAAAsb,EAAA5a,KAAAmvB,WAAArU,OAAA,EAA8CF,GAAA,IAAQA,EAAA,CACtD,IAAAuV,EAAAnwB,KAAAmvB,WAAAvU,GAEA,GAAAuV,EAAAC,QAAApwB,KAAA8uB,MAAAzD,EAAAuB,KAAAuD,EAAA,eAAAnwB,KAAA8uB,KAAAqB,EAAAK,WAAA,CACA,IAAAG,EAAAR,EACA,OAIAQ,IAAA,UAAA3vB,GAAA,aAAAA,IAAA2vB,EAAAP,QAAA9wB,MAAAqxB,EAAAH,aAGAG,EAAA,MAGA,IAAAT,EAAAS,IAAAjB,WAAA,GAIA,OAHAQ,EAAAlvB,OACAkvB,EAAA5wB,MAEAqxB,GACA3wB,KAAAkvB,OAAA,OACAlvB,KAAAmuB,KAAAwC,EAAAH,WACAlE,GAGAtsB,KAAA4wB,SAAAV,IAEAU,SAAA,SAAAV,EAAAW,GACA,aAAAX,EAAAlvB,KACA,MAAAkvB,EAAA5wB,IAaA,MAVA,UAAA4wB,EAAAlvB,MAAA,aAAAkvB,EAAAlvB,KACAhB,KAAAmuB,KAAA+B,EAAA5wB,IACO,WAAA4wB,EAAAlvB,MACPhB,KAAA2vB,KAAA3vB,KAAAV,IAAA4wB,EAAA5wB,IACAU,KAAAkvB,OAAA,SACAlvB,KAAAmuB,KAAA,OACO,WAAA+B,EAAAlvB,MAAA6vB,IACP7wB,KAAAmuB,KAAA0C,GAGAvE,GAEAwE,OAAA,SAAAN,GACA,QAAA5V,EAAA5a,KAAAmvB,WAAArU,OAAA,EAA8CF,GAAA,IAAQA,EAAA,CACtD,IAAAuV,EAAAnwB,KAAAmvB,WAAAvU,GAEA,GAAAuV,EAAAK,eAGA,OAFAxwB,KAAA4wB,SAAAT,EAAAT,WAAAS,EAAAU,UACAzB,EAAAe,GACA7D,IAIAyE,MAAA,SAAAX,GACA,QAAAxV,EAAA5a,KAAAmvB,WAAArU,OAAA,EAA8CF,GAAA,IAAQA,EAAA,CACtD,IAAAuV,EAAAnwB,KAAAmvB,WAAAvU,GAEA,GAAAuV,EAAAC,WAAA,CACA,IAAAF,EAAAC,EAAAT,WAEA,aAAAQ,EAAAlvB,KAAA,CACA,IAAAgwB,EAAAd,EAAA5wB,IACA8vB,EAAAe,GAGA,OAAAa,GAMA,UAAAP,MAAA,0BAEAQ,cAAA,SAAAC,EAAAC,EAAAC,GAaA,OAZApxB,KAAAivB,SAAA,CACAvD,SAAAiB,EAAAuE,GACAC,aACAC,WAGA,SAAApxB,KAAAkvB,SAGAlvB,KAAAV,IAAAe,GAGAisB,IAlpBA,SAAAL,EAAA8B,EAAAC,EAAAjuB,EAAAkuB,GAEA,IAAAoD,EAAArD,KAAA5C,qBAAA2B,EAAAiB,EAAAjB,EACAuE,EAAAzG,OAAAppB,OAAA4vB,EAAAjG,WACA0E,EAAA,IAAAnB,EAAAV,GAAA,IAIA,OADAqD,EAAAC,QA8LA,SAAAxD,EAAAhuB,EAAA+vB,GACA,IAAA0B,EAAAtF,EACA,gBAAAgD,EAAA5vB,GACA,GAAAkyB,IAAApF,EACA,UAAAqE,MAAA,gCAGA,GAAAe,IAAAnF,EAAA,CACA,aAAA6C,EACA,MAAA5vB,EAKA,OAAAmyB,IAMA,IAHA3B,EAAAZ,SACAY,EAAAxwB,QAEA,CACA,IAAA2vB,EAAAa,EAAAb,SAEA,GAAAA,EAAA,CACA,IAAAyC,EAAAC,EAAA1C,EAAAa,GAEA,GAAA4B,EAAA,CACA,GAAAA,IAAApF,EAAA,SACA,OAAAoF,GAIA,YAAA5B,EAAAZ,OAGAY,EAAAf,KAAAe,EAAAd,MAAAc,EAAAxwB,SACS,aAAAwwB,EAAAZ,OAAA,CACT,GAAAsC,IAAAtF,EAEA,MADAsF,EAAAnF,EACAyD,EAAAxwB,IAGAwwB,EAAAF,kBAAAE,EAAAxwB,SACS,WAAAwwB,EAAAZ,QACTY,EAAAY,OAAA,SAAAZ,EAAAxwB,KAGAkyB,EAAApF,EACA,IAAA8D,EAAA0B,EAAA7D,EAAAhuB,EAAA+vB,GAEA,cAAAI,EAAAlvB,KAAA,CAKA,GAFAwwB,EAAA1B,EAAApwB,KAAA2sB,EAAAF,EAEA+D,EAAA5wB,MAAAgtB,EACA,SAGA,OACA9sB,MAAA0wB,EAAA5wB,IACAI,KAAAowB,EAAApwB,MAES,UAAAwwB,EAAAlvB,OACTwwB,EAAAnF,EAGAyD,EAAAZ,OAAA,QACAY,EAAAxwB,IAAA4wB,EAAA5wB,OAlQAuyB,CAAA9D,EAAAhuB,EAAA+vB,GACAwB,EAcA,SAAAM,EAAA9xB,EAAAgyB,EAAAxyB,GACA,IACA,OACA0B,KAAA,SACA1B,IAAAQ,EAAA8sB,KAAAkF,EAAAxyB,IAEK,MAAAc,GACL,OACAY,KAAA,QACA1B,IAAAc,IAgBA,SAAA2sB,KAEA,SAAAC,KAEA,SAAAF,KAyBA,SAAAc,EAAAxC,GACA,0BAAA7Q,QAAA,SAAA2U,GACA9D,EAAA8D,GAAA,SAAA5vB,GACA,OAAAU,KAAAuxB,QAAArC,EAAA5vB,MAqCA,SAAAuuB,EAAAyD,GAgCA,IAAAS,EA4BA/xB,KAAAuxB,QA1BA,SAAArC,EAAA5vB,GACA,SAAA0yB,IACA,WAAAryB,QAAA,SAAAV,EAAAC,IAnCA,SAAA+yB,EAAA/C,EAAA5vB,EAAAL,EAAAC,GACA,IAAAgxB,EAAA0B,EAAAN,EAAApC,GAAAoC,EAAAhyB,GAEA,aAAA4wB,EAAAlvB,KAEO,CACP,IAAAotB,EAAA8B,EAAA5wB,IACAE,EAAA4uB,EAAA5uB,MAEA,OAAAA,GAAA,kBAAAA,GAAA6rB,EAAAuB,KAAAptB,EAAA,WACAG,QAAAV,QAAAO,EAAAmuB,SAAA/tB,KAAA,SAAAJ,GACAyyB,EAAA,OAAAzyB,EAAAP,EAAAC,IACW,SAAAkB,GACX6xB,EAAA,QAAA7xB,EAAAnB,EAAAC,KAIAS,QAAAV,QAAAO,GAAAI,KAAA,SAAAsyB,GAIA9D,EAAA5uB,MAAA0yB,EACAjzB,EAAAmvB,IACS,SAAA3uB,GAGT,OAAAwyB,EAAA,QAAAxyB,EAAAR,EAAAC,KAtBAA,EAAAgxB,EAAA5wB,KAgCA2yB,CAAA/C,EAAA5vB,EAAAL,EAAAC,KAIA,OAAA6yB,EAYAA,IAAAnyB,KAAAoyB,EAEAA,QAwGA,SAAAL,EAAA1C,EAAAa,GACA,IAAAZ,EAAAD,EAAAvD,SAAAoE,EAAAZ,QAEA,GAAAA,IAAA7uB,EAAA,CAKA,GAFAyvB,EAAAb,SAAA,KAEA,UAAAa,EAAAZ,OAAA,CACA,GAAAD,EAAAvD,SAAAyG,SAGArC,EAAAZ,OAAA,SACAY,EAAAxwB,IAAAe,EACAsxB,EAAA1C,EAAAa,GAEA,UAAAA,EAAAZ,QAGA,OAAA5C,EAIAwD,EAAAZ,OAAA,QACAY,EAAAxwB,IAAA,IAAA8yB,UAAA,kDAGA,OAAA9F,EAGA,IAAA4D,EAAA0B,EAAA1C,EAAAD,EAAAvD,SAAAoE,EAAAxwB,KAEA,aAAA4wB,EAAAlvB,KAIA,OAHA8uB,EAAAZ,OAAA,QACAY,EAAAxwB,IAAA4wB,EAAA5wB,IACAwwB,EAAAb,SAAA,KACA3C,EAGA,IAAA/sB,EAAA2wB,EAAA5wB,IAEA,OAAAC,EAOAA,EAAAG,MAGAowB,EAAAb,EAAAkC,YAAA5xB,EAAAC,MAEAswB,EAAA3B,KAAAc,EAAAmC,QAOA,WAAAtB,EAAAZ,SACAY,EAAAZ,OAAA,OACAY,EAAAxwB,IAAAe,GASAyvB,EAAAb,SAAA,KACA3C,GANA/sB,GAxBAuwB,EAAAZ,OAAA,QACAY,EAAAxwB,IAAA,IAAA8yB,UAAA,oCACAtC,EAAAb,SAAA,KACA3C,GA+CA,SAAA+F,EAAAC,GACA,IAAAnC,EAAA,CACAC,OAAAkC,EAAA,IAGA,KAAAA,IACAnC,EAAAI,SAAA+B,EAAA,IAGA,KAAAA,IACAnC,EAAAK,WAAA8B,EAAA,GACAnC,EAAAU,SAAAyB,EAAA,IAGAtyB,KAAAmvB,WAAAX,KAAA2B,GAGA,SAAAf,EAAAe,GACA,IAAAD,EAAAC,EAAAT,YAAA,GACAQ,EAAAlvB,KAAA,gBACAkvB,EAAA5wB,IACA6wB,EAAAT,WAAAQ,EAGA,SAAAvB,EAAAV,GAIAjuB,KAAAmvB,WAAA,EACAiB,OAAA,SAEAnC,EAAA1T,QAAA8X,EAAAryB,MACAA,KAAA4uB,OAAA,GAgCA,SAAAjC,EAAAuE,GACA,GAAAA,EAAA,CACA,IAAAqB,EAAArB,EAAAzF,GAEA,GAAA8G,EACA,OAAAA,EAAA3F,KAAAsE,GAGA,uBAAAA,EAAA/C,KACA,OAAA+C,EAGA,IAAA5B,MAAA4B,EAAApW,QAAA,CACA,IAAAF,GAAA,EACAuT,EAAA,SAAAA,IACA,OAAAvT,EAAAsW,EAAApW,QACA,GAAAuQ,EAAAuB,KAAAsE,EAAAtW,GAGA,OAFAuT,EAAA3uB,MAAA0xB,EAAAtW,GACAuT,EAAAzuB,MAAA,EACAyuB,EAMA,OAFAA,EAAA3uB,MAAAa,EACA8tB,EAAAzuB,MAAA,EACAyuB,GAGA,OAAAA,UAKA,OACAA,KAAAsD,GAMA,SAAAA,IACA,OACAjyB,MAAAa,EACAX,MAAA,IAxfA,CAsrBA,WACA,OAAAM,MAAA,kBAAAD,WADA,IAEC2qB,SAAA,cAAAA","file":"static/js/0.4b17a978.chunk.js","sourcesContent":["module.exports = require(\"regenerator-runtime\");\n","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}","/**\r\n * Common utilities\r\n * @module glMatrix\r\n */\n// Configuration Constants\nexport var EPSILON = 0.000001;\nexport var ARRAY_TYPE = typeof Float32Array !== 'undefined' ? Float32Array : Array;\nexport var RANDOM = Math.random;\n/**\r\n * Sets the type of array used when creating new vectors and matrices\r\n *\r\n * @param {Type} type Array type, such as Float32Array or Array\r\n */\n\nexport function setMatrixArrayType(type) {\n  ARRAY_TYPE = type;\n}\nvar degree = Math.PI / 180;\n/**\r\n * Convert Degree To Radian\r\n *\r\n * @param {Number} a Angle in Degrees\r\n */\n\nexport function toRadian(a) {\n  return a * degree;\n}\n/**\r\n * Tests whether or not the arguments have approximately the same value, within an absolute\r\n * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less\r\n * than or equal to 1.0, and a relative tolerance is used for larger values)\r\n *\r\n * @param {Number} a The first number to test.\r\n * @param {Number} b The second number to test.\r\n * @returns {Boolean} True if the numbers are approximately equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  return Math.abs(a - b) <= EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));\n}","import * as glMatrix from \"./common.js\";\n/**\r\n * 2x2 Matrix\r\n * @module mat2\r\n */\n\n/**\r\n * Creates a new identity mat2\r\n *\r\n * @returns {mat2} a new 2x2 matrix\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(4);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  out[0] = 1;\n  out[3] = 1;\n  return out;\n}\n/**\r\n * Creates a new mat2 initialized with values from an existing matrix\r\n *\r\n * @param {mat2} a matrix to clone\r\n * @returns {mat2} a new 2x2 matrix\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\r\n * Copy the values from one mat2 to another\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {mat2} a the source matrix\r\n * @returns {mat2} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\r\n * Set a mat2 to the identity matrix\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @returns {mat2} out\r\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  return out;\n}\n/**\r\n * Create a new mat2 with the given values\r\n *\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 2)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 3)\r\n * @returns {mat2} out A new 2x2 matrix\r\n */\n\nexport function fromValues(m00, m01, m10, m11) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m10;\n  out[3] = m11;\n  return out;\n}\n/**\r\n * Set the components of a mat2 to the given values\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 2)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 3)\r\n * @returns {mat2} out\r\n */\n\nexport function set(out, m00, m01, m10, m11) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m10;\n  out[3] = m11;\n  return out;\n}\n/**\r\n * Transpose the values of a mat2\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {mat2} a the source matrix\r\n * @returns {mat2} out\r\n */\n\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache\n  // some values\n  if (out === a) {\n    var a1 = a[1];\n    out[1] = a[2];\n    out[2] = a1;\n  } else {\n    out[0] = a[0];\n    out[1] = a[2];\n    out[2] = a[1];\n    out[3] = a[3];\n  }\n\n  return out;\n}\n/**\r\n * Inverts a mat2\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {mat2} a the source matrix\r\n * @returns {mat2} out\r\n */\n\nexport function invert(out, a) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3]; // Calculate the determinant\n\n  var det = a0 * a3 - a2 * a1;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = a3 * det;\n  out[1] = -a1 * det;\n  out[2] = -a2 * det;\n  out[3] = a0 * det;\n  return out;\n}\n/**\r\n * Calculates the adjugate of a mat2\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {mat2} a the source matrix\r\n * @returns {mat2} out\r\n */\n\nexport function adjoint(out, a) {\n  // Caching this value is nessecary if out == a\n  var a0 = a[0];\n  out[0] = a[3];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = a0;\n  return out;\n}\n/**\r\n * Calculates the determinant of a mat2\r\n *\r\n * @param {mat2} a the source matrix\r\n * @returns {Number} determinant of a\r\n */\n\nexport function determinant(a) {\n  return a[0] * a[3] - a[2] * a[1];\n}\n/**\r\n * Multiplies two mat2's\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {mat2} a the first operand\r\n * @param {mat2} b the second operand\r\n * @returns {mat2} out\r\n */\n\nexport function multiply(out, a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  out[0] = a0 * b0 + a2 * b1;\n  out[1] = a1 * b0 + a3 * b1;\n  out[2] = a0 * b2 + a2 * b3;\n  out[3] = a1 * b2 + a3 * b3;\n  return out;\n}\n/**\r\n * Rotates a mat2 by the given angle\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {mat2} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat2} out\r\n */\n\nexport function rotate(out, a, rad) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  out[0] = a0 * c + a2 * s;\n  out[1] = a1 * c + a3 * s;\n  out[2] = a0 * -s + a2 * c;\n  out[3] = a1 * -s + a3 * c;\n  return out;\n}\n/**\r\n * Scales the mat2 by the dimensions in the given vec2\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {mat2} a the matrix to rotate\r\n * @param {vec2} v the vec2 to scale the matrix by\r\n * @returns {mat2} out\r\n **/\n\nexport function scale(out, a, v) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var v0 = v[0],\n      v1 = v[1];\n  out[0] = a0 * v0;\n  out[1] = a1 * v0;\n  out[2] = a2 * v1;\n  out[3] = a3 * v1;\n  return out;\n}\n/**\r\n * Creates a matrix from a given angle\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat2.identity(dest);\r\n *     mat2.rotate(dest, dest, rad);\r\n *\r\n * @param {mat2} out mat2 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat2} out\r\n */\n\nexport function fromRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  out[0] = c;\n  out[1] = s;\n  out[2] = -s;\n  out[3] = c;\n  return out;\n}\n/**\r\n * Creates a matrix from a vector scaling\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat2.identity(dest);\r\n *     mat2.scale(dest, dest, vec);\r\n *\r\n * @param {mat2} out mat2 receiving operation result\r\n * @param {vec2} v Scaling vector\r\n * @returns {mat2} out\r\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = v[1];\n  return out;\n}\n/**\r\n * Returns a string representation of a mat2\r\n *\r\n * @param {mat2} a matrix to represent as a string\r\n * @returns {String} string representation of the matrix\r\n */\n\nexport function str(a) {\n  return 'mat2(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';\n}\n/**\r\n * Returns Frobenius norm of a mat2\r\n *\r\n * @param {mat2} a the matrix to calculate Frobenius norm of\r\n * @returns {Number} Frobenius norm\r\n */\n\nexport function frob(a) {\n  return Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2));\n}\n/**\r\n * Returns L, D and U matrices (Lower triangular, Diagonal and Upper triangular) by factorizing the input matrix\r\n * @param {mat2} L the lower triangular matrix\r\n * @param {mat2} D the diagonal matrix\r\n * @param {mat2} U the upper triangular matrix\r\n * @param {mat2} a the input matrix to factorize\r\n */\n\nexport function LDU(L, D, U, a) {\n  L[2] = a[2] / a[0];\n  U[0] = a[0];\n  U[1] = a[1];\n  U[3] = a[3] - L[2] * U[1];\n  return [L, D, U];\n}\n/**\r\n * Adds two mat2's\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {mat2} a the first operand\r\n * @param {mat2} b the second operand\r\n * @returns {mat2} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  return out;\n}\n/**\r\n * Subtracts matrix b from matrix a\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {mat2} a the first operand\r\n * @param {mat2} b the second operand\r\n * @returns {mat2} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  return out;\n}\n/**\r\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {mat2} a The first matrix.\r\n * @param {mat2} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n}\n/**\r\n * Returns whether or not the matrices have approximately the same elements in the same position.\r\n *\r\n * @param {mat2} a The first matrix.\r\n * @param {mat2} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3));\n}\n/**\r\n * Multiply each element of the matrix by a scalar.\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {mat2} a the matrix to scale\r\n * @param {Number} b amount to scale the matrix's elements by\r\n * @returns {mat2} out\r\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  return out;\n}\n/**\r\n * Adds two mat2's after multiplying each element of the second operand by a scalar value.\r\n *\r\n * @param {mat2} out the receiving vector\r\n * @param {mat2} a the first operand\r\n * @param {mat2} b the second operand\r\n * @param {Number} scale the amount to scale b's elements by before adding\r\n * @returns {mat2} out\r\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  return out;\n}\n/**\r\n * Alias for {@link mat2.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link mat2.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;","import * as glMatrix from \"./common.js\";\n/**\r\n * 2x3 Matrix\r\n * @module mat2d\r\n *\r\n * @description\r\n * A mat2d contains six elements defined as:\r\n * <pre>\r\n * [a, c, tx,\r\n *  b, d, ty]\r\n * </pre>\r\n * This is a short form for the 3x3 matrix:\r\n * <pre>\r\n * [a, c, tx,\r\n *  b, d, ty,\r\n *  0, 0, 1]\r\n * </pre>\r\n * The last row is ignored so the array is shorter and operations are faster.\r\n */\n\n/**\r\n * Creates a new identity mat2d\r\n *\r\n * @returns {mat2d} a new 2x3 matrix\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(6);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[4] = 0;\n    out[5] = 0;\n  }\n\n  out[0] = 1;\n  out[3] = 1;\n  return out;\n}\n/**\r\n * Creates a new mat2d initialized with values from an existing matrix\r\n *\r\n * @param {mat2d} a matrix to clone\r\n * @returns {mat2d} a new 2x3 matrix\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(6);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  return out;\n}\n/**\r\n * Copy the values from one mat2d to another\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {mat2d} a the source matrix\r\n * @returns {mat2d} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  return out;\n}\n/**\r\n * Set a mat2d to the identity matrix\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @returns {mat2d} out\r\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  out[4] = 0;\n  out[5] = 0;\n  return out;\n}\n/**\r\n * Create a new mat2d with the given values\r\n *\r\n * @param {Number} a Component A (index 0)\r\n * @param {Number} b Component B (index 1)\r\n * @param {Number} c Component C (index 2)\r\n * @param {Number} d Component D (index 3)\r\n * @param {Number} tx Component TX (index 4)\r\n * @param {Number} ty Component TY (index 5)\r\n * @returns {mat2d} A new mat2d\r\n */\n\nexport function fromValues(a, b, c, d, tx, ty) {\n  var out = new glMatrix.ARRAY_TYPE(6);\n  out[0] = a;\n  out[1] = b;\n  out[2] = c;\n  out[3] = d;\n  out[4] = tx;\n  out[5] = ty;\n  return out;\n}\n/**\r\n * Set the components of a mat2d to the given values\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {Number} a Component A (index 0)\r\n * @param {Number} b Component B (index 1)\r\n * @param {Number} c Component C (index 2)\r\n * @param {Number} d Component D (index 3)\r\n * @param {Number} tx Component TX (index 4)\r\n * @param {Number} ty Component TY (index 5)\r\n * @returns {mat2d} out\r\n */\n\nexport function set(out, a, b, c, d, tx, ty) {\n  out[0] = a;\n  out[1] = b;\n  out[2] = c;\n  out[3] = d;\n  out[4] = tx;\n  out[5] = ty;\n  return out;\n}\n/**\r\n * Inverts a mat2d\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {mat2d} a the source matrix\r\n * @returns {mat2d} out\r\n */\n\nexport function invert(out, a) {\n  var aa = a[0],\n      ab = a[1],\n      ac = a[2],\n      ad = a[3];\n  var atx = a[4],\n      aty = a[5];\n  var det = aa * ad - ab * ac;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = ad * det;\n  out[1] = -ab * det;\n  out[2] = -ac * det;\n  out[3] = aa * det;\n  out[4] = (ac * aty - ad * atx) * det;\n  out[5] = (ab * atx - aa * aty) * det;\n  return out;\n}\n/**\r\n * Calculates the determinant of a mat2d\r\n *\r\n * @param {mat2d} a the source matrix\r\n * @returns {Number} determinant of a\r\n */\n\nexport function determinant(a) {\n  return a[0] * a[3] - a[1] * a[2];\n}\n/**\r\n * Multiplies two mat2d's\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {mat2d} a the first operand\r\n * @param {mat2d} b the second operand\r\n * @returns {mat2d} out\r\n */\n\nexport function multiply(out, a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3],\n      b4 = b[4],\n      b5 = b[5];\n  out[0] = a0 * b0 + a2 * b1;\n  out[1] = a1 * b0 + a3 * b1;\n  out[2] = a0 * b2 + a2 * b3;\n  out[3] = a1 * b2 + a3 * b3;\n  out[4] = a0 * b4 + a2 * b5 + a4;\n  out[5] = a1 * b4 + a3 * b5 + a5;\n  return out;\n}\n/**\r\n * Rotates a mat2d by the given angle\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {mat2d} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat2d} out\r\n */\n\nexport function rotate(out, a, rad) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5];\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  out[0] = a0 * c + a2 * s;\n  out[1] = a1 * c + a3 * s;\n  out[2] = a0 * -s + a2 * c;\n  out[3] = a1 * -s + a3 * c;\n  out[4] = a4;\n  out[5] = a5;\n  return out;\n}\n/**\r\n * Scales the mat2d by the dimensions in the given vec2\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {mat2d} a the matrix to translate\r\n * @param {vec2} v the vec2 to scale the matrix by\r\n * @returns {mat2d} out\r\n **/\n\nexport function scale(out, a, v) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5];\n  var v0 = v[0],\n      v1 = v[1];\n  out[0] = a0 * v0;\n  out[1] = a1 * v0;\n  out[2] = a2 * v1;\n  out[3] = a3 * v1;\n  out[4] = a4;\n  out[5] = a5;\n  return out;\n}\n/**\r\n * Translates the mat2d by the dimensions in the given vec2\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {mat2d} a the matrix to translate\r\n * @param {vec2} v the vec2 to translate the matrix by\r\n * @returns {mat2d} out\r\n **/\n\nexport function translate(out, a, v) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5];\n  var v0 = v[0],\n      v1 = v[1];\n  out[0] = a0;\n  out[1] = a1;\n  out[2] = a2;\n  out[3] = a3;\n  out[4] = a0 * v0 + a2 * v1 + a4;\n  out[5] = a1 * v0 + a3 * v1 + a5;\n  return out;\n}\n/**\r\n * Creates a matrix from a given angle\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat2d.identity(dest);\r\n *     mat2d.rotate(dest, dest, rad);\r\n *\r\n * @param {mat2d} out mat2d receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat2d} out\r\n */\n\nexport function fromRotation(out, rad) {\n  var s = Math.sin(rad),\n      c = Math.cos(rad);\n  out[0] = c;\n  out[1] = s;\n  out[2] = -s;\n  out[3] = c;\n  out[4] = 0;\n  out[5] = 0;\n  return out;\n}\n/**\r\n * Creates a matrix from a vector scaling\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat2d.identity(dest);\r\n *     mat2d.scale(dest, dest, vec);\r\n *\r\n * @param {mat2d} out mat2d receiving operation result\r\n * @param {vec2} v Scaling vector\r\n * @returns {mat2d} out\r\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = v[1];\n  out[4] = 0;\n  out[5] = 0;\n  return out;\n}\n/**\r\n * Creates a matrix from a vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat2d.identity(dest);\r\n *     mat2d.translate(dest, dest, vec);\r\n *\r\n * @param {mat2d} out mat2d receiving operation result\r\n * @param {vec2} v Translation vector\r\n * @returns {mat2d} out\r\n */\n\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  out[4] = v[0];\n  out[5] = v[1];\n  return out;\n}\n/**\r\n * Returns a string representation of a mat2d\r\n *\r\n * @param {mat2d} a matrix to represent as a string\r\n * @returns {String} string representation of the matrix\r\n */\n\nexport function str(a) {\n  return 'mat2d(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' + a[4] + ', ' + a[5] + ')';\n}\n/**\r\n * Returns Frobenius norm of a mat2d\r\n *\r\n * @param {mat2d} a the matrix to calculate Frobenius norm of\r\n * @returns {Number} Frobenius norm\r\n */\n\nexport function frob(a) {\n  return Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + 1);\n}\n/**\r\n * Adds two mat2d's\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {mat2d} a the first operand\r\n * @param {mat2d} b the second operand\r\n * @returns {mat2d} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  return out;\n}\n/**\r\n * Subtracts matrix b from matrix a\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {mat2d} a the first operand\r\n * @param {mat2d} b the second operand\r\n * @returns {mat2d} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  return out;\n}\n/**\r\n * Multiply each element of the matrix by a scalar.\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {mat2d} a the matrix to scale\r\n * @param {Number} b amount to scale the matrix's elements by\r\n * @returns {mat2d} out\r\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  return out;\n}\n/**\r\n * Adds two mat2d's after multiplying each element of the second operand by a scalar value.\r\n *\r\n * @param {mat2d} out the receiving vector\r\n * @param {mat2d} a the first operand\r\n * @param {mat2d} b the second operand\r\n * @param {Number} scale the amount to scale b's elements by before adding\r\n * @returns {mat2d} out\r\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  return out;\n}\n/**\r\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {mat2d} a The first matrix.\r\n * @param {mat2d} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5];\n}\n/**\r\n * Returns whether or not the matrices have approximately the same elements in the same position.\r\n *\r\n * @param {mat2d} a The first matrix.\r\n * @param {mat2d} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3],\n      b4 = b[4],\n      b5 = b[5];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5));\n}\n/**\r\n * Alias for {@link mat2d.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link mat2d.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;","import * as glMatrix from \"./common.js\";\n/**\r\n * 3x3 Matrix\r\n * @module mat3\r\n */\n\n/**\r\n * Creates a new identity mat3\r\n *\r\n * @returns {mat3} a new 3x3 matrix\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(9);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[5] = 0;\n    out[6] = 0;\n    out[7] = 0;\n  }\n\n  out[0] = 1;\n  out[4] = 1;\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Copies the upper-left 3x3 values into the given mat3.\r\n *\r\n * @param {mat3} out the receiving 3x3 matrix\r\n * @param {mat4} a   the source 4x4 matrix\r\n * @returns {mat3} out\r\n */\n\nexport function fromMat4(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[4];\n  out[4] = a[5];\n  out[5] = a[6];\n  out[6] = a[8];\n  out[7] = a[9];\n  out[8] = a[10];\n  return out;\n}\n/**\r\n * Creates a new mat3 initialized with values from an existing matrix\r\n *\r\n * @param {mat3} a matrix to clone\r\n * @returns {mat3} a new 3x3 matrix\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(9);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\r\n * Copy the values from one mat3 to another\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the source matrix\r\n * @returns {mat3} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\r\n * Create a new mat3 with the given values\r\n *\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\r\n * @returns {mat3} A new mat3\r\n */\n\nexport function fromValues(m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n  var out = new glMatrix.ARRAY_TYPE(9);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m10;\n  out[4] = m11;\n  out[5] = m12;\n  out[6] = m20;\n  out[7] = m21;\n  out[8] = m22;\n  return out;\n}\n/**\r\n * Set the components of a mat3 to the given values\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\r\n * @returns {mat3} out\r\n */\n\nexport function set(out, m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m10;\n  out[4] = m11;\n  out[5] = m12;\n  out[6] = m20;\n  out[7] = m21;\n  out[8] = m22;\n  return out;\n}\n/**\r\n * Set a mat3 to the identity matrix\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @returns {mat3} out\r\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 1;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Transpose the values of a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the source matrix\r\n * @returns {mat3} out\r\n */\n\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    var a01 = a[1],\n        a02 = a[2],\n        a12 = a[5];\n    out[1] = a[3];\n    out[2] = a[6];\n    out[3] = a01;\n    out[5] = a[7];\n    out[6] = a02;\n    out[7] = a12;\n  } else {\n    out[0] = a[0];\n    out[1] = a[3];\n    out[2] = a[6];\n    out[3] = a[1];\n    out[4] = a[4];\n    out[5] = a[7];\n    out[6] = a[2];\n    out[7] = a[5];\n    out[8] = a[8];\n  }\n\n  return out;\n}\n/**\r\n * Inverts a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the source matrix\r\n * @returns {mat3} out\r\n */\n\nexport function invert(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  var b01 = a22 * a11 - a12 * a21;\n  var b11 = -a22 * a10 + a12 * a20;\n  var b21 = a21 * a10 - a11 * a20; // Calculate the determinant\n\n  var det = a00 * b01 + a01 * b11 + a02 * b21;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = b01 * det;\n  out[1] = (-a22 * a01 + a02 * a21) * det;\n  out[2] = (a12 * a01 - a02 * a11) * det;\n  out[3] = b11 * det;\n  out[4] = (a22 * a00 - a02 * a20) * det;\n  out[5] = (-a12 * a00 + a02 * a10) * det;\n  out[6] = b21 * det;\n  out[7] = (-a21 * a00 + a01 * a20) * det;\n  out[8] = (a11 * a00 - a01 * a10) * det;\n  return out;\n}\n/**\r\n * Calculates the adjugate of a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the source matrix\r\n * @returns {mat3} out\r\n */\n\nexport function adjoint(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  out[0] = a11 * a22 - a12 * a21;\n  out[1] = a02 * a21 - a01 * a22;\n  out[2] = a01 * a12 - a02 * a11;\n  out[3] = a12 * a20 - a10 * a22;\n  out[4] = a00 * a22 - a02 * a20;\n  out[5] = a02 * a10 - a00 * a12;\n  out[6] = a10 * a21 - a11 * a20;\n  out[7] = a01 * a20 - a00 * a21;\n  out[8] = a00 * a11 - a01 * a10;\n  return out;\n}\n/**\r\n * Calculates the determinant of a mat3\r\n *\r\n * @param {mat3} a the source matrix\r\n * @returns {Number} determinant of a\r\n */\n\nexport function determinant(a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);\n}\n/**\r\n * Multiplies two mat3's\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the first operand\r\n * @param {mat3} b the second operand\r\n * @returns {mat3} out\r\n */\n\nexport function multiply(out, a, b) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  var b00 = b[0],\n      b01 = b[1],\n      b02 = b[2];\n  var b10 = b[3],\n      b11 = b[4],\n      b12 = b[5];\n  var b20 = b[6],\n      b21 = b[7],\n      b22 = b[8];\n  out[0] = b00 * a00 + b01 * a10 + b02 * a20;\n  out[1] = b00 * a01 + b01 * a11 + b02 * a21;\n  out[2] = b00 * a02 + b01 * a12 + b02 * a22;\n  out[3] = b10 * a00 + b11 * a10 + b12 * a20;\n  out[4] = b10 * a01 + b11 * a11 + b12 * a21;\n  out[5] = b10 * a02 + b11 * a12 + b12 * a22;\n  out[6] = b20 * a00 + b21 * a10 + b22 * a20;\n  out[7] = b20 * a01 + b21 * a11 + b22 * a21;\n  out[8] = b20 * a02 + b21 * a12 + b22 * a22;\n  return out;\n}\n/**\r\n * Translate a mat3 by the given vector\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the matrix to translate\r\n * @param {vec2} v vector to translate by\r\n * @returns {mat3} out\r\n */\n\nexport function translate(out, a, v) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a10 = a[3],\n      a11 = a[4],\n      a12 = a[5],\n      a20 = a[6],\n      a21 = a[7],\n      a22 = a[8],\n      x = v[0],\n      y = v[1];\n  out[0] = a00;\n  out[1] = a01;\n  out[2] = a02;\n  out[3] = a10;\n  out[4] = a11;\n  out[5] = a12;\n  out[6] = x * a00 + y * a10 + a20;\n  out[7] = x * a01 + y * a11 + a21;\n  out[8] = x * a02 + y * a12 + a22;\n  return out;\n}\n/**\r\n * Rotates a mat3 by the given angle\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat3} out\r\n */\n\nexport function rotate(out, a, rad) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a10 = a[3],\n      a11 = a[4],\n      a12 = a[5],\n      a20 = a[6],\n      a21 = a[7],\n      a22 = a[8],\n      s = Math.sin(rad),\n      c = Math.cos(rad);\n  out[0] = c * a00 + s * a10;\n  out[1] = c * a01 + s * a11;\n  out[2] = c * a02 + s * a12;\n  out[3] = c * a10 - s * a00;\n  out[4] = c * a11 - s * a01;\n  out[5] = c * a12 - s * a02;\n  out[6] = a20;\n  out[7] = a21;\n  out[8] = a22;\n  return out;\n}\n;\n/**\r\n * Scales the mat3 by the dimensions in the given vec2\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the matrix to rotate\r\n * @param {vec2} v the vec2 to scale the matrix by\r\n * @returns {mat3} out\r\n **/\n\nexport function scale(out, a, v) {\n  var x = v[0],\n      y = v[1];\n  out[0] = x * a[0];\n  out[1] = x * a[1];\n  out[2] = x * a[2];\n  out[3] = y * a[3];\n  out[4] = y * a[4];\n  out[5] = y * a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\r\n * Creates a matrix from a vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat3.identity(dest);\r\n *     mat3.translate(dest, dest, vec);\r\n *\r\n * @param {mat3} out mat3 receiving operation result\r\n * @param {vec2} v Translation vector\r\n * @returns {mat3} out\r\n */\n\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 1;\n  out[5] = 0;\n  out[6] = v[0];\n  out[7] = v[1];\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a given angle\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat3.identity(dest);\r\n *     mat3.rotate(dest, dest, rad);\r\n *\r\n * @param {mat3} out mat3 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat3} out\r\n */\n\nexport function fromRotation(out, rad) {\n  var s = Math.sin(rad),\n      c = Math.cos(rad);\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n  out[3] = -s;\n  out[4] = c;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a vector scaling\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat3.identity(dest);\r\n *     mat3.scale(dest, dest, vec);\r\n *\r\n * @param {mat3} out mat3 receiving operation result\r\n * @param {vec2} v Scaling vector\r\n * @returns {mat3} out\r\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = v[1];\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Copies the values from a mat2d into a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat2d} a the matrix to copy\r\n * @returns {mat3} out\r\n **/\n\nexport function fromMat2d(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = 0;\n  out[3] = a[2];\n  out[4] = a[3];\n  out[5] = 0;\n  out[6] = a[4];\n  out[7] = a[5];\n  out[8] = 1;\n  return out;\n}\n/**\r\n* Calculates a 3x3 matrix from the given quaternion\r\n*\r\n* @param {mat3} out mat3 receiving operation result\r\n* @param {quat} q Quaternion to create matrix from\r\n*\r\n* @returns {mat3} out\r\n*/\n\nexport function fromQuat(out, q) {\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var yx = y * x2;\n  var yy = y * y2;\n  var zx = z * x2;\n  var zy = z * y2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - yy - zz;\n  out[3] = yx - wz;\n  out[6] = zx + wy;\n  out[1] = yx + wz;\n  out[4] = 1 - xx - zz;\n  out[7] = zy - wx;\n  out[2] = zx - wy;\n  out[5] = zy + wx;\n  out[8] = 1 - xx - yy;\n  return out;\n}\n/**\r\n* Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix\r\n*\r\n* @param {mat3} out mat3 receiving operation result\r\n* @param {mat4} a Mat4 to derive the normal matrix from\r\n*\r\n* @returns {mat3} out\r\n*/\n\nexport function normalFromMat4(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  return out;\n}\n/**\r\n * Generates a 2D projection matrix with the given bounds\r\n *\r\n * @param {mat3} out mat3 frustum matrix will be written into\r\n * @param {number} width Width of your gl context\r\n * @param {number} height Height of gl context\r\n * @returns {mat3} out\r\n */\n\nexport function projection(out, width, height) {\n  out[0] = 2 / width;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = -2 / height;\n  out[5] = 0;\n  out[6] = -1;\n  out[7] = 1;\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Returns a string representation of a mat3\r\n *\r\n * @param {mat3} a matrix to represent as a string\r\n * @returns {String} string representation of the matrix\r\n */\n\nexport function str(a) {\n  return 'mat3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' + a[4] + ', ' + a[5] + ', ' + a[6] + ', ' + a[7] + ', ' + a[8] + ')';\n}\n/**\r\n * Returns Frobenius norm of a mat3\r\n *\r\n * @param {mat3} a the matrix to calculate Frobenius norm of\r\n * @returns {Number} Frobenius norm\r\n */\n\nexport function frob(a) {\n  return Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2));\n}\n/**\r\n * Adds two mat3's\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the first operand\r\n * @param {mat3} b the second operand\r\n * @returns {mat3} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  return out;\n}\n/**\r\n * Subtracts matrix b from matrix a\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the first operand\r\n * @param {mat3} b the second operand\r\n * @returns {mat3} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  return out;\n}\n/**\r\n * Multiply each element of the matrix by a scalar.\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the matrix to scale\r\n * @param {Number} b amount to scale the matrix's elements by\r\n * @returns {mat3} out\r\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  return out;\n}\n/**\r\n * Adds two mat3's after multiplying each element of the second operand by a scalar value.\r\n *\r\n * @param {mat3} out the receiving vector\r\n * @param {mat3} a the first operand\r\n * @param {mat3} b the second operand\r\n * @param {Number} scale the amount to scale b's elements by before adding\r\n * @returns {mat3} out\r\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  out[6] = a[6] + b[6] * scale;\n  out[7] = a[7] + b[7] * scale;\n  out[8] = a[8] + b[8] * scale;\n  return out;\n}\n/**\r\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {mat3} a The first matrix.\r\n * @param {mat3} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8];\n}\n/**\r\n * Returns whether or not the matrices have approximately the same elements in the same position.\r\n *\r\n * @param {mat3} a The first matrix.\r\n * @param {mat3} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7],\n      a8 = a[8];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3],\n      b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7],\n      b8 = b[8];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8));\n}\n/**\r\n * Alias for {@link mat3.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link mat3.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;","import * as glMatrix from \"./common.js\";\n/**\r\n * 4x4 Matrix<br>Format: column-major, when typed out it looks like row-major<br>The matrices are being post multiplied.\r\n * @module mat4\r\n */\n\n/**\r\n * Creates a new identity mat4\r\n *\r\n * @returns {mat4} a new 4x4 matrix\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(16);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n  }\n\n  out[0] = 1;\n  out[5] = 1;\n  out[10] = 1;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a new mat4 initialized with values from an existing matrix\r\n *\r\n * @param {mat4} a matrix to clone\r\n * @returns {mat4} a new 4x4 matrix\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\r\n * Copy the values from one mat4 to another\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the source matrix\r\n * @returns {mat4} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\r\n * Create a new mat4 with the given values\r\n *\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\r\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\r\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\r\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\r\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\r\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\r\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\r\n * @returns {mat4} A new mat4\r\n */\n\nexport function fromValues(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\r\n * Set the components of a mat4 to the given values\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\r\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\r\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\r\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\r\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\r\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\r\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\r\n * @returns {mat4} out\r\n */\n\nexport function set(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\r\n * Set a mat4 to the identity matrix\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @returns {mat4} out\r\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Transpose the values of a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the source matrix\r\n * @returns {mat4} out\r\n */\n\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    var a01 = a[1],\n        a02 = a[2],\n        a03 = a[3];\n    var a12 = a[6],\n        a13 = a[7];\n    var a23 = a[11];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a01;\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a02;\n    out[9] = a12;\n    out[11] = a[14];\n    out[12] = a03;\n    out[13] = a13;\n    out[14] = a23;\n  } else {\n    out[0] = a[0];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a[1];\n    out[5] = a[5];\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a[2];\n    out[9] = a[6];\n    out[10] = a[10];\n    out[11] = a[14];\n    out[12] = a[3];\n    out[13] = a[7];\n    out[14] = a[11];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\r\n * Inverts a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the source matrix\r\n * @returns {mat4} out\r\n */\n\nexport function invert(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\n  out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\n  out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\n  out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\n  out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\n  out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\n  out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\n  return out;\n}\n/**\r\n * Calculates the adjugate of a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the source matrix\r\n * @returns {mat4} out\r\n */\n\nexport function adjoint(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  out[0] = a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22);\n  out[1] = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));\n  out[2] = a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12);\n  out[3] = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));\n  out[4] = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));\n  out[5] = a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22);\n  out[6] = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));\n  out[7] = a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12);\n  out[8] = a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21);\n  out[9] = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));\n  out[10] = a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11);\n  out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));\n  out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));\n  out[13] = a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21);\n  out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));\n  out[15] = a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11);\n  return out;\n}\n/**\r\n * Calculates the determinant of a mat4\r\n *\r\n * @param {mat4} a the source matrix\r\n * @returns {Number} determinant of a\r\n */\n\nexport function determinant(a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n}\n/**\r\n * Multiplies two mat4s\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the first operand\r\n * @param {mat4} b the second operand\r\n * @returns {mat4} out\r\n */\n\nexport function multiply(out, a, b) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15]; // Cache only the current line of the second matrix\n\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[4];\n  b1 = b[5];\n  b2 = b[6];\n  b3 = b[7];\n  out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[8];\n  b1 = b[9];\n  b2 = b[10];\n  b3 = b[11];\n  out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[12];\n  b1 = b[13];\n  b2 = b[14];\n  b3 = b[15];\n  out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  return out;\n}\n/**\r\n * Translate a mat4 by the given vector\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to translate\r\n * @param {vec3} v vector to translate by\r\n * @returns {mat4} out\r\n */\n\nexport function translate(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n\n  if (a === out) {\n    out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\n    out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\n    out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\n    out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\n  } else {\n    a00 = a[0];\n    a01 = a[1];\n    a02 = a[2];\n    a03 = a[3];\n    a10 = a[4];\n    a11 = a[5];\n    a12 = a[6];\n    a13 = a[7];\n    a20 = a[8];\n    a21 = a[9];\n    a22 = a[10];\n    a23 = a[11];\n    out[0] = a00;\n    out[1] = a01;\n    out[2] = a02;\n    out[3] = a03;\n    out[4] = a10;\n    out[5] = a11;\n    out[6] = a12;\n    out[7] = a13;\n    out[8] = a20;\n    out[9] = a21;\n    out[10] = a22;\n    out[11] = a23;\n    out[12] = a00 * x + a10 * y + a20 * z + a[12];\n    out[13] = a01 * x + a11 * y + a21 * z + a[13];\n    out[14] = a02 * x + a12 * y + a22 * z + a[14];\n    out[15] = a03 * x + a13 * y + a23 * z + a[15];\n  }\n\n  return out;\n}\n/**\r\n * Scales the mat4 by the dimensions in the given vec3 not using vectorization\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to scale\r\n * @param {vec3} v the vec3 to scale the matrix by\r\n * @returns {mat4} out\r\n **/\n\nexport function scale(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  out[0] = a[0] * x;\n  out[1] = a[1] * x;\n  out[2] = a[2] * x;\n  out[3] = a[3] * x;\n  out[4] = a[4] * y;\n  out[5] = a[5] * y;\n  out[6] = a[6] * y;\n  out[7] = a[7] * y;\n  out[8] = a[8] * z;\n  out[9] = a[9] * z;\n  out[10] = a[10] * z;\n  out[11] = a[11] * z;\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\r\n * Rotates a mat4 by the given angle around the given axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @param {vec3} axis the axis to rotate around\r\n * @returns {mat4} out\r\n */\n\nexport function rotate(out, a, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.sqrt(x * x + y * y + z * z);\n  var s, c, t;\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n  var b00, b01, b02;\n  var b10, b11, b12;\n  var b20, b21, b22;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c;\n  a00 = a[0];\n  a01 = a[1];\n  a02 = a[2];\n  a03 = a[3];\n  a10 = a[4];\n  a11 = a[5];\n  a12 = a[6];\n  a13 = a[7];\n  a20 = a[8];\n  a21 = a[9];\n  a22 = a[10];\n  a23 = a[11]; // Construct the elements of the rotation matrix\n\n  b00 = x * x * t + c;\n  b01 = y * x * t + z * s;\n  b02 = z * x * t - y * s;\n  b10 = x * y * t - z * s;\n  b11 = y * y * t + c;\n  b12 = z * y * t + x * s;\n  b20 = x * z * t + y * s;\n  b21 = y * z * t - x * s;\n  b22 = z * z * t + c; // Perform rotation-specific matrix multiplication\n\n  out[0] = a00 * b00 + a10 * b01 + a20 * b02;\n  out[1] = a01 * b00 + a11 * b01 + a21 * b02;\n  out[2] = a02 * b00 + a12 * b01 + a22 * b02;\n  out[3] = a03 * b00 + a13 * b01 + a23 * b02;\n  out[4] = a00 * b10 + a10 * b11 + a20 * b12;\n  out[5] = a01 * b10 + a11 * b11 + a21 * b12;\n  out[6] = a02 * b10 + a12 * b11 + a22 * b12;\n  out[7] = a03 * b10 + a13 * b11 + a23 * b12;\n  out[8] = a00 * b20 + a10 * b21 + a20 * b22;\n  out[9] = a01 * b20 + a11 * b21 + a21 * b22;\n  out[10] = a02 * b20 + a12 * b21 + a22 * b22;\n  out[11] = a03 * b20 + a13 * b21 + a23 * b22;\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\r\n * Rotates a matrix by the given angle around the X axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function rotateX(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[4] = a10 * c + a20 * s;\n  out[5] = a11 * c + a21 * s;\n  out[6] = a12 * c + a22 * s;\n  out[7] = a13 * c + a23 * s;\n  out[8] = a20 * c - a10 * s;\n  out[9] = a21 * c - a11 * s;\n  out[10] = a22 * c - a12 * s;\n  out[11] = a23 * c - a13 * s;\n  return out;\n}\n/**\r\n * Rotates a matrix by the given angle around the Y axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function rotateY(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c - a20 * s;\n  out[1] = a01 * c - a21 * s;\n  out[2] = a02 * c - a22 * s;\n  out[3] = a03 * c - a23 * s;\n  out[8] = a00 * s + a20 * c;\n  out[9] = a01 * s + a21 * c;\n  out[10] = a02 * s + a22 * c;\n  out[11] = a03 * s + a23 * c;\n  return out;\n}\n/**\r\n * Rotates a matrix by the given angle around the Z axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function rotateZ(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[8] = a[8];\n    out[9] = a[9];\n    out[10] = a[10];\n    out[11] = a[11];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c + a10 * s;\n  out[1] = a01 * c + a11 * s;\n  out[2] = a02 * c + a12 * s;\n  out[3] = a03 * c + a13 * s;\n  out[4] = a10 * c - a00 * s;\n  out[5] = a11 * c - a01 * s;\n  out[6] = a12 * c - a02 * s;\n  out[7] = a13 * c - a03 * s;\n  return out;\n}\n/**\r\n * Creates a matrix from a vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, dest, vec);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {vec3} v Translation vector\r\n * @returns {mat4} out\r\n */\n\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a vector scaling\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.scale(dest, dest, vec);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {vec3} v Scaling vector\r\n * @returns {mat4} out\r\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = v[1];\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = v[2];\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a given angle around a given axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotate(dest, dest, rad, axis);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @param {vec3} axis the axis to rotate around\r\n * @returns {mat4} out\r\n */\n\nexport function fromRotation(out, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.sqrt(x * x + y * y + z * z);\n  var s, c, t;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c; // Perform rotation-specific matrix multiplication\n\n  out[0] = x * x * t + c;\n  out[1] = y * x * t + z * s;\n  out[2] = z * x * t - y * s;\n  out[3] = 0;\n  out[4] = x * y * t - z * s;\n  out[5] = y * y * t + c;\n  out[6] = z * y * t + x * s;\n  out[7] = 0;\n  out[8] = x * z * t + y * s;\n  out[9] = y * z * t - x * s;\n  out[10] = z * z * t + c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from the given angle around the X axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateX(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function fromXRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = c;\n  out[6] = s;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = -s;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from the given angle around the Y axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateY(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function fromYRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = 0;\n  out[2] = -s;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = s;\n  out[9] = 0;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from the given angle around the Z axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateZ(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function fromZRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = -s;\n  out[5] = c;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a quaternion rotation and vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {vec3} v Translation vector\r\n * @returns {mat4} out\r\n */\n\nexport function fromRotationTranslation(out, q, v) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - (yy + zz);\n  out[1] = xy + wz;\n  out[2] = xz - wy;\n  out[3] = 0;\n  out[4] = xy - wz;\n  out[5] = 1 - (xx + zz);\n  out[6] = yz + wx;\n  out[7] = 0;\n  out[8] = xz + wy;\n  out[9] = yz - wx;\n  out[10] = 1 - (xx + yy);\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a new mat4 from a dual quat.\r\n *\r\n * @param {mat4} out Matrix\r\n * @param {quat2} a Dual Quaternion\r\n * @returns {mat4} mat4 receiving operation result\r\n */\n\nexport function fromQuat2(out, a) {\n  var translation = new glMatrix.ARRAY_TYPE(3);\n  var bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3],\n      ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7];\n  var magnitude = bx * bx + by * by + bz * bz + bw * bw; //Only scale if it makes sense\n\n  if (magnitude > 0) {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2 / magnitude;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2 / magnitude;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2 / magnitude;\n  } else {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\n  }\n\n  fromRotationTranslation(out, a, translation);\n  return out;\n}\n/**\r\n * Returns the translation vector component of a transformation\r\n *  matrix. If a matrix is built with fromRotationTranslation,\r\n *  the returned vector will be the same as the translation vector\r\n *  originally supplied.\r\n * @param  {vec3} out Vector to receive translation component\r\n * @param  {mat4} mat Matrix to be decomposed (input)\r\n * @return {vec3} out\r\n */\n\nexport function getTranslation(out, mat) {\n  out[0] = mat[12];\n  out[1] = mat[13];\n  out[2] = mat[14];\n  return out;\n}\n/**\r\n * Returns the scaling factor component of a transformation\r\n *  matrix. If a matrix is built with fromRotationTranslationScale\r\n *  with a normalized Quaternion paramter, the returned vector will be\r\n *  the same as the scaling vector\r\n *  originally supplied.\r\n * @param  {vec3} out Vector to receive scaling factor component\r\n * @param  {mat4} mat Matrix to be decomposed (input)\r\n * @return {vec3} out\r\n */\n\nexport function getScaling(out, mat) {\n  var m11 = mat[0];\n  var m12 = mat[1];\n  var m13 = mat[2];\n  var m21 = mat[4];\n  var m22 = mat[5];\n  var m23 = mat[6];\n  var m31 = mat[8];\n  var m32 = mat[9];\n  var m33 = mat[10];\n  out[0] = Math.sqrt(m11 * m11 + m12 * m12 + m13 * m13);\n  out[1] = Math.sqrt(m21 * m21 + m22 * m22 + m23 * m23);\n  out[2] = Math.sqrt(m31 * m31 + m32 * m32 + m33 * m33);\n  return out;\n}\n/**\r\n * Returns a quaternion representing the rotational component\r\n *  of a transformation matrix. If a matrix is built with\r\n *  fromRotationTranslation, the returned quaternion will be the\r\n *  same as the quaternion originally supplied.\r\n * @param {quat} out Quaternion to receive the rotation component\r\n * @param {mat4} mat Matrix to be decomposed (input)\r\n * @return {quat} out\r\n */\n\nexport function getRotation(out, mat) {\n  // Algorithm taken from http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\n  var trace = mat[0] + mat[5] + mat[10];\n  var S = 0;\n\n  if (trace > 0) {\n    S = Math.sqrt(trace + 1.0) * 2;\n    out[3] = 0.25 * S;\n    out[0] = (mat[6] - mat[9]) / S;\n    out[1] = (mat[8] - mat[2]) / S;\n    out[2] = (mat[1] - mat[4]) / S;\n  } else if (mat[0] > mat[5] && mat[0] > mat[10]) {\n    S = Math.sqrt(1.0 + mat[0] - mat[5] - mat[10]) * 2;\n    out[3] = (mat[6] - mat[9]) / S;\n    out[0] = 0.25 * S;\n    out[1] = (mat[1] + mat[4]) / S;\n    out[2] = (mat[8] + mat[2]) / S;\n  } else if (mat[5] > mat[10]) {\n    S = Math.sqrt(1.0 + mat[5] - mat[0] - mat[10]) * 2;\n    out[3] = (mat[8] - mat[2]) / S;\n    out[0] = (mat[1] + mat[4]) / S;\n    out[1] = 0.25 * S;\n    out[2] = (mat[6] + mat[9]) / S;\n  } else {\n    S = Math.sqrt(1.0 + mat[10] - mat[0] - mat[5]) * 2;\n    out[3] = (mat[1] - mat[4]) / S;\n    out[0] = (mat[8] + mat[2]) / S;\n    out[1] = (mat[6] + mat[9]) / S;\n    out[2] = 0.25 * S;\n  }\n\n  return out;\n}\n/**\r\n * Creates a matrix from a quaternion rotation, vector translation and vector scale\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *     mat4.scale(dest, scale)\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {vec3} v Translation vector\r\n * @param {vec3} s Scaling vector\r\n * @returns {mat4} out\r\n */\n\nexport function fromRotationTranslationScale(out, q, v, s) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  out[0] = (1 - (yy + zz)) * sx;\n  out[1] = (xy + wz) * sx;\n  out[2] = (xz - wy) * sx;\n  out[3] = 0;\n  out[4] = (xy - wz) * sy;\n  out[5] = (1 - (xx + zz)) * sy;\n  out[6] = (yz + wx) * sy;\n  out[7] = 0;\n  out[8] = (xz + wy) * sz;\n  out[9] = (yz - wx) * sz;\n  out[10] = (1 - (xx + yy)) * sz;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     mat4.translate(dest, origin);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *     mat4.scale(dest, scale)\r\n *     mat4.translate(dest, negativeOrigin);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {vec3} v Translation vector\r\n * @param {vec3} s Scaling vector\r\n * @param {vec3} o The origin vector around which to scale and rotate\r\n * @returns {mat4} out\r\n */\n\nexport function fromRotationTranslationScaleOrigin(out, q, v, s, o) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  var ox = o[0];\n  var oy = o[1];\n  var oz = o[2];\n  var out0 = (1 - (yy + zz)) * sx;\n  var out1 = (xy + wz) * sx;\n  var out2 = (xz - wy) * sx;\n  var out4 = (xy - wz) * sy;\n  var out5 = (1 - (xx + zz)) * sy;\n  var out6 = (yz + wx) * sy;\n  var out8 = (xz + wy) * sz;\n  var out9 = (yz - wx) * sz;\n  var out10 = (1 - (xx + yy)) * sz;\n  out[0] = out0;\n  out[1] = out1;\n  out[2] = out2;\n  out[3] = 0;\n  out[4] = out4;\n  out[5] = out5;\n  out[6] = out6;\n  out[7] = 0;\n  out[8] = out8;\n  out[9] = out9;\n  out[10] = out10;\n  out[11] = 0;\n  out[12] = v[0] + ox - (out0 * ox + out4 * oy + out8 * oz);\n  out[13] = v[1] + oy - (out1 * ox + out5 * oy + out9 * oz);\n  out[14] = v[2] + oz - (out2 * ox + out6 * oy + out10 * oz);\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Calculates a 4x4 matrix from the given quaternion\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat} q Quaternion to create matrix from\r\n *\r\n * @returns {mat4} out\r\n */\n\nexport function fromQuat(out, q) {\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var yx = y * x2;\n  var yy = y * y2;\n  var zx = z * x2;\n  var zy = z * y2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - yy - zz;\n  out[1] = yx + wz;\n  out[2] = zx - wy;\n  out[3] = 0;\n  out[4] = yx - wz;\n  out[5] = 1 - xx - zz;\n  out[6] = zy + wx;\n  out[7] = 0;\n  out[8] = zx + wy;\n  out[9] = zy - wx;\n  out[10] = 1 - xx - yy;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Generates a frustum matrix with the given bounds\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {Number} left Left bound of the frustum\r\n * @param {Number} right Right bound of the frustum\r\n * @param {Number} bottom Bottom bound of the frustum\r\n * @param {Number} top Top bound of the frustum\r\n * @param {Number} near Near bound of the frustum\r\n * @param {Number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\n\nexport function frustum(out, left, right, bottom, top, near, far) {\n  var rl = 1 / (right - left);\n  var tb = 1 / (top - bottom);\n  var nf = 1 / (near - far);\n  out[0] = near * 2 * rl;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = near * 2 * tb;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = (right + left) * rl;\n  out[9] = (top + bottom) * tb;\n  out[10] = (far + near) * nf;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = far * near * 2 * nf;\n  out[15] = 0;\n  return out;\n}\n/**\r\n * Generates a perspective projection matrix with the given bounds.\r\n * Passing null/undefined/no value for far will generate infinite projection matrix.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {number} fovy Vertical field of view in radians\r\n * @param {number} aspect Aspect ratio. typically viewport width/height\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum, can be null or Infinity\r\n * @returns {mat4} out\r\n */\n\nexport function perspective(out, fovy, aspect, near, far) {\n  var f = 1.0 / Math.tan(fovy / 2),\n      nf;\n  out[0] = f / aspect;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = f;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[15] = 0;\n\n  if (far != null && far !== Infinity) {\n    nf = 1 / (near - far);\n    out[10] = (far + near) * nf;\n    out[14] = 2 * far * near * nf;\n  } else {\n    out[10] = -1;\n    out[14] = -2 * near;\n  }\n\n  return out;\n}\n/**\r\n * Generates a perspective projection matrix with the given field of view.\r\n * This is primarily useful for generating projection matrices to be used\r\n * with the still experiemental WebVR API.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {Object} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\n\nexport function perspectiveFromFieldOfView(out, fov, near, far) {\n  var upTan = Math.tan(fov.upDegrees * Math.PI / 180.0);\n  var downTan = Math.tan(fov.downDegrees * Math.PI / 180.0);\n  var leftTan = Math.tan(fov.leftDegrees * Math.PI / 180.0);\n  var rightTan = Math.tan(fov.rightDegrees * Math.PI / 180.0);\n  var xScale = 2.0 / (leftTan + rightTan);\n  var yScale = 2.0 / (upTan + downTan);\n  out[0] = xScale;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  out[4] = 0.0;\n  out[5] = yScale;\n  out[6] = 0.0;\n  out[7] = 0.0;\n  out[8] = -((leftTan - rightTan) * xScale * 0.5);\n  out[9] = (upTan - downTan) * yScale * 0.5;\n  out[10] = far / (near - far);\n  out[11] = -1.0;\n  out[12] = 0.0;\n  out[13] = 0.0;\n  out[14] = far * near / (near - far);\n  out[15] = 0.0;\n  return out;\n}\n/**\r\n * Generates a orthogonal projection matrix with the given bounds\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {number} left Left bound of the frustum\r\n * @param {number} right Right bound of the frustum\r\n * @param {number} bottom Bottom bound of the frustum\r\n * @param {number} top Top bound of the frustum\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\n\nexport function ortho(out, left, right, bottom, top, near, far) {\n  var lr = 1 / (left - right);\n  var bt = 1 / (bottom - top);\n  var nf = 1 / (near - far);\n  out[0] = -2 * lr;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = -2 * bt;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 2 * nf;\n  out[11] = 0;\n  out[12] = (left + right) * lr;\n  out[13] = (top + bottom) * bt;\n  out[14] = (far + near) * nf;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Generates a look-at matrix with the given eye position, focal point, and up axis.\r\n * If you want a matrix that actually makes an object look at another object, you should use targetTo instead.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {vec3} eye Position of the viewer\r\n * @param {vec3} center Point the viewer is looking at\r\n * @param {vec3} up vec3 pointing up\r\n * @returns {mat4} out\r\n */\n\nexport function lookAt(out, eye, center, up) {\n  var x0, x1, x2, y0, y1, y2, z0, z1, z2, len;\n  var eyex = eye[0];\n  var eyey = eye[1];\n  var eyez = eye[2];\n  var upx = up[0];\n  var upy = up[1];\n  var upz = up[2];\n  var centerx = center[0];\n  var centery = center[1];\n  var centerz = center[2];\n\n  if (Math.abs(eyex - centerx) < glMatrix.EPSILON && Math.abs(eyey - centery) < glMatrix.EPSILON && Math.abs(eyez - centerz) < glMatrix.EPSILON) {\n    return identity(out);\n  }\n\n  z0 = eyex - centerx;\n  z1 = eyey - centery;\n  z2 = eyez - centerz;\n  len = 1 / Math.sqrt(z0 * z0 + z1 * z1 + z2 * z2);\n  z0 *= len;\n  z1 *= len;\n  z2 *= len;\n  x0 = upy * z2 - upz * z1;\n  x1 = upz * z0 - upx * z2;\n  x2 = upx * z1 - upy * z0;\n  len = Math.sqrt(x0 * x0 + x1 * x1 + x2 * x2);\n\n  if (!len) {\n    x0 = 0;\n    x1 = 0;\n    x2 = 0;\n  } else {\n    len = 1 / len;\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  y0 = z1 * x2 - z2 * x1;\n  y1 = z2 * x0 - z0 * x2;\n  y2 = z0 * x1 - z1 * x0;\n  len = Math.sqrt(y0 * y0 + y1 * y1 + y2 * y2);\n\n  if (!len) {\n    y0 = 0;\n    y1 = 0;\n    y2 = 0;\n  } else {\n    len = 1 / len;\n    y0 *= len;\n    y1 *= len;\n    y2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = y0;\n  out[2] = z0;\n  out[3] = 0;\n  out[4] = x1;\n  out[5] = y1;\n  out[6] = z1;\n  out[7] = 0;\n  out[8] = x2;\n  out[9] = y2;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);\n  out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);\n  out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Generates a matrix that makes something look at something else.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {vec3} eye Position of the viewer\r\n * @param {vec3} center Point the viewer is looking at\r\n * @param {vec3} up vec3 pointing up\r\n * @returns {mat4} out\r\n */\n\nexport function targetTo(out, eye, target, up) {\n  var eyex = eye[0],\n      eyey = eye[1],\n      eyez = eye[2],\n      upx = up[0],\n      upy = up[1],\n      upz = up[2];\n  var z0 = eyex - target[0],\n      z1 = eyey - target[1],\n      z2 = eyez - target[2];\n  var len = z0 * z0 + z1 * z1 + z2 * z2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    z0 *= len;\n    z1 *= len;\n    z2 *= len;\n  }\n\n  var x0 = upy * z2 - upz * z1,\n      x1 = upz * z0 - upx * z2,\n      x2 = upx * z1 - upy * z0;\n  len = x0 * x0 + x1 * x1 + x2 * x2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = x1;\n  out[2] = x2;\n  out[3] = 0;\n  out[4] = z1 * x2 - z2 * x1;\n  out[5] = z2 * x0 - z0 * x2;\n  out[6] = z0 * x1 - z1 * x0;\n  out[7] = 0;\n  out[8] = z0;\n  out[9] = z1;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = eyex;\n  out[13] = eyey;\n  out[14] = eyez;\n  out[15] = 1;\n  return out;\n}\n;\n/**\r\n * Returns a string representation of a mat4\r\n *\r\n * @param {mat4} a matrix to represent as a string\r\n * @returns {String} string representation of the matrix\r\n */\n\nexport function str(a) {\n  return 'mat4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' + a[4] + ', ' + a[5] + ', ' + a[6] + ', ' + a[7] + ', ' + a[8] + ', ' + a[9] + ', ' + a[10] + ', ' + a[11] + ', ' + a[12] + ', ' + a[13] + ', ' + a[14] + ', ' + a[15] + ')';\n}\n/**\r\n * Returns Frobenius norm of a mat4\r\n *\r\n * @param {mat4} a the matrix to calculate Frobenius norm of\r\n * @returns {Number} Frobenius norm\r\n */\n\nexport function frob(a) {\n  return Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2) + Math.pow(a[9], 2) + Math.pow(a[10], 2) + Math.pow(a[11], 2) + Math.pow(a[12], 2) + Math.pow(a[13], 2) + Math.pow(a[14], 2) + Math.pow(a[15], 2));\n}\n/**\r\n * Adds two mat4's\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the first operand\r\n * @param {mat4} b the second operand\r\n * @returns {mat4} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  out[9] = a[9] + b[9];\n  out[10] = a[10] + b[10];\n  out[11] = a[11] + b[11];\n  out[12] = a[12] + b[12];\n  out[13] = a[13] + b[13];\n  out[14] = a[14] + b[14];\n  out[15] = a[15] + b[15];\n  return out;\n}\n/**\r\n * Subtracts matrix b from matrix a\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the first operand\r\n * @param {mat4} b the second operand\r\n * @returns {mat4} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  out[9] = a[9] - b[9];\n  out[10] = a[10] - b[10];\n  out[11] = a[11] - b[11];\n  out[12] = a[12] - b[12];\n  out[13] = a[13] - b[13];\n  out[14] = a[14] - b[14];\n  out[15] = a[15] - b[15];\n  return out;\n}\n/**\r\n * Multiply each element of the matrix by a scalar.\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to scale\r\n * @param {Number} b amount to scale the matrix's elements by\r\n * @returns {mat4} out\r\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  out[9] = a[9] * b;\n  out[10] = a[10] * b;\n  out[11] = a[11] * b;\n  out[12] = a[12] * b;\n  out[13] = a[13] * b;\n  out[14] = a[14] * b;\n  out[15] = a[15] * b;\n  return out;\n}\n/**\r\n * Adds two mat4's after multiplying each element of the second operand by a scalar value.\r\n *\r\n * @param {mat4} out the receiving vector\r\n * @param {mat4} a the first operand\r\n * @param {mat4} b the second operand\r\n * @param {Number} scale the amount to scale b's elements by before adding\r\n * @returns {mat4} out\r\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  out[6] = a[6] + b[6] * scale;\n  out[7] = a[7] + b[7] * scale;\n  out[8] = a[8] + b[8] * scale;\n  out[9] = a[9] + b[9] * scale;\n  out[10] = a[10] + b[10] * scale;\n  out[11] = a[11] + b[11] * scale;\n  out[12] = a[12] + b[12] * scale;\n  out[13] = a[13] + b[13] * scale;\n  out[14] = a[14] + b[14] * scale;\n  out[15] = a[15] + b[15] * scale;\n  return out;\n}\n/**\r\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {mat4} a The first matrix.\r\n * @param {mat4} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] && a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15];\n}\n/**\r\n * Returns whether or not the matrices have approximately the same elements in the same position.\r\n *\r\n * @param {mat4} a The first matrix.\r\n * @param {mat4} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7];\n  var a8 = a[8],\n      a9 = a[9],\n      a10 = a[10],\n      a11 = a[11];\n  var a12 = a[12],\n      a13 = a[13],\n      a14 = a[14],\n      a15 = a[15];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  var b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7];\n  var b8 = b[8],\n      b9 = b[9],\n      b10 = b[10],\n      b11 = b[11];\n  var b12 = b[12],\n      b13 = b[13],\n      b14 = b[14],\n      b15 = b[15];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8)) && Math.abs(a9 - b9) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a9), Math.abs(b9)) && Math.abs(a10 - b10) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a10), Math.abs(b10)) && Math.abs(a11 - b11) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a11), Math.abs(b11)) && Math.abs(a12 - b12) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a12), Math.abs(b12)) && Math.abs(a13 - b13) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a13), Math.abs(b13)) && Math.abs(a14 - b14) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a14), Math.abs(b14)) && Math.abs(a15 - b15) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a15), Math.abs(b15));\n}\n/**\r\n * Alias for {@link mat4.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link mat4.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;","import * as glMatrix from \"./common.js\";\n/**\r\n * 3 Dimensional Vector\r\n * @module vec3\r\n */\n\n/**\r\n * Creates a new, empty vec3\r\n *\r\n * @returns {vec3} a new 3D vector\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(3);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  return out;\n}\n/**\r\n * Creates a new vec3 initialized with values from an existing vector\r\n *\r\n * @param {vec3} a vector to clone\r\n * @returns {vec3} a new 3D vector\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\r\n * Calculates the length of a vec3\r\n *\r\n * @param {vec3} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\n\nexport function length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return Math.sqrt(x * x + y * y + z * z);\n}\n/**\r\n * Creates a new vec3 initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @returns {vec3} a new 3D vector\r\n */\n\nexport function fromValues(x, y, z) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\r\n * Copy the values from one vec3 to another\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the source vector\r\n * @returns {vec3} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\r\n * Set the components of a vec3 to the given values\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @returns {vec3} out\r\n */\n\nexport function set(out, x, y, z) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\r\n * Adds two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  return out;\n}\n/**\r\n * Subtracts vector b from vector a\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  return out;\n}\n/**\r\n * Multiplies two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  return out;\n}\n/**\r\n * Divides two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  return out;\n}\n/**\r\n * Math.ceil the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to ceil\r\n * @returns {vec3} out\r\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  return out;\n}\n/**\r\n * Math.floor the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to floor\r\n * @returns {vec3} out\r\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  return out;\n}\n/**\r\n * Returns the minimum of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  return out;\n}\n/**\r\n * Returns the maximum of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  return out;\n}\n/**\r\n * Math.round the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to round\r\n * @returns {vec3} out\r\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  return out;\n}\n/**\r\n * Scales a vec3 by a scalar number\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {vec3} out\r\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  return out;\n}\n/**\r\n * Adds two vec3's after scaling the second operand by a scalar value\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @param {Number} scale the amount to scale b by before adding\r\n * @returns {vec3} out\r\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  return out;\n}\n/**\r\n * Calculates the euclidian distance between two vec3's\r\n *\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {Number} distance between a and b\r\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return Math.sqrt(x * x + y * y + z * z);\n}\n/**\r\n * Calculates the squared euclidian distance between two vec3's\r\n *\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {Number} squared distance between a and b\r\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return x * x + y * y + z * z;\n}\n/**\r\n * Calculates the squared length of a vec3\r\n *\r\n * @param {vec3} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n */\n\nexport function squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return x * x + y * y + z * z;\n}\n/**\r\n * Negates the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to negate\r\n * @returns {vec3} out\r\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  return out;\n}\n/**\r\n * Returns the inverse of the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to invert\r\n * @returns {vec3} out\r\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  return out;\n}\n/**\r\n * Normalize a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to normalize\r\n * @returns {vec3} out\r\n */\n\nexport function normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var len = x * x + y * y + z * z;\n\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = a[0] * len;\n  out[1] = a[1] * len;\n  out[2] = a[2] * len;\n  return out;\n}\n/**\r\n * Calculates the dot product of two vec3's\r\n *\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\n/**\r\n * Computes the cross product of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function cross(out, a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2];\n  out[0] = ay * bz - az * by;\n  out[1] = az * bx - ax * bz;\n  out[2] = ax * by - ay * bx;\n  return out;\n}\n/**\r\n * Performs a linear interpolation between two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  return out;\n}\n/**\r\n * Performs a hermite interpolation with two control points\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @param {vec3} c the third operand\r\n * @param {vec3} d the fourth operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\n\nexport function hermite(out, a, b, c, d, t) {\n  var factorTimes2 = t * t;\n  var factor1 = factorTimes2 * (2 * t - 3) + 1;\n  var factor2 = factorTimes2 * (t - 2) + t;\n  var factor3 = factorTimes2 * (t - 1);\n  var factor4 = factorTimes2 * (3 - 2 * t);\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\r\n * Performs a bezier interpolation with two control points\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @param {vec3} c the third operand\r\n * @param {vec3} d the fourth operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\n\nexport function bezier(out, a, b, c, d, t) {\n  var inverseFactor = 1 - t;\n  var inverseFactorTimesTwo = inverseFactor * inverseFactor;\n  var factorTimes2 = t * t;\n  var factor1 = inverseFactorTimesTwo * inverseFactor;\n  var factor2 = 3 * t * inverseFactorTimesTwo;\n  var factor3 = 3 * factorTimes2 * inverseFactor;\n  var factor4 = factorTimes2 * t;\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\r\n * Generates a random vector with the given scale\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\r\n * @returns {vec3} out\r\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0;\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  var z = glMatrix.RANDOM() * 2.0 - 1.0;\n  var zScale = Math.sqrt(1.0 - z * z) * scale;\n  out[0] = Math.cos(r) * zScale;\n  out[1] = Math.sin(r) * zScale;\n  out[2] = z * scale;\n  return out;\n}\n/**\r\n * Transforms the vec3 with a mat4.\r\n * 4th vector component is implicitly '1'\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to transform\r\n * @param {mat4} m matrix to transform with\r\n * @returns {vec3} out\r\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var w = m[3] * x + m[7] * y + m[11] * z + m[15];\n  w = w || 1.0;\n  out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\n  out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\n  out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\n  return out;\n}\n/**\r\n * Transforms the vec3 with a mat3.\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to transform\r\n * @param {mat3} m the 3x3 matrix to transform with\r\n * @returns {vec3} out\r\n */\n\nexport function transformMat3(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  out[0] = x * m[0] + y * m[3] + z * m[6];\n  out[1] = x * m[1] + y * m[4] + z * m[7];\n  out[2] = x * m[2] + y * m[5] + z * m[8];\n  return out;\n}\n/**\r\n * Transforms the vec3 with a quat\r\n * Can also be used for dual quaternions. (Multiply it with the real part)\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to transform\r\n * @param {quat} q quaternion to transform with\r\n * @returns {vec3} out\r\n */\n\nexport function transformQuat(out, a, q) {\n  // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3];\n  var x = a[0],\n      y = a[1],\n      z = a[2]; // var qvec = [qx, qy, qz];\n  // var uv = vec3.cross([], qvec, a);\n\n  var uvx = qy * z - qz * y,\n      uvy = qz * x - qx * z,\n      uvz = qx * y - qy * x; // var uuv = vec3.cross([], qvec, uv);\n\n  var uuvx = qy * uvz - qz * uvy,\n      uuvy = qz * uvx - qx * uvz,\n      uuvz = qx * uvy - qy * uvx; // vec3.scale(uv, uv, 2 * w);\n\n  var w2 = qw * 2;\n  uvx *= w2;\n  uvy *= w2;\n  uvz *= w2; // vec3.scale(uuv, uuv, 2);\n\n  uuvx *= 2;\n  uuvy *= 2;\n  uuvz *= 2; // return vec3.add(out, a, vec3.add(out, uv, uuv));\n\n  out[0] = x + uvx + uuvx;\n  out[1] = y + uvy + uuvy;\n  out[2] = z + uvz + uuvz;\n  return out;\n}\n/**\r\n * Rotate a 3D vector around the x-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {vec3} a The vec3 point to rotate\r\n * @param {vec3} b The origin of the rotation\r\n * @param {Number} c The angle of rotation\r\n * @returns {vec3} out\r\n */\n\nexport function rotateX(out, a, b, c) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0];\n  r[1] = p[1] * Math.cos(c) - p[2] * Math.sin(c);\n  r[2] = p[1] * Math.sin(c) + p[2] * Math.cos(c); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\r\n * Rotate a 3D vector around the y-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {vec3} a The vec3 point to rotate\r\n * @param {vec3} b The origin of the rotation\r\n * @param {Number} c The angle of rotation\r\n * @returns {vec3} out\r\n */\n\nexport function rotateY(out, a, b, c) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[2] * Math.sin(c) + p[0] * Math.cos(c);\n  r[1] = p[1];\n  r[2] = p[2] * Math.cos(c) - p[0] * Math.sin(c); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\r\n * Rotate a 3D vector around the z-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {vec3} a The vec3 point to rotate\r\n * @param {vec3} b The origin of the rotation\r\n * @param {Number} c The angle of rotation\r\n * @returns {vec3} out\r\n */\n\nexport function rotateZ(out, a, b, c) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0] * Math.cos(c) - p[1] * Math.sin(c);\n  r[1] = p[0] * Math.sin(c) + p[1] * Math.cos(c);\n  r[2] = p[2]; //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\r\n * Get the angle between two 3D vectors\r\n * @param {vec3} a The first operand\r\n * @param {vec3} b The second operand\r\n * @returns {Number} The angle in radians\r\n */\n\nexport function angle(a, b) {\n  var tempA = fromValues(a[0], a[1], a[2]);\n  var tempB = fromValues(b[0], b[1], b[2]);\n  normalize(tempA, tempA);\n  normalize(tempB, tempB);\n  var cosine = dot(tempA, tempB);\n\n  if (cosine > 1.0) {\n    return 0;\n  } else if (cosine < -1.0) {\n    return Math.PI;\n  } else {\n    return Math.acos(cosine);\n  }\n}\n/**\r\n * Set the components of a vec3 to zero\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @returns {vec3} out\r\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  return out;\n}\n/**\r\n * Returns a string representation of a vector\r\n *\r\n * @param {vec3} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\n\nexport function str(a) {\n  return 'vec3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ')';\n}\n/**\r\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {vec3} a The first vector.\r\n * @param {vec3} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n}\n/**\r\n * Returns whether or not the vectors have approximately the same elements in the same position.\r\n *\r\n * @param {vec3} a The first vector.\r\n * @param {vec3} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2));\n}\n/**\r\n * Alias for {@link vec3.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;\n/**\r\n * Alias for {@link vec3.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link vec3.divide}\r\n * @function\r\n */\n\nexport var div = divide;\n/**\r\n * Alias for {@link vec3.distance}\r\n * @function\r\n */\n\nexport var dist = distance;\n/**\r\n * Alias for {@link vec3.squaredDistance}\r\n * @function\r\n */\n\nexport var sqrDist = squaredDistance;\n/**\r\n * Alias for {@link vec3.length}\r\n * @function\r\n */\n\nexport var len = length;\n/**\r\n * Alias for {@link vec3.squaredLength}\r\n * @function\r\n */\n\nexport var sqrLen = squaredLength;\n/**\r\n * Perform some operation over an array of vec3s.\r\n *\r\n * @param {Array} a the array of vectors to iterate over\r\n * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed\r\n * @param {Number} offset Number of elements to skip at the beginning of the array\r\n * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array\r\n * @param {Function} fn Function to call for each vector in the array\r\n * @param {Object} [arg] additional argument to pass to fn\r\n * @returns {Array} a\r\n * @function\r\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 3;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n    }\n\n    return a;\n  };\n}();","import * as glMatrix from \"./common.js\";\n/**\r\n * 4 Dimensional Vector\r\n * @module vec4\r\n */\n\n/**\r\n * Creates a new, empty vec4\r\n *\r\n * @returns {vec4} a new 4D vector\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(4);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n  }\n\n  return out;\n}\n/**\r\n * Creates a new vec4 initialized with values from an existing vector\r\n *\r\n * @param {vec4} a vector to clone\r\n * @returns {vec4} a new 4D vector\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\r\n * Creates a new vec4 initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {vec4} a new 4D vector\r\n */\n\nexport function fromValues(x, y, z, w) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n/**\r\n * Copy the values from one vec4 to another\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the source vector\r\n * @returns {vec4} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\r\n * Set the components of a vec4 to the given values\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {vec4} out\r\n */\n\nexport function set(out, x, y, z, w) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n/**\r\n * Adds two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  return out;\n}\n/**\r\n * Subtracts vector b from vector a\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  return out;\n}\n/**\r\n * Multiplies two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  out[3] = a[3] * b[3];\n  return out;\n}\n/**\r\n * Divides two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  out[3] = a[3] / b[3];\n  return out;\n}\n/**\r\n * Math.ceil the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to ceil\r\n * @returns {vec4} out\r\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  out[3] = Math.ceil(a[3]);\n  return out;\n}\n/**\r\n * Math.floor the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to floor\r\n * @returns {vec4} out\r\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  out[3] = Math.floor(a[3]);\n  return out;\n}\n/**\r\n * Returns the minimum of two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  out[3] = Math.min(a[3], b[3]);\n  return out;\n}\n/**\r\n * Returns the maximum of two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  out[3] = Math.max(a[3], b[3]);\n  return out;\n}\n/**\r\n * Math.round the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to round\r\n * @returns {vec4} out\r\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  out[3] = Math.round(a[3]);\n  return out;\n}\n/**\r\n * Scales a vec4 by a scalar number\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {vec4} out\r\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  return out;\n}\n/**\r\n * Adds two vec4's after scaling the second operand by a scalar value\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @param {Number} scale the amount to scale b by before adding\r\n * @returns {vec4} out\r\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  return out;\n}\n/**\r\n * Calculates the euclidian distance between two vec4's\r\n *\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {Number} distance between a and b\r\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  var w = b[3] - a[3];\n  return Math.sqrt(x * x + y * y + z * z + w * w);\n}\n/**\r\n * Calculates the squared euclidian distance between two vec4's\r\n *\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {Number} squared distance between a and b\r\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  var w = b[3] - a[3];\n  return x * x + y * y + z * z + w * w;\n}\n/**\r\n * Calculates the length of a vec4\r\n *\r\n * @param {vec4} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\n\nexport function length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  return Math.sqrt(x * x + y * y + z * z + w * w);\n}\n/**\r\n * Calculates the squared length of a vec4\r\n *\r\n * @param {vec4} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n */\n\nexport function squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  return x * x + y * y + z * z + w * w;\n}\n/**\r\n * Negates the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to negate\r\n * @returns {vec4} out\r\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = -a[3];\n  return out;\n}\n/**\r\n * Returns the inverse of the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to invert\r\n * @returns {vec4} out\r\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  out[3] = 1.0 / a[3];\n  return out;\n}\n/**\r\n * Normalize a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to normalize\r\n * @returns {vec4} out\r\n */\n\nexport function normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  var len = x * x + y * y + z * z + w * w;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = x * len;\n  out[1] = y * len;\n  out[2] = z * len;\n  out[3] = w * len;\n  return out;\n}\n/**\r\n * Calculates the dot product of two vec4's\r\n *\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\n}\n/**\r\n * Returns the cross-product of three vectors in a 4-dimensional space\r\n *\r\n * @param {vec4} result the receiving vector\r\n * @param {vec4} U the first vector\r\n * @param {vec4} V the second vector\r\n * @param {vec4} W the third vector\r\n * @returns {vec4} result\r\n */\n\nexport function cross(out, u, v, w) {\n  var A = v[0] * w[1] - v[1] * w[0],\n      B = v[0] * w[2] - v[2] * w[0],\n      C = v[0] * w[3] - v[3] * w[0],\n      D = v[1] * w[2] - v[2] * w[1],\n      E = v[1] * w[3] - v[3] * w[1],\n      F = v[2] * w[3] - v[3] * w[2];\n  var G = u[0];\n  var H = u[1];\n  var I = u[2];\n  var J = u[3];\n  out[0] = H * F - I * E + J * D;\n  out[1] = -(G * F) + I * C - J * B;\n  out[2] = G * E - H * C + J * A;\n  out[3] = -(G * D) + H * B - I * A;\n  return out;\n}\n;\n/**\r\n * Performs a linear interpolation between two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec4} out\r\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  var aw = a[3];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  out[3] = aw + t * (b[3] - aw);\n  return out;\n}\n/**\r\n * Generates a random vector with the given scale\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\r\n * @returns {vec4} out\r\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0; // Marsaglia, George. Choosing a Point from the Surface of a\n  // Sphere. Ann. Math. Statist. 43 (1972), no. 2, 645--646.\n  // http://projecteuclid.org/euclid.aoms/1177692644;\n\n  var v1, v2, v3, v4;\n  var s1, s2;\n\n  do {\n    v1 = glMatrix.RANDOM() * 2 - 1;\n    v2 = glMatrix.RANDOM() * 2 - 1;\n    s1 = v1 * v1 + v2 * v2;\n  } while (s1 >= 1);\n\n  do {\n    v3 = glMatrix.RANDOM() * 2 - 1;\n    v4 = glMatrix.RANDOM() * 2 - 1;\n    s2 = v3 * v3 + v4 * v4;\n  } while (s2 >= 1);\n\n  var d = Math.sqrt((1 - s1) / s2);\n  out[0] = scale * v1;\n  out[1] = scale * v2;\n  out[2] = scale * v3 * d;\n  out[3] = scale * v4 * d;\n  return out;\n}\n/**\r\n * Transforms the vec4 with a mat4.\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the vector to transform\r\n * @param {mat4} m matrix to transform with\r\n * @returns {vec4} out\r\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2],\n      w = a[3];\n  out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;\n  out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;\n  out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;\n  out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;\n  return out;\n}\n/**\r\n * Transforms the vec4 with a quat\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the vector to transform\r\n * @param {quat} q quaternion to transform with\r\n * @returns {vec4} out\r\n */\n\nexport function transformQuat(out, a, q) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3]; // calculate quat * vec\n\n  var ix = qw * x + qy * z - qz * y;\n  var iy = qw * y + qz * x - qx * z;\n  var iz = qw * z + qx * y - qy * x;\n  var iw = -qx * x - qy * y - qz * z; // calculate result * inverse quat\n\n  out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n  out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n  out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n  out[3] = a[3];\n  return out;\n}\n/**\r\n * Set the components of a vec4 to zero\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @returns {vec4} out\r\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  return out;\n}\n/**\r\n * Returns a string representation of a vector\r\n *\r\n * @param {vec4} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\n\nexport function str(a) {\n  return 'vec4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';\n}\n/**\r\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {vec4} a The first vector.\r\n * @param {vec4} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n}\n/**\r\n * Returns whether or not the vectors have approximately the same elements in the same position.\r\n *\r\n * @param {vec4} a The first vector.\r\n * @param {vec4} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3));\n}\n/**\r\n * Alias for {@link vec4.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;\n/**\r\n * Alias for {@link vec4.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link vec4.divide}\r\n * @function\r\n */\n\nexport var div = divide;\n/**\r\n * Alias for {@link vec4.distance}\r\n * @function\r\n */\n\nexport var dist = distance;\n/**\r\n * Alias for {@link vec4.squaredDistance}\r\n * @function\r\n */\n\nexport var sqrDist = squaredDistance;\n/**\r\n * Alias for {@link vec4.length}\r\n * @function\r\n */\n\nexport var len = length;\n/**\r\n * Alias for {@link vec4.squaredLength}\r\n * @function\r\n */\n\nexport var sqrLen = squaredLength;\n/**\r\n * Perform some operation over an array of vec4s.\r\n *\r\n * @param {Array} a the array of vectors to iterate over\r\n * @param {Number} stride Number of elements between the start of each vec4. If 0 assumes tightly packed\r\n * @param {Number} offset Number of elements to skip at the beginning of the array\r\n * @param {Number} count Number of vec4s to iterate over. If 0 iterates over entire array\r\n * @param {Function} fn Function to call for each vector in the array\r\n * @param {Object} [arg] additional argument to pass to fn\r\n * @returns {Array} a\r\n * @function\r\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 4;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      vec[3] = a[i + 3];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n      a[i + 3] = vec[3];\n    }\n\n    return a;\n  };\n}();","import * as glMatrix from \"./common.js\";\nimport * as mat3 from \"./mat3.js\";\nimport * as vec3 from \"./vec3.js\";\nimport * as vec4 from \"./vec4.js\";\n/**\r\n * Quaternion\r\n * @module quat\r\n */\n\n/**\r\n * Creates a new identity quat\r\n *\r\n * @returns {quat} a new quaternion\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(4);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  out[3] = 1;\n  return out;\n}\n/**\r\n * Set a quat to the identity quaternion\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @returns {quat} out\r\n */\n\nexport function identity(out) {\n  out[0] = 0;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  return out;\n}\n/**\r\n * Sets a quat from the given angle and rotation axis,\r\n * then returns it.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {vec3} axis the axis around which to rotate\r\n * @param {Number} rad the angle in radians\r\n * @returns {quat} out\r\n **/\n\nexport function setAxisAngle(out, axis, rad) {\n  rad = rad * 0.5;\n  var s = Math.sin(rad);\n  out[0] = s * axis[0];\n  out[1] = s * axis[1];\n  out[2] = s * axis[2];\n  out[3] = Math.cos(rad);\n  return out;\n}\n/**\r\n * Gets the rotation axis and angle for a given\r\n *  quaternion. If a quaternion is created with\r\n *  setAxisAngle, this method will return the same\r\n *  values as providied in the original parameter list\r\n *  OR functionally equivalent values.\r\n * Example: The quaternion formed by axis [0, 0, 1] and\r\n *  angle -90 is the same as the quaternion formed by\r\n *  [0, 0, 1] and 270. This method favors the latter.\r\n * @param  {vec3} out_axis  Vector receiving the axis of rotation\r\n * @param  {quat} q     Quaternion to be decomposed\r\n * @return {Number}     Angle, in radians, of the rotation\r\n */\n\nexport function getAxisAngle(out_axis, q) {\n  var rad = Math.acos(q[3]) * 2.0;\n  var s = Math.sin(rad / 2.0);\n\n  if (s > glMatrix.EPSILON) {\n    out_axis[0] = q[0] / s;\n    out_axis[1] = q[1] / s;\n    out_axis[2] = q[2] / s;\n  } else {\n    // If s is zero, return any axis (no rotation - axis does not matter)\n    out_axis[0] = 1;\n    out_axis[1] = 0;\n    out_axis[2] = 0;\n  }\n\n  return rad;\n}\n/**\r\n * Multiplies two quat's\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @returns {quat} out\r\n */\n\nexport function multiply(out, a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2],\n      bw = b[3];\n  out[0] = ax * bw + aw * bx + ay * bz - az * by;\n  out[1] = ay * bw + aw * by + az * bx - ax * bz;\n  out[2] = az * bw + aw * bz + ax * by - ay * bx;\n  out[3] = aw * bw - ax * bx - ay * by - az * bz;\n  return out;\n}\n/**\r\n * Rotates a quaternion by the given angle about the X axis\r\n *\r\n * @param {quat} out quat receiving operation result\r\n * @param {quat} a quat to rotate\r\n * @param {number} rad angle (in radians) to rotate\r\n * @returns {quat} out\r\n */\n\nexport function rotateX(out, a, rad) {\n  rad *= 0.5;\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bx = Math.sin(rad),\n      bw = Math.cos(rad);\n  out[0] = ax * bw + aw * bx;\n  out[1] = ay * bw + az * bx;\n  out[2] = az * bw - ay * bx;\n  out[3] = aw * bw - ax * bx;\n  return out;\n}\n/**\r\n * Rotates a quaternion by the given angle about the Y axis\r\n *\r\n * @param {quat} out quat receiving operation result\r\n * @param {quat} a quat to rotate\r\n * @param {number} rad angle (in radians) to rotate\r\n * @returns {quat} out\r\n */\n\nexport function rotateY(out, a, rad) {\n  rad *= 0.5;\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var by = Math.sin(rad),\n      bw = Math.cos(rad);\n  out[0] = ax * bw - az * by;\n  out[1] = ay * bw + aw * by;\n  out[2] = az * bw + ax * by;\n  out[3] = aw * bw - ay * by;\n  return out;\n}\n/**\r\n * Rotates a quaternion by the given angle about the Z axis\r\n *\r\n * @param {quat} out quat receiving operation result\r\n * @param {quat} a quat to rotate\r\n * @param {number} rad angle (in radians) to rotate\r\n * @returns {quat} out\r\n */\n\nexport function rotateZ(out, a, rad) {\n  rad *= 0.5;\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bz = Math.sin(rad),\n      bw = Math.cos(rad);\n  out[0] = ax * bw + ay * bz;\n  out[1] = ay * bw - ax * bz;\n  out[2] = az * bw + aw * bz;\n  out[3] = aw * bw - az * bz;\n  return out;\n}\n/**\r\n * Calculates the W component of a quat from the X, Y, and Z components.\r\n * Assumes that quaternion is 1 unit in length.\r\n * Any existing W component will be ignored.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a quat to calculate W component of\r\n * @returns {quat} out\r\n */\n\nexport function calculateW(out, a) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z));\n  return out;\n}\n/**\r\n * Performs a spherical linear interpolation between two quat\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {quat} out\r\n */\n\nexport function slerp(out, a, b, t) {\n  // benchmarks:\n  //    http://jsperf.com/quaternion-slerp-implementations\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2],\n      bw = b[3];\n  var omega, cosom, sinom, scale0, scale1; // calc cosine\n\n  cosom = ax * bx + ay * by + az * bz + aw * bw; // adjust signs (if necessary)\n\n  if (cosom < 0.0) {\n    cosom = -cosom;\n    bx = -bx;\n    by = -by;\n    bz = -bz;\n    bw = -bw;\n  } // calculate coefficients\n\n\n  if (1.0 - cosom > glMatrix.EPSILON) {\n    // standard case (slerp)\n    omega = Math.acos(cosom);\n    sinom = Math.sin(omega);\n    scale0 = Math.sin((1.0 - t) * omega) / sinom;\n    scale1 = Math.sin(t * omega) / sinom;\n  } else {\n    // \"from\" and \"to\" quaternions are very close\n    //  ... so we can do a linear interpolation\n    scale0 = 1.0 - t;\n    scale1 = t;\n  } // calculate final values\n\n\n  out[0] = scale0 * ax + scale1 * bx;\n  out[1] = scale0 * ay + scale1 * by;\n  out[2] = scale0 * az + scale1 * bz;\n  out[3] = scale0 * aw + scale1 * bw;\n  return out;\n}\n/**\r\n * Generates a random quaternion\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @returns {quat} out\r\n */\n\nexport function random(out) {\n  // Implementation of http://planning.cs.uiuc.edu/node198.html\n  // TODO: Calling random 3 times is probably not the fastest solution\n  var u1 = glMatrix.RANDOM();\n  var u2 = glMatrix.RANDOM();\n  var u3 = glMatrix.RANDOM();\n  var sqrt1MinusU1 = Math.sqrt(1 - u1);\n  var sqrtU1 = Math.sqrt(u1);\n  out[0] = sqrt1MinusU1 * Math.sin(2.0 * Math.PI * u2);\n  out[1] = sqrt1MinusU1 * Math.cos(2.0 * Math.PI * u2);\n  out[2] = sqrtU1 * Math.sin(2.0 * Math.PI * u3);\n  out[3] = sqrtU1 * Math.cos(2.0 * Math.PI * u3);\n  return out;\n}\n/**\r\n * Calculates the inverse of a quat\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a quat to calculate inverse of\r\n * @returns {quat} out\r\n */\n\nexport function invert(out, a) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var dot = a0 * a0 + a1 * a1 + a2 * a2 + a3 * a3;\n  var invDot = dot ? 1.0 / dot : 0; // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0\n\n  out[0] = -a0 * invDot;\n  out[1] = -a1 * invDot;\n  out[2] = -a2 * invDot;\n  out[3] = a3 * invDot;\n  return out;\n}\n/**\r\n * Calculates the conjugate of a quat\r\n * If the quaternion is normalized, this function is faster than quat.inverse and produces the same result.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a quat to calculate conjugate of\r\n * @returns {quat} out\r\n */\n\nexport function conjugate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\r\n * Creates a quaternion from the given 3x3 rotation matrix.\r\n *\r\n * NOTE: The resultant quaternion is not normalized, so you should be sure\r\n * to renormalize the quaternion yourself where necessary.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {mat3} m rotation matrix\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport function fromMat3(out, m) {\n  // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes\n  // article \"Quaternion Calculus and Fast Animation\".\n  var fTrace = m[0] + m[4] + m[8];\n  var fRoot;\n\n  if (fTrace > 0.0) {\n    // |w| > 1/2, may as well choose w > 1/2\n    fRoot = Math.sqrt(fTrace + 1.0); // 2w\n\n    out[3] = 0.5 * fRoot;\n    fRoot = 0.5 / fRoot; // 1/(4w)\n\n    out[0] = (m[5] - m[7]) * fRoot;\n    out[1] = (m[6] - m[2]) * fRoot;\n    out[2] = (m[1] - m[3]) * fRoot;\n  } else {\n    // |w| <= 1/2\n    var i = 0;\n    if (m[4] > m[0]) i = 1;\n    if (m[8] > m[i * 3 + i]) i = 2;\n    var j = (i + 1) % 3;\n    var k = (i + 2) % 3;\n    fRoot = Math.sqrt(m[i * 3 + i] - m[j * 3 + j] - m[k * 3 + k] + 1.0);\n    out[i] = 0.5 * fRoot;\n    fRoot = 0.5 / fRoot;\n    out[3] = (m[j * 3 + k] - m[k * 3 + j]) * fRoot;\n    out[j] = (m[j * 3 + i] + m[i * 3 + j]) * fRoot;\n    out[k] = (m[k * 3 + i] + m[i * 3 + k]) * fRoot;\n  }\n\n  return out;\n}\n/**\r\n * Creates a quaternion from the given euler angle x, y, z.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {x} Angle to rotate around X axis in degrees.\r\n * @param {y} Angle to rotate around Y axis in degrees.\r\n * @param {z} Angle to rotate around Z axis in degrees.\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport function fromEuler(out, x, y, z) {\n  var halfToRad = 0.5 * Math.PI / 180.0;\n  x *= halfToRad;\n  y *= halfToRad;\n  z *= halfToRad;\n  var sx = Math.sin(x);\n  var cx = Math.cos(x);\n  var sy = Math.sin(y);\n  var cy = Math.cos(y);\n  var sz = Math.sin(z);\n  var cz = Math.cos(z);\n  out[0] = sx * cy * cz - cx * sy * sz;\n  out[1] = cx * sy * cz + sx * cy * sz;\n  out[2] = cx * cy * sz - sx * sy * cz;\n  out[3] = cx * cy * cz + sx * sy * sz;\n  return out;\n}\n/**\r\n * Returns a string representation of a quatenion\r\n *\r\n * @param {quat} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\n\nexport function str(a) {\n  return 'quat(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';\n}\n/**\r\n * Creates a new quat initialized with values from an existing quaternion\r\n *\r\n * @param {quat} a quaternion to clone\r\n * @returns {quat} a new quaternion\r\n * @function\r\n */\n\nexport var clone = vec4.clone;\n/**\r\n * Creates a new quat initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {quat} a new quaternion\r\n * @function\r\n */\n\nexport var fromValues = vec4.fromValues;\n/**\r\n * Copy the values from one quat to another\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the source quaternion\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport var copy = vec4.copy;\n/**\r\n * Set the components of a quat to the given values\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport var set = vec4.set;\n/**\r\n * Adds two quat's\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport var add = vec4.add;\n/**\r\n * Alias for {@link quat.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Scales a quat by a scalar number\r\n *\r\n * @param {quat} out the receiving vector\r\n * @param {quat} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport var scale = vec4.scale;\n/**\r\n * Calculates the dot product of two quat's\r\n *\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @returns {Number} dot product of a and b\r\n * @function\r\n */\n\nexport var dot = vec4.dot;\n/**\r\n * Performs a linear interpolation between two quat's\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport var lerp = vec4.lerp;\n/**\r\n * Calculates the length of a quat\r\n *\r\n * @param {quat} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\n\nexport var length = vec4.length;\n/**\r\n * Alias for {@link quat.length}\r\n * @function\r\n */\n\nexport var len = length;\n/**\r\n * Calculates the squared length of a quat\r\n *\r\n * @param {quat} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n * @function\r\n */\n\nexport var squaredLength = vec4.squaredLength;\n/**\r\n * Alias for {@link quat.squaredLength}\r\n * @function\r\n */\n\nexport var sqrLen = squaredLength;\n/**\r\n * Normalize a quat\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a quaternion to normalize\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport var normalize = vec4.normalize;\n/**\r\n * Returns whether or not the quaternions have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {quat} a The first quaternion.\r\n * @param {quat} b The second quaternion.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport var exactEquals = vec4.exactEquals;\n/**\r\n * Returns whether or not the quaternions have approximately the same elements in the same position.\r\n *\r\n * @param {quat} a The first vector.\r\n * @param {quat} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport var equals = vec4.equals;\n/**\r\n * Sets a quaternion to represent the shortest rotation from one\r\n * vector to another.\r\n *\r\n * Both vectors are assumed to be unit length.\r\n *\r\n * @param {quat} out the receiving quaternion.\r\n * @param {vec3} a the initial vector\r\n * @param {vec3} b the destination vector\r\n * @returns {quat} out\r\n */\n\nexport var rotationTo = function () {\n  var tmpvec3 = vec3.create();\n  var xUnitVec3 = vec3.fromValues(1, 0, 0);\n  var yUnitVec3 = vec3.fromValues(0, 1, 0);\n  return function (out, a, b) {\n    var dot = vec3.dot(a, b);\n\n    if (dot < -0.999999) {\n      vec3.cross(tmpvec3, xUnitVec3, a);\n      if (vec3.len(tmpvec3) < 0.000001) vec3.cross(tmpvec3, yUnitVec3, a);\n      vec3.normalize(tmpvec3, tmpvec3);\n      setAxisAngle(out, tmpvec3, Math.PI);\n      return out;\n    } else if (dot > 0.999999) {\n      out[0] = 0;\n      out[1] = 0;\n      out[2] = 0;\n      out[3] = 1;\n      return out;\n    } else {\n      vec3.cross(tmpvec3, a, b);\n      out[0] = tmpvec3[0];\n      out[1] = tmpvec3[1];\n      out[2] = tmpvec3[2];\n      out[3] = 1 + dot;\n      return normalize(out, out);\n    }\n  };\n}();\n/**\r\n * Performs a spherical linear interpolation with two control points\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @param {quat} c the third operand\r\n * @param {quat} d the fourth operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {quat} out\r\n */\n\nexport var sqlerp = function () {\n  var temp1 = create();\n  var temp2 = create();\n  return function (out, a, b, c, d, t) {\n    slerp(temp1, a, d, t);\n    slerp(temp2, b, c, t);\n    slerp(out, temp1, temp2, 2 * t * (1 - t));\n    return out;\n  };\n}();\n/**\r\n * Sets the specified quaternion with values corresponding to the given\r\n * axes. Each axis is a vec3 and is expected to be unit length and\r\n * perpendicular to all other specified axes.\r\n *\r\n * @param {vec3} view  the vector representing the viewing direction\r\n * @param {vec3} right the vector representing the local \"right\" direction\r\n * @param {vec3} up    the vector representing the local \"up\" direction\r\n * @returns {quat} out\r\n */\n\nexport var setAxes = function () {\n  var matr = mat3.create();\n  return function (out, view, right, up) {\n    matr[0] = right[0];\n    matr[3] = right[1];\n    matr[6] = right[2];\n    matr[1] = up[0];\n    matr[4] = up[1];\n    matr[7] = up[2];\n    matr[2] = -view[0];\n    matr[5] = -view[1];\n    matr[8] = -view[2];\n    return normalize(out, fromMat3(out, matr));\n  };\n}();","import * as glMatrix from \"./common.js\";\nimport * as quat from \"./quat.js\";\nimport * as mat4 from \"./mat4.js\";\n/**\r\n * Dual Quaternion<br>\r\n * Format: [real, dual]<br>\r\n * Quaternion format: XYZW<br>\r\n * Make sure to have normalized dual quaternions, otherwise the functions may not work as intended.<br>\r\n * @module quat2\r\n */\n\n/**\r\n * Creates a new identity dual quat\r\n *\r\n * @returns {quat2} a new dual quaternion [real -> rotation, dual -> translation]\r\n */\n\nexport function create() {\n  var dq = new glMatrix.ARRAY_TYPE(8);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    dq[0] = 0;\n    dq[1] = 0;\n    dq[2] = 0;\n    dq[4] = 0;\n    dq[5] = 0;\n    dq[6] = 0;\n    dq[7] = 0;\n  }\n\n  dq[3] = 1;\n  return dq;\n}\n/**\r\n * Creates a new quat initialized with values from an existing quaternion\r\n *\r\n * @param {quat2} a dual quaternion to clone\r\n * @returns {quat2} new dual quaternion\r\n * @function\r\n */\n\nexport function clone(a) {\n  var dq = new glMatrix.ARRAY_TYPE(8);\n  dq[0] = a[0];\n  dq[1] = a[1];\n  dq[2] = a[2];\n  dq[3] = a[3];\n  dq[4] = a[4];\n  dq[5] = a[5];\n  dq[6] = a[6];\n  dq[7] = a[7];\n  return dq;\n}\n/**\r\n * Creates a new dual quat initialized with the given values\r\n *\r\n * @param {Number} x1 X component\r\n * @param {Number} y1 Y component\r\n * @param {Number} z1 Z component\r\n * @param {Number} w1 W component\r\n * @param {Number} x2 X component\r\n * @param {Number} y2 Y component\r\n * @param {Number} z2 Z component\r\n * @param {Number} w2 W component\r\n * @returns {quat2} new dual quaternion\r\n * @function\r\n */\n\nexport function fromValues(x1, y1, z1, w1, x2, y2, z2, w2) {\n  var dq = new glMatrix.ARRAY_TYPE(8);\n  dq[0] = x1;\n  dq[1] = y1;\n  dq[2] = z1;\n  dq[3] = w1;\n  dq[4] = x2;\n  dq[5] = y2;\n  dq[6] = z2;\n  dq[7] = w2;\n  return dq;\n}\n/**\r\n * Creates a new dual quat from the given values (quat and translation)\r\n *\r\n * @param {Number} x1 X component\r\n * @param {Number} y1 Y component\r\n * @param {Number} z1 Z component\r\n * @param {Number} w1 W component\r\n * @param {Number} x2 X component (translation)\r\n * @param {Number} y2 Y component (translation)\r\n * @param {Number} z2 Z component (translation)\r\n * @returns {quat2} new dual quaternion\r\n * @function\r\n */\n\nexport function fromRotationTranslationValues(x1, y1, z1, w1, x2, y2, z2) {\n  var dq = new glMatrix.ARRAY_TYPE(8);\n  dq[0] = x1;\n  dq[1] = y1;\n  dq[2] = z1;\n  dq[3] = w1;\n  var ax = x2 * 0.5,\n      ay = y2 * 0.5,\n      az = z2 * 0.5;\n  dq[4] = ax * w1 + ay * z1 - az * y1;\n  dq[5] = ay * w1 + az * x1 - ax * z1;\n  dq[6] = az * w1 + ax * y1 - ay * x1;\n  dq[7] = -ax * x1 - ay * y1 - az * z1;\n  return dq;\n}\n/**\r\n * Creates a dual quat from a quaternion and a translation\r\n *\r\n * @param {quat2} dual quaternion receiving operation result\r\n * @param {quat} q quaternion\r\n * @param {vec3} t tranlation vector\r\n * @returns {quat2} dual quaternion receiving operation result\r\n * @function\r\n */\n\nexport function fromRotationTranslation(out, q, t) {\n  var ax = t[0] * 0.5,\n      ay = t[1] * 0.5,\n      az = t[2] * 0.5,\n      bx = q[0],\n      by = q[1],\n      bz = q[2],\n      bw = q[3];\n  out[0] = bx;\n  out[1] = by;\n  out[2] = bz;\n  out[3] = bw;\n  out[4] = ax * bw + ay * bz - az * by;\n  out[5] = ay * bw + az * bx - ax * bz;\n  out[6] = az * bw + ax * by - ay * bx;\n  out[7] = -ax * bx - ay * by - az * bz;\n  return out;\n}\n/**\r\n * Creates a dual quat from a translation\r\n *\r\n * @param {quat2} dual quaternion receiving operation result\r\n * @param {vec3} t translation vector\r\n * @returns {quat2} dual quaternion receiving operation result\r\n * @function\r\n */\n\nexport function fromTranslation(out, t) {\n  out[0] = 0;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  out[4] = t[0] * 0.5;\n  out[5] = t[1] * 0.5;\n  out[6] = t[2] * 0.5;\n  out[7] = 0;\n  return out;\n}\n/**\r\n * Creates a dual quat from a quaternion\r\n *\r\n * @param {quat2} dual quaternion receiving operation result\r\n * @param {quat} q the quaternion\r\n * @returns {quat2} dual quaternion receiving operation result\r\n * @function\r\n */\n\nexport function fromRotation(out, q) {\n  out[0] = q[0];\n  out[1] = q[1];\n  out[2] = q[2];\n  out[3] = q[3];\n  out[4] = 0;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  return out;\n}\n/**\r\n * Creates a new dual quat from a matrix (4x4)\r\n *\r\n * @param {quat2} out the dual quaternion\r\n * @param {mat4} a the matrix\r\n * @returns {quat2} dual quat receiving operation result\r\n * @function\r\n */\n\nexport function fromMat4(out, a) {\n  //TODO Optimize this\n  var outer = quat.create();\n  mat4.getRotation(outer, a);\n  var t = new glMatrix.ARRAY_TYPE(3);\n  mat4.getTranslation(t, a);\n  fromRotationTranslation(out, outer, t);\n  return out;\n}\n/**\r\n * Copy the values from one dual quat to another\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {quat2} a the source dual quaternion\r\n * @returns {quat2} out\r\n * @function\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  return out;\n}\n/**\r\n * Set a dual quat to the identity dual quaternion\r\n *\r\n * @param {quat2} out the receiving quaternion\r\n * @returns {quat2} out\r\n */\n\nexport function identity(out) {\n  out[0] = 0;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  out[4] = 0;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  return out;\n}\n/**\r\n * Set the components of a dual quat to the given values\r\n *\r\n * @param {quat2} out the receiving quaternion\r\n * @param {Number} x1 X component\r\n * @param {Number} y1 Y component\r\n * @param {Number} z1 Z component\r\n * @param {Number} w1 W component\r\n * @param {Number} x2 X component\r\n * @param {Number} y2 Y component\r\n * @param {Number} z2 Z component\r\n * @param {Number} w2 W component\r\n * @returns {quat2} out\r\n * @function\r\n */\n\nexport function set(out, x1, y1, z1, w1, x2, y2, z2, w2) {\n  out[0] = x1;\n  out[1] = y1;\n  out[2] = z1;\n  out[3] = w1;\n  out[4] = x2;\n  out[5] = y2;\n  out[6] = z2;\n  out[7] = w2;\n  return out;\n}\n/**\r\n * Gets the real part of a dual quat\r\n * @param  {quat} out real part\r\n * @param  {quat2} a Dual Quaternion\r\n * @return {quat} real part\r\n */\n\nexport var getReal = quat.copy;\n/**\r\n * Gets the dual part of a dual quat\r\n * @param  {quat} out dual part\r\n * @param  {quat2} a Dual Quaternion\r\n * @return {quat} dual part\r\n */\n\nexport function getDual(out, a) {\n  out[0] = a[4];\n  out[1] = a[5];\n  out[2] = a[6];\n  out[3] = a[7];\n  return out;\n}\n/**\r\n * Set the real component of a dual quat to the given quaternion\r\n *\r\n * @param {quat2} out the receiving quaternion\r\n * @param {quat} q a quaternion representing the real part\r\n * @returns {quat2} out\r\n * @function\r\n */\n\nexport var setReal = quat.copy;\n/**\r\n * Set the dual component of a dual quat to the given quaternion\r\n *\r\n * @param {quat2} out the receiving quaternion\r\n * @param {quat} q a quaternion representing the dual part\r\n * @returns {quat2} out\r\n * @function\r\n */\n\nexport function setDual(out, q) {\n  out[4] = q[0];\n  out[5] = q[1];\n  out[6] = q[2];\n  out[7] = q[3];\n  return out;\n}\n/**\r\n * Gets the translation of a normalized dual quat\r\n * @param  {vec3} out translation\r\n * @param  {quat2} a Dual Quaternion to be decomposed\r\n * @return {vec3} translation\r\n */\n\nexport function getTranslation(out, a) {\n  var ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7],\n      bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3];\n  out[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\n  out[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\n  out[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\n  return out;\n}\n/**\r\n * Translates a dual quat by the given vector\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {quat2} a the dual quaternion to translate\r\n * @param {vec3} v vector to translate by\r\n * @returns {quat2} out\r\n */\n\nexport function translate(out, a, v) {\n  var ax1 = a[0],\n      ay1 = a[1],\n      az1 = a[2],\n      aw1 = a[3],\n      bx1 = v[0] * 0.5,\n      by1 = v[1] * 0.5,\n      bz1 = v[2] * 0.5,\n      ax2 = a[4],\n      ay2 = a[5],\n      az2 = a[6],\n      aw2 = a[7];\n  out[0] = ax1;\n  out[1] = ay1;\n  out[2] = az1;\n  out[3] = aw1;\n  out[4] = aw1 * bx1 + ay1 * bz1 - az1 * by1 + ax2;\n  out[5] = aw1 * by1 + az1 * bx1 - ax1 * bz1 + ay2;\n  out[6] = aw1 * bz1 + ax1 * by1 - ay1 * bx1 + az2;\n  out[7] = -ax1 * bx1 - ay1 * by1 - az1 * bz1 + aw2;\n  return out;\n}\n/**\r\n * Rotates a dual quat around the X axis\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {quat2} a the dual quaternion to rotate\r\n * @param {number} rad how far should the rotation be\r\n * @returns {quat2} out\r\n */\n\nexport function rotateX(out, a, rad) {\n  var bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3],\n      ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7],\n      ax1 = ax * bw + aw * bx + ay * bz - az * by,\n      ay1 = ay * bw + aw * by + az * bx - ax * bz,\n      az1 = az * bw + aw * bz + ax * by - ay * bx,\n      aw1 = aw * bw - ax * bx - ay * by - az * bz;\n  quat.rotateX(out, a, rad);\n  bx = out[0];\n  by = out[1];\n  bz = out[2];\n  bw = out[3];\n  out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\n  out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\n  out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\n  out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\n  return out;\n}\n/**\r\n * Rotates a dual quat around the Y axis\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {quat2} a the dual quaternion to rotate\r\n * @param {number} rad how far should the rotation be\r\n * @returns {quat2} out\r\n */\n\nexport function rotateY(out, a, rad) {\n  var bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3],\n      ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7],\n      ax1 = ax * bw + aw * bx + ay * bz - az * by,\n      ay1 = ay * bw + aw * by + az * bx - ax * bz,\n      az1 = az * bw + aw * bz + ax * by - ay * bx,\n      aw1 = aw * bw - ax * bx - ay * by - az * bz;\n  quat.rotateY(out, a, rad);\n  bx = out[0];\n  by = out[1];\n  bz = out[2];\n  bw = out[3];\n  out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\n  out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\n  out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\n  out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\n  return out;\n}\n/**\r\n * Rotates a dual quat around the Z axis\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {quat2} a the dual quaternion to rotate\r\n * @param {number} rad how far should the rotation be\r\n * @returns {quat2} out\r\n */\n\nexport function rotateZ(out, a, rad) {\n  var bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3],\n      ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7],\n      ax1 = ax * bw + aw * bx + ay * bz - az * by,\n      ay1 = ay * bw + aw * by + az * bx - ax * bz,\n      az1 = az * bw + aw * bz + ax * by - ay * bx,\n      aw1 = aw * bw - ax * bx - ay * by - az * bz;\n  quat.rotateZ(out, a, rad);\n  bx = out[0];\n  by = out[1];\n  bz = out[2];\n  bw = out[3];\n  out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\n  out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\n  out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\n  out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\n  return out;\n}\n/**\r\n * Rotates a dual quat by a given quaternion (a * q)\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {quat2} a the dual quaternion to rotate\r\n * @param {quat} q quaternion to rotate by\r\n * @returns {quat2} out\r\n */\n\nexport function rotateByQuatAppend(out, a, q) {\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3],\n      ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  out[0] = ax * qw + aw * qx + ay * qz - az * qy;\n  out[1] = ay * qw + aw * qy + az * qx - ax * qz;\n  out[2] = az * qw + aw * qz + ax * qy - ay * qx;\n  out[3] = aw * qw - ax * qx - ay * qy - az * qz;\n  ax = a[4];\n  ay = a[5];\n  az = a[6];\n  aw = a[7];\n  out[4] = ax * qw + aw * qx + ay * qz - az * qy;\n  out[5] = ay * qw + aw * qy + az * qx - ax * qz;\n  out[6] = az * qw + aw * qz + ax * qy - ay * qx;\n  out[7] = aw * qw - ax * qx - ay * qy - az * qz;\n  return out;\n}\n/**\r\n * Rotates a dual quat by a given quaternion (q * a)\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {quat} q quaternion to rotate by\r\n * @param {quat2} a the dual quaternion to rotate\r\n * @returns {quat2} out\r\n */\n\nexport function rotateByQuatPrepend(out, q, a) {\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3],\n      bx = a[0],\n      by = a[1],\n      bz = a[2],\n      bw = a[3];\n  out[0] = qx * bw + qw * bx + qy * bz - qz * by;\n  out[1] = qy * bw + qw * by + qz * bx - qx * bz;\n  out[2] = qz * bw + qw * bz + qx * by - qy * bx;\n  out[3] = qw * bw - qx * bx - qy * by - qz * bz;\n  bx = a[4];\n  by = a[5];\n  bz = a[6];\n  bw = a[7];\n  out[4] = qx * bw + qw * bx + qy * bz - qz * by;\n  out[5] = qy * bw + qw * by + qz * bx - qx * bz;\n  out[6] = qz * bw + qw * bz + qx * by - qy * bx;\n  out[7] = qw * bw - qx * bx - qy * by - qz * bz;\n  return out;\n}\n/**\r\n * Rotates a dual quat around a given axis. Does the normalisation automatically\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {quat2} a the dual quaternion to rotate\r\n * @param {vec3} axis the axis to rotate around\r\n * @param {Number} rad how far the rotation should be\r\n * @returns {quat2} out\r\n */\n\nexport function rotateAroundAxis(out, a, axis, rad) {\n  //Special case for rad = 0\n  if (Math.abs(rad) < glMatrix.EPSILON) {\n    return copy(out, a);\n  }\n\n  var axisLength = Math.sqrt(axis[0] * axis[0] + axis[1] * axis[1] + axis[2] * axis[2]);\n  rad = rad * 0.5;\n  var s = Math.sin(rad);\n  var bx = s * axis[0] / axisLength;\n  var by = s * axis[1] / axisLength;\n  var bz = s * axis[2] / axisLength;\n  var bw = Math.cos(rad);\n  var ax1 = a[0],\n      ay1 = a[1],\n      az1 = a[2],\n      aw1 = a[3];\n  out[0] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\n  out[1] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\n  out[2] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\n  out[3] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\n  var ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7];\n  out[4] = ax * bw + aw * bx + ay * bz - az * by;\n  out[5] = ay * bw + aw * by + az * bx - ax * bz;\n  out[6] = az * bw + aw * bz + ax * by - ay * bx;\n  out[7] = aw * bw - ax * bx - ay * by - az * bz;\n  return out;\n}\n/**\r\n * Adds two dual quat's\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {quat2} a the first operand\r\n * @param {quat2} b the second operand\r\n * @returns {quat2} out\r\n * @function\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  return out;\n}\n/**\r\n * Multiplies two dual quat's\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {quat2} a the first operand\r\n * @param {quat2} b the second operand\r\n * @returns {quat2} out\r\n */\n\nexport function multiply(out, a, b) {\n  var ax0 = a[0],\n      ay0 = a[1],\n      az0 = a[2],\n      aw0 = a[3],\n      bx1 = b[4],\n      by1 = b[5],\n      bz1 = b[6],\n      bw1 = b[7],\n      ax1 = a[4],\n      ay1 = a[5],\n      az1 = a[6],\n      aw1 = a[7],\n      bx0 = b[0],\n      by0 = b[1],\n      bz0 = b[2],\n      bw0 = b[3];\n  out[0] = ax0 * bw0 + aw0 * bx0 + ay0 * bz0 - az0 * by0;\n  out[1] = ay0 * bw0 + aw0 * by0 + az0 * bx0 - ax0 * bz0;\n  out[2] = az0 * bw0 + aw0 * bz0 + ax0 * by0 - ay0 * bx0;\n  out[3] = aw0 * bw0 - ax0 * bx0 - ay0 * by0 - az0 * bz0;\n  out[4] = ax0 * bw1 + aw0 * bx1 + ay0 * bz1 - az0 * by1 + ax1 * bw0 + aw1 * bx0 + ay1 * bz0 - az1 * by0;\n  out[5] = ay0 * bw1 + aw0 * by1 + az0 * bx1 - ax0 * bz1 + ay1 * bw0 + aw1 * by0 + az1 * bx0 - ax1 * bz0;\n  out[6] = az0 * bw1 + aw0 * bz1 + ax0 * by1 - ay0 * bx1 + az1 * bw0 + aw1 * bz0 + ax1 * by0 - ay1 * bx0;\n  out[7] = aw0 * bw1 - ax0 * bx1 - ay0 * by1 - az0 * bz1 + aw1 * bw0 - ax1 * bx0 - ay1 * by0 - az1 * bz0;\n  return out;\n}\n/**\r\n * Alias for {@link quat2.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Scales a dual quat by a scalar number\r\n *\r\n * @param {quat2} out the receiving dual quat\r\n * @param {quat2} a the dual quat to scale\r\n * @param {Number} b amount to scale the dual quat by\r\n * @returns {quat2} out\r\n * @function\r\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  return out;\n}\n/**\r\n * Calculates the dot product of two dual quat's (The dot product of the real parts)\r\n *\r\n * @param {quat2} a the first operand\r\n * @param {quat2} b the second operand\r\n * @returns {Number} dot product of a and b\r\n * @function\r\n */\n\nexport var dot = quat.dot;\n/**\r\n * Performs a linear interpolation between two dual quats's\r\n * NOTE: The resulting dual quaternions won't always be normalized (The error is most noticeable when t = 0.5)\r\n *\r\n * @param {quat2} out the receiving dual quat\r\n * @param {quat2} a the first operand\r\n * @param {quat2} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {quat2} out\r\n */\n\nexport function lerp(out, a, b, t) {\n  var mt = 1 - t;\n  if (dot(a, b) < 0) t = -t;\n  out[0] = a[0] * mt + b[0] * t;\n  out[1] = a[1] * mt + b[1] * t;\n  out[2] = a[2] * mt + b[2] * t;\n  out[3] = a[3] * mt + b[3] * t;\n  out[4] = a[4] * mt + b[4] * t;\n  out[5] = a[5] * mt + b[5] * t;\n  out[6] = a[6] * mt + b[6] * t;\n  out[7] = a[7] * mt + b[7] * t;\n  return out;\n}\n/**\r\n * Calculates the inverse of a dual quat. If they are normalized, conjugate is cheaper\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {quat2} a dual quat to calculate inverse of\r\n * @returns {quat2} out\r\n */\n\nexport function invert(out, a) {\n  var sqlen = squaredLength(a);\n  out[0] = -a[0] / sqlen;\n  out[1] = -a[1] / sqlen;\n  out[2] = -a[2] / sqlen;\n  out[3] = a[3] / sqlen;\n  out[4] = -a[4] / sqlen;\n  out[5] = -a[5] / sqlen;\n  out[6] = -a[6] / sqlen;\n  out[7] = a[7] / sqlen;\n  return out;\n}\n/**\r\n * Calculates the conjugate of a dual quat\r\n * If the dual quaternion is normalized, this function is faster than quat2.inverse and produces the same result.\r\n *\r\n * @param {quat2} out the receiving quaternion\r\n * @param {quat2} a quat to calculate conjugate of\r\n * @returns {quat2} out\r\n */\n\nexport function conjugate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = a[3];\n  out[4] = -a[4];\n  out[5] = -a[5];\n  out[6] = -a[6];\n  out[7] = a[7];\n  return out;\n}\n/**\r\n * Calculates the length of a dual quat\r\n *\r\n * @param {quat2} a dual quat to calculate length of\r\n * @returns {Number} length of a\r\n * @function\r\n */\n\nexport var length = quat.length;\n/**\r\n * Alias for {@link quat2.length}\r\n * @function\r\n */\n\nexport var len = length;\n/**\r\n * Calculates the squared length of a dual quat\r\n *\r\n * @param {quat2} a dual quat to calculate squared length of\r\n * @returns {Number} squared length of a\r\n * @function\r\n */\n\nexport var squaredLength = quat.squaredLength;\n/**\r\n * Alias for {@link quat2.squaredLength}\r\n * @function\r\n */\n\nexport var sqrLen = squaredLength;\n/**\r\n * Normalize a dual quat\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {quat2} a dual quaternion to normalize\r\n * @returns {quat2} out\r\n * @function\r\n */\n\nexport function normalize(out, a) {\n  var magnitude = squaredLength(a);\n\n  if (magnitude > 0) {\n    magnitude = Math.sqrt(magnitude);\n    var a0 = a[0] / magnitude;\n    var a1 = a[1] / magnitude;\n    var a2 = a[2] / magnitude;\n    var a3 = a[3] / magnitude;\n    var b0 = a[4];\n    var b1 = a[5];\n    var b2 = a[6];\n    var b3 = a[7];\n    var a_dot_b = a0 * b0 + a1 * b1 + a2 * b2 + a3 * b3;\n    out[0] = a0;\n    out[1] = a1;\n    out[2] = a2;\n    out[3] = a3;\n    out[4] = (b0 - a0 * a_dot_b) / magnitude;\n    out[5] = (b1 - a1 * a_dot_b) / magnitude;\n    out[6] = (b2 - a2 * a_dot_b) / magnitude;\n    out[7] = (b3 - a3 * a_dot_b) / magnitude;\n  }\n\n  return out;\n}\n/**\r\n * Returns a string representation of a dual quatenion\r\n *\r\n * @param {quat2} a dual quaternion to represent as a string\r\n * @returns {String} string representation of the dual quat\r\n */\n\nexport function str(a) {\n  return 'quat2(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' + a[4] + ', ' + a[5] + ', ' + a[6] + ', ' + a[7] + ')';\n}\n/**\r\n * Returns whether or not the dual quaternions have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {quat2} a the first dual quaternion.\r\n * @param {quat2} b the second dual quaternion.\r\n * @returns {Boolean} true if the dual quaternions are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7];\n}\n/**\r\n * Returns whether or not the dual quaternions have approximately the same elements in the same position.\r\n *\r\n * @param {quat2} a the first dual quat.\r\n * @param {quat2} b the second dual quat.\r\n * @returns {Boolean} true if the dual quats are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3],\n      b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7));\n}","import * as glMatrix from \"./common.js\";\n/**\r\n * 2 Dimensional Vector\r\n * @module vec2\r\n */\n\n/**\r\n * Creates a new, empty vec2\r\n *\r\n * @returns {vec2} a new 2D vector\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(2);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n  }\n\n  return out;\n}\n/**\r\n * Creates a new vec2 initialized with values from an existing vector\r\n *\r\n * @param {vec2} a vector to clone\r\n * @returns {vec2} a new 2D vector\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(2);\n  out[0] = a[0];\n  out[1] = a[1];\n  return out;\n}\n/**\r\n * Creates a new vec2 initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @returns {vec2} a new 2D vector\r\n */\n\nexport function fromValues(x, y) {\n  var out = new glMatrix.ARRAY_TYPE(2);\n  out[0] = x;\n  out[1] = y;\n  return out;\n}\n/**\r\n * Copy the values from one vec2 to another\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the source vector\r\n * @returns {vec2} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  return out;\n}\n/**\r\n * Set the components of a vec2 to the given values\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @returns {vec2} out\r\n */\n\nexport function set(out, x, y) {\n  out[0] = x;\n  out[1] = y;\n  return out;\n}\n/**\r\n * Adds two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  return out;\n}\n/**\r\n * Subtracts vector b from vector a\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  return out;\n}\n/**\r\n * Multiplies two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  return out;\n}\n/**\r\n * Divides two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  return out;\n}\n/**\r\n * Math.ceil the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to ceil\r\n * @returns {vec2} out\r\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  return out;\n}\n/**\r\n * Math.floor the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to floor\r\n * @returns {vec2} out\r\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  return out;\n}\n/**\r\n * Returns the minimum of two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  return out;\n}\n/**\r\n * Returns the maximum of two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  return out;\n}\n/**\r\n * Math.round the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to round\r\n * @returns {vec2} out\r\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  return out;\n}\n/**\r\n * Scales a vec2 by a scalar number\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {vec2} out\r\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  return out;\n}\n/**\r\n * Adds two vec2's after scaling the second operand by a scalar value\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @param {Number} scale the amount to scale b by before adding\r\n * @returns {vec2} out\r\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  return out;\n}\n/**\r\n * Calculates the euclidian distance between two vec2's\r\n *\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {Number} distance between a and b\r\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0],\n      y = b[1] - a[1];\n  return Math.sqrt(x * x + y * y);\n}\n/**\r\n * Calculates the squared euclidian distance between two vec2's\r\n *\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {Number} squared distance between a and b\r\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0],\n      y = b[1] - a[1];\n  return x * x + y * y;\n}\n/**\r\n * Calculates the length of a vec2\r\n *\r\n * @param {vec2} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\n\nexport function length(a) {\n  var x = a[0],\n      y = a[1];\n  return Math.sqrt(x * x + y * y);\n}\n/**\r\n * Calculates the squared length of a vec2\r\n *\r\n * @param {vec2} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n */\n\nexport function squaredLength(a) {\n  var x = a[0],\n      y = a[1];\n  return x * x + y * y;\n}\n/**\r\n * Negates the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to negate\r\n * @returns {vec2} out\r\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  return out;\n}\n/**\r\n * Returns the inverse of the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to invert\r\n * @returns {vec2} out\r\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  return out;\n}\n/**\r\n * Normalize a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to normalize\r\n * @returns {vec2} out\r\n */\n\nexport function normalize(out, a) {\n  var x = a[0],\n      y = a[1];\n  var len = x * x + y * y;\n\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = a[0] * len;\n  out[1] = a[1] * len;\n  return out;\n}\n/**\r\n * Calculates the dot product of two vec2's\r\n *\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1];\n}\n/**\r\n * Computes the cross product of two vec2's\r\n * Note that the cross product must by definition produce a 3D vector\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function cross(out, a, b) {\n  var z = a[0] * b[1] - a[1] * b[0];\n  out[0] = out[1] = 0;\n  out[2] = z;\n  return out;\n}\n/**\r\n * Performs a linear interpolation between two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec2} out\r\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0],\n      ay = a[1];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  return out;\n}\n/**\r\n * Generates a random vector with the given scale\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\r\n * @returns {vec2} out\r\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0;\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  out[0] = Math.cos(r) * scale;\n  out[1] = Math.sin(r) * scale;\n  return out;\n}\n/**\r\n * Transforms the vec2 with a mat2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the vector to transform\r\n * @param {mat2} m matrix to transform with\r\n * @returns {vec2} out\r\n */\n\nexport function transformMat2(out, a, m) {\n  var x = a[0],\n      y = a[1];\n  out[0] = m[0] * x + m[2] * y;\n  out[1] = m[1] * x + m[3] * y;\n  return out;\n}\n/**\r\n * Transforms the vec2 with a mat2d\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the vector to transform\r\n * @param {mat2d} m matrix to transform with\r\n * @returns {vec2} out\r\n */\n\nexport function transformMat2d(out, a, m) {\n  var x = a[0],\n      y = a[1];\n  out[0] = m[0] * x + m[2] * y + m[4];\n  out[1] = m[1] * x + m[3] * y + m[5];\n  return out;\n}\n/**\r\n * Transforms the vec2 with a mat3\r\n * 3rd vector component is implicitly '1'\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the vector to transform\r\n * @param {mat3} m matrix to transform with\r\n * @returns {vec2} out\r\n */\n\nexport function transformMat3(out, a, m) {\n  var x = a[0],\n      y = a[1];\n  out[0] = m[0] * x + m[3] * y + m[6];\n  out[1] = m[1] * x + m[4] * y + m[7];\n  return out;\n}\n/**\r\n * Transforms the vec2 with a mat4\r\n * 3rd vector component is implicitly '0'\r\n * 4th vector component is implicitly '1'\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the vector to transform\r\n * @param {mat4} m matrix to transform with\r\n * @returns {vec2} out\r\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0];\n  var y = a[1];\n  out[0] = m[0] * x + m[4] * y + m[12];\n  out[1] = m[1] * x + m[5] * y + m[13];\n  return out;\n}\n/**\r\n * Rotate a 2D vector\r\n * @param {vec2} out The receiving vec2\r\n * @param {vec2} a The vec2 point to rotate\r\n * @param {vec2} b The origin of the rotation\r\n * @param {Number} c The angle of rotation\r\n * @returns {vec2} out\r\n */\n\nexport function rotate(out, a, b, c) {\n  //Translate point to the origin\n  var p0 = a[0] - b[0],\n      p1 = a[1] - b[1],\n      sinC = Math.sin(c),\n      cosC = Math.cos(c); //perform rotation and translate to correct position\n\n  out[0] = p0 * cosC - p1 * sinC + b[0];\n  out[1] = p0 * sinC + p1 * cosC + b[1];\n  return out;\n}\n/**\r\n * Get the angle between two 2D vectors\r\n * @param {vec2} a The first operand\r\n * @param {vec2} b The second operand\r\n * @returns {Number} The angle in radians\r\n */\n\nexport function angle(a, b) {\n  var x1 = a[0],\n      y1 = a[1],\n      x2 = b[0],\n      y2 = b[1];\n  var len1 = x1 * x1 + y1 * y1;\n\n  if (len1 > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len1 = 1 / Math.sqrt(len1);\n  }\n\n  var len2 = x2 * x2 + y2 * y2;\n\n  if (len2 > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len2 = 1 / Math.sqrt(len2);\n  }\n\n  var cosine = (x1 * x2 + y1 * y2) * len1 * len2;\n\n  if (cosine > 1.0) {\n    return 0;\n  } else if (cosine < -1.0) {\n    return Math.PI;\n  } else {\n    return Math.acos(cosine);\n  }\n}\n/**\r\n * Set the components of a vec2 to zero\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @returns {vec2} out\r\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  return out;\n}\n/**\r\n * Returns a string representation of a vector\r\n *\r\n * @param {vec2} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\n\nexport function str(a) {\n  return 'vec2(' + a[0] + ', ' + a[1] + ')';\n}\n/**\r\n * Returns whether or not the vectors exactly have the same elements in the same position (when compared with ===)\r\n *\r\n * @param {vec2} a The first vector.\r\n * @param {vec2} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1];\n}\n/**\r\n * Returns whether or not the vectors have approximately the same elements in the same position.\r\n *\r\n * @param {vec2} a The first vector.\r\n * @param {vec2} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1];\n  var b0 = b[0],\n      b1 = b[1];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1));\n}\n/**\r\n * Alias for {@link vec2.length}\r\n * @function\r\n */\n\nexport var len = length;\n/**\r\n * Alias for {@link vec2.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;\n/**\r\n * Alias for {@link vec2.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link vec2.divide}\r\n * @function\r\n */\n\nexport var div = divide;\n/**\r\n * Alias for {@link vec2.distance}\r\n * @function\r\n */\n\nexport var dist = distance;\n/**\r\n * Alias for {@link vec2.squaredDistance}\r\n * @function\r\n */\n\nexport var sqrDist = squaredDistance;\n/**\r\n * Alias for {@link vec2.squaredLength}\r\n * @function\r\n */\n\nexport var sqrLen = squaredLength;\n/**\r\n * Perform some operation over an array of vec2s.\r\n *\r\n * @param {Array} a the array of vectors to iterate over\r\n * @param {Number} stride Number of elements between the start of each vec2. If 0 assumes tightly packed\r\n * @param {Number} offset Number of elements to skip at the beginning of the array\r\n * @param {Number} count Number of vec2s to iterate over. If 0 iterates over entire array\r\n * @param {Function} fn Function to call for each vector in the array\r\n * @param {Object} [arg] additional argument to pass to fn\r\n * @returns {Array} a\r\n * @function\r\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 2;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n    }\n\n    return a;\n  };\n}();","import * as glMatrix from \"./common.js\";\nimport * as mat2 from \"./mat2.js\";\nimport * as mat2d from \"./mat2d.js\";\nimport * as mat3 from \"./mat3.js\";\nimport * as mat4 from \"./mat4.js\";\nimport * as quat from \"./quat.js\";\nimport * as quat2 from \"./quat2.js\";\nimport * as vec2 from \"./vec2.js\";\nimport * as vec3 from \"./vec3.js\";\nimport * as vec4 from \"./vec4.js\";\nexport { glMatrix, mat2, mat2d, mat3, mat4, quat, quat2, vec2, vec3, vec4 };","/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n// This method of obtaining a reference to the global object needs to be\n// kept identical to the way it is obtained in runtime.js\nvar g = function () {\n  return this || typeof self === \"object\" && self;\n}() || Function(\"return this\")(); // Use `getOwnPropertyNames` because not all browsers support calling\n// `hasOwnProperty` on the global `self` object in a worker. See #183.\n\n\nvar hadRuntime = g.regeneratorRuntime && Object.getOwnPropertyNames(g).indexOf(\"regeneratorRuntime\") >= 0; // Save the old regeneratorRuntime in case it needs to be restored later.\n\nvar oldRuntime = hadRuntime && g.regeneratorRuntime; // Force reevalutation of runtime.js.\n\ng.regeneratorRuntime = undefined;\nmodule.exports = require(\"./runtime\");\n\nif (hadRuntime) {\n  // Restore the original runtime.\n  g.regeneratorRuntime = oldRuntime;\n} else {\n  // Remove the global property added by runtime.js.\n  try {\n    delete g.regeneratorRuntime;\n  } catch (e) {\n    g.regeneratorRuntime = undefined;\n  }\n}","/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n!function (global) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n  var inModule = typeof module === \"object\";\n  var runtime = global.regeneratorRuntime;\n\n  if (runtime) {\n    if (inModule) {\n      // If regeneratorRuntime is defined globally and we're in a module,\n      // make the exports object identical to regeneratorRuntime.\n      module.exports = runtime;\n    } // Don't bother evaluating the rest of this file if the runtime was\n    // already defined globally.\n\n\n    return;\n  } // Define the runtime globally (as expected by generated code) as either\n  // module.exports (if we're in a module) or a new, empty object.\n\n\n  runtime = global.regeneratorRuntime = inModule ? module.exports : {};\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []); // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n    return generator;\n  }\n\n  runtime.wrap = wrap; // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n\n  function tryCatch(fn, obj, arg) {\n    try {\n      return {\n        type: \"normal\",\n        arg: fn.call(obj, arg)\n      };\n    } catch (err) {\n      return {\n        type: \"throw\",\n        arg: err\n      };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\"; // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n\n  var ContinueSentinel = {}; // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n\n  function Generator() {}\n\n  function GeneratorFunction() {}\n\n  function GeneratorFunctionPrototype() {} // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n\n\n  var IteratorPrototype = {};\n\n  IteratorPrototype[iteratorSymbol] = function () {\n    return this;\n  };\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n\n  if (NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunctionPrototype[toStringTagSymbol] = GeneratorFunction.displayName = \"GeneratorFunction\"; // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function (method) {\n      prototype[method] = function (arg) {\n        return this._invoke(method, arg);\n      };\n    });\n  }\n\n  runtime.isGeneratorFunction = function (genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor ? ctor === GeneratorFunction || // For the native GeneratorFunction constructor, the best we can\n    // do is to check its .name property.\n    (ctor.displayName || ctor.name) === \"GeneratorFunction\" : false;\n  };\n\n  runtime.mark = function (genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n\n      if (!(toStringTagSymbol in genFun)) {\n        genFun[toStringTagSymbol] = \"GeneratorFunction\";\n      }\n    }\n\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  }; // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n\n\n  runtime.awrap = function (arg) {\n    return {\n      __await: arg\n    };\n  };\n\n  function AsyncIterator(generator) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n\n        if (value && typeof value === \"object\" && hasOwn.call(value, \"__await\")) {\n          return Promise.resolve(value.__await).then(function (value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function (err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return Promise.resolve(value).then(function (unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function (error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new Promise(function (resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise = // If enqueue has been called before, then we want to wait until\n      // all previous Promises have been resolved before calling invoke,\n      // so that results are always delivered in the correct order. If\n      // enqueue has not been called before, then it is important to\n      // call invoke immediately, without waiting on a callback to fire,\n      // so that the async generator function has the opportunity to do\n      // any necessary setup in a predictable way. This predictability\n      // is why the Promise constructor synchronously invokes its\n      // executor callback, and why async functions synchronously\n      // execute code before the first await. Since we implement simple\n      // async functions in terms of async generators, it is especially\n      // important to get this right, even though it requires care.\n      previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, // Avoid propagating failures to Promises returned by later\n      // invocations of the iterator.\n      callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();\n    } // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n\n\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n\n  AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n    return this;\n  };\n\n  runtime.AsyncIterator = AsyncIterator; // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n\n  runtime.async = function (innerFn, outerFn, self, tryLocsList) {\n    var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList));\n    return runtime.isGeneratorFunction(outerFn) ? iter // If outerFn is a generator, return the full iterator.\n    : iter.next().then(function (result) {\n      return result.done ? result.value : iter.next();\n    });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        } // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n\n\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n        var record = tryCatch(innerFn, self, context);\n\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done ? GenStateCompleted : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted; // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  } // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n\n\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        if (delegate.iterator.return) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (!info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value; // Resume execution at the desired location (see delegateYield).\n\n      context.next = delegate.nextLoc; // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    } // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n\n\n    context.delegate = null;\n    return ContinueSentinel;\n  } // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n\n\n  defineIteratorMethods(Gp);\n  Gp[toStringTagSymbol] = \"Generator\"; // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n\n  Gp[iteratorSymbol] = function () {\n    return this;\n  };\n\n  Gp.toString = function () {\n    return \"[object Generator]\";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = {\n      tryLoc: locs[0]\n    };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{\n      tryLoc: \"root\"\n    }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  runtime.keys = function (object) {\n    var keys = [];\n\n    for (var key in object) {\n      keys.push(key);\n    }\n\n    keys.reverse(); // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      } // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n\n\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1,\n            next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n          return next;\n        };\n\n        return next.next = next;\n      }\n    } // Return an iterator with no values.\n\n\n    return {\n      next: doneResult\n    };\n  }\n\n  runtime.values = values;\n\n  function doneResult() {\n    return {\n      value: undefined,\n      done: true\n    };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n    reset: function reset(skipTempReset) {\n      this.prev = 0;\n      this.next = 0; // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n      this.method = \"next\";\n      this.arg = undefined;\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" && hasOwn.call(this, name) && !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n    stop: function stop() {\n      this.done = true;\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n    dispatchException: function dispatchException(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !!caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n    abrupt: function abrupt(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n\n        if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry && (type === \"break\" || type === \"continue\") && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n    complete: function complete(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" || record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n    finish: function finish(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n    \"catch\": function _catch(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n\n          return thrown;\n        }\n      } // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n\n\n      throw new Error(\"illegal catch attempt\");\n    },\n    delegateYield: function delegateYield(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n}( // In sloppy mode, unbound `this` refers to the global object, fallback to\n// Function constructor if we're in global strict mode. That is sadly a form\n// of indirect eval which violates Content Security Policy.\nfunction () {\n  return this || typeof self === \"object\" && self;\n}() || Function(\"return this\")());"],"sourceRoot":""}