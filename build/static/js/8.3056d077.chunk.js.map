{"version":3,"sources":["../node_modules/_@babel_runtime@7.3.1@@babel/runtime/helpers/esm/classCallCheck.js","../node_modules/_@babel_runtime@7.3.1@@babel/runtime/helpers/esm/createClass.js","demo/lib/runtime.js","demo/Demo13/ray-tracing.js","demo/Demo13/index.js"],"names":["_classCallCheck","instance","Constructor","TypeError","__webpack_require__","d","__webpack_exports__","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","_createClass","protoProps","staticProps","prototype","vec3","require","isVec3","obj","Float32Array","toVec3","n","fromValues","module","exports","_add_","left","right","add","create","_sub_","sub","_mul_","mul","_div_","div","_negate_","operand","negate","from","x","y","z","dot","vec3a","vec3b","cross","normalize","Ray","a","b","time","arguments","undefined","classCallCheck","this","t","createRecord","p","normal","Sphere","center","radius","material","ray","tmin","tmax","record","oc","origin","direction","c","discriminant","temp","Math","sqrt","isValid","pointAt","MovingSphere","center1","center2","time1","time2","sphere","setCenter","hit","HitableList","list","tempRecord","hited","closest","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","next","done","value","assign","err","return","_this$list","push","apply","Camera","lookFrom","lookAt","vup","vfov","aspect","aperture","focusDist","theta","PI","halfHeight","tan","halfWidth","w","u","v","lowerLeftCorner","horizontal","vertical","lensRadius","s","rd","randomVec3","random","randomInUnitDisk","offset","randomInUnitSphere","squaredLength","LambertianMaterial","albedo","ref","scattered","attenuation","reflect","MetalMaterial","fuzz","min","reflected","DielectricMaterial","refractIndex","outwardNormal","ni_over_nt","consine","dotResult","refractProb","uv","dt","refracted","refract","r0","pow","schlick","color","world","depth","Infinity","scatter","start","end","ray_tracing","_ref","_ref$width","width","_ref$height","height","_ref$amount","amount","_ref$lookFrom","_ref$lookAt","_ref$vup","_ref$vfov","_ref$aspect","_ref$focusDist","_ref$aperture","nx","ny","camera","range","floor","based","chooseMat","randomScene","renderByPosition","getRay","render","regenerator_default","mark","j","_renderByPosition","_renderByPosition2","r","g","wrap","_context","prev","slicedToArray","stop","noop","frame","f","Promise","resolve","requestAnimationFrame","getMSE","listA","listB","sum","incre","step","_args","decre","_args2","_context2","abs","toggle","valueA","valueB","_context3","abrupt","spread","middle","source","_args4","_context4","t0","finish","sortByMSE","current","result","index","sort","toColor","Demo01","_useState","useState","_useState2","setTime","useRef","deubgRef","useEffect","canvas","debugCanvas","ctx","getContext","debugCtx","imageData","createImageData","debugImageData","createRayTracing","data","prevImageData","currImageData","renderCount","innerCount","innerTime","tid","over","renderToCanvas","fillColor","clearRect","putImageData","showDebugInfo","_ray$renderByPosition","_ray$renderByPosition2","_ray$renderByPosition3","asyncToGenerator","_callee","duration","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_iterator2","_step2","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_iterator3","_step3","_args5","_context5","Date","now","t1","scheduleRender","_ref2","_callee2","count","item","_args6","_context6","clearTimeout","_react_16_8_6_react_default","createElement","Fragment","style","background","toFixed"],"mappings":"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","file":"static/js/8.3056d077.chunk.js","sourcesContent":["export default function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}","function _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nexport default function _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}","const { vec3 } = require('gl-matrix')\r\n\r\nconst isVec3 = obj => obj instanceof Float32Array\r\nconst toVec3 = n => vec3.fromValues(n, n, n)\r\n\r\nlet _add_ = function(left, right) {\r\n  if (!isVec3(left) && !isVec3(right)) return left + right\r\n\r\n  if (!isVec3(left)) left = toVec3(left)\r\n  if (!isVec3(right)) right = toVec3(right)\r\n\r\n  return vec3.add(vec3.create(), left, right)\r\n}\r\n\r\nlet _sub_ = function(left, right) {\r\n  if (!isVec3(left) && !isVec3(right)) return left - right\r\n\r\n  if (!isVec3(left)) left = toVec3(left)\r\n  if (!isVec3(right)) right = toVec3(right)\r\n\r\n  return vec3.sub(vec3.create(), left, right)\r\n}\r\n\r\nlet _mul_ = function(left, right) {\r\n  if (!isVec3(left) && !isVec3(right)) return left * right\r\n\r\n  if (!isVec3(left)) left = toVec3(left)\r\n  if (!isVec3(right)) right = toVec3(right)\r\n\r\n  return vec3.mul(vec3.create(), left, right)\r\n}\r\n\r\nlet _div_ = function(left, right) {\r\n  if (!isVec3(left) && !isVec3(right)) return left / right\r\n\r\n  if (!isVec3(left)) left = toVec3(left)\r\n  if (!isVec3(right)) right = toVec3(right)\r\n\r\n  return vec3.div(vec3.create(), left, right)\r\n}\r\n\r\nlet _negate_ = function(operand) {\r\n  if (!isVec3(operand)) return -operand\r\n  return vec3.negate(vec3.create(), operand)\r\n}\r\n\r\nmodule.exports = {\r\n  _add_,\r\n  _sub_,\r\n  _mul_,\r\n  _div_,\r\n  _negate_\r\n}\r\n","const fs = require('fs');\n\nconst {\n  vec3\n} = require('gl-matrix');\n\nconst {\n  _add_,\n  _sub_,\n  _mul_,\n  _div_,\n  _negate_\n} = require('../lib/runtime');\n\nconst from = (x, y, z) => vec3.fromValues(x, y, z);\n\nconst dot = (vec3a, vec3b) => vec3.dot(vec3a, vec3b);\n\nconst cross = (vec3a, vec3b) => vec3.cross(vec3.create(), vec3a, vec3b);\n\nconst normalize = vec3a => vec3.normalize(vec3.create(), vec3a);\n\nclass Ray {\n  constructor(a, b, time = 0.0) {\n    this.a = a;\n    this.b = b;\n    this.time = time;\n  }\n\n  origin() {\n    return this.a;\n  }\n\n  direction() {\n    return this.b;\n  }\n\n  pointAt(t) {\n    let {\n      a,\n      b\n    } = this;\n    return _add_(a, _mul_(t, b));\n  }\n\n} // linear-blend/linear-interpolation\n\n\nconst lerp = (t, start, end) => _add_(_mul_(_sub_(1.0, t), start), _mul_(t, end));\n\nconst createRecord = () => {\n  return {\n    t: 0,\n    p: vec3.create(),\n    normal: vec3.create()\n  };\n};\n\nclass Sphere {\n  constructor(center, radius, material) {\n    this.center = center;\n    this.radius = radius;\n    this.material = material;\n  }\n\n  setCenter(center) {\n    this.center = center;\n  }\n\n  hit(ray, tmin, tmax, record) {\n    let oc = _sub_(ray.origin(), this.center);\n\n    let a = dot(ray.direction(), ray.direction());\n    let b = dot(oc, ray.direction());\n\n    let c = _sub_(dot(oc, oc), _mul_(this.radius, this.radius));\n\n    let discriminant = _sub_(_mul_(b, b), _mul_(a, c));\n\n    if (discriminant < 0) return false;\n\n    let temp = _div_(_sub_(_negate_(b), Math.sqrt(discriminant)), a);\n\n    let isValid = temp < tmax && temp > tmin;\n\n    if (!isValid) {\n      temp = _div_(_add_(_negate_(b), Math.sqrt(discriminant)), a);\n      isValid = temp < tmax && temp > tmin;\n    }\n\n    if (isValid) {\n      record.t = temp;\n      record.p = ray.pointAt(temp);\n      record.normal = _div_(_sub_(record.p, this.center), this.radius);\n      record.material = this.material;\n      return true;\n    }\n\n    return false;\n  }\n\n}\n\nconst getCenterByTime = (center1, center2, time1, time2, time) => {\n  return _add_(center1, _mul_(_div_(_sub_(time, time1), _sub_(time2, time1)), _sub_(center2, center1)));\n};\n\nclass MovingSphere {\n  constructor(center1, center2, time1, time2, radius, material) {\n    this.center1 = center1;\n    this.center2 = center2;\n    this.time1 = time1;\n    this.time2 = time2;\n    this.sphere = new Sphere(center1, radius, material);\n  }\n\n  hit(ray, tmin, tmax, record) {\n    let center = getCenterByTime(this.center1, this.center2, this.time1, this.time2, ray.time);\n    this.sphere.setCenter(center);\n    return this.sphere.hit(ray, tmin, tmax, record);\n  }\n\n}\n\nclass HitableList {\n  constructor(list) {\n    this.list = list;\n  }\n\n  hit(ray, tmin, tmax, record) {\n    let tempRecord = createRecord();\n    let hited = false;\n    let closest = tmax;\n\n    for (let object of this.list) {\n      if (object.hit(ray, tmin, closest, tempRecord)) {\n        hited = true;\n        closest = tempRecord.t;\n        Object.assign(record, tempRecord);\n      }\n    }\n\n    return hited;\n  }\n\n  push(...args) {\n    this.list.push(...args);\n  }\n\n}\n\nconst randomInUnitDisk = () => {\n  let p;\n\n  do {\n    let randomVec3 = from(Math.random(), Math.random(), 0.0);\n    p = _sub_(_mul_(2.0, randomVec3), from(1.0, 1.0, 0.0));\n  } while (dot(p, p) >= 1.0);\n\n  return p;\n};\n\nclass Camera {\n  constructor(lookFrom, lookAt, vup, vfov, aspect, aperture, focusDist, time1, time2) {\n    let theta = _div_(_mul_(vfov, Math.PI), 180);\n\n    let halfHeight = Math.tan(_div_(theta, 2));\n\n    let halfWidth = _mul_(halfHeight, aspect);\n\n    let origin = lookFrom;\n    let w = normalize(_sub_(lookFrom, lookAt));\n    let u = normalize(cross(vup, w));\n    let v = cross(w, u);\n\n    let lowerLeftCorner = _sub_(origin, _mul_(focusDist, _add_(_add_(_mul_(u, halfWidth), _mul_(v, halfHeight)), w)));\n\n    let horizontal = _mul_(_mul_(_mul_(focusDist, 2), u), halfWidth);\n\n    let vertical = _mul_(_mul_(_mul_(focusDist, 2), v), halfHeight);\n\n    this.time1 = time1;\n    this.time2 = time2;\n    this.u = u;\n    this.v = v;\n    this.origin = origin;\n    this.lowerLeftCorner = lowerLeftCorner;\n    this.horizontal = horizontal;\n    this.vertical = vertical;\n    this.lensRadius = _div_(aperture, 2);\n  }\n\n  getRay(s, t) {\n    let {\n      origin,\n      lowerLeftCorner,\n      horizontal,\n      vertical\n    } = this;\n\n    let rd = _mul_(this.lensRadius, randomInUnitDisk());\n\n    let offset = _add_(_mul_(this.u, rd[0]), _mul_(this.v, rd[1]));\n\n    let direction = _sub_(_add_(_add_(lowerLeftCorner, _mul_(s, horizontal)), _mul_(t, vertical)), origin);\n\n    let time = _add_(this.time1, _mul_(Math.random(), _sub_(this.time2, this.time1)));\n\n    let ray = new Ray(_add_(origin, offset), _sub_(direction, offset), time);\n    return ray;\n  }\n\n}\n\nconst randomInUnitSphere = () => {\n  let p;\n\n  do {\n    let randomVec3 = from(Math.random(), Math.random(), Math.random());\n    p = _sub_(_mul_(2.0, randomVec3), from(1.0, 1.0, 1.0));\n  } while (vec3.squaredLength(p) >= 1.0);\n\n  return p;\n};\n\nclass LambertianMaterial {\n  constructor(albedo) {\n    this.albedo = albedo;\n  }\n\n  scatter(ray, record, ref) {\n    let target = _add_(_add_(record.p, record.normal), randomInUnitSphere());\n\n    let direction = _sub_(target, record.p);\n\n    ref.scattered = new Ray(record.p, direction, ray.time);\n    ref.attenuation = this.albedo;\n    return true;\n  }\n\n}\n\nconst reflect = (v, n) => {\n  return _sub_(v, _mul_(_mul_(2.0, dot(v, n)), n));\n};\n\nclass MetalMaterial {\n  constructor(albedo, fuzz = 1) {\n    this.albedo = albedo;\n    this.fuzz = Math.min(fuzz, 1);\n  }\n\n  scatter(ray, record, ref) {\n    let reflected = reflect(vec3.normalize(vec3.create(), ray.direction()), record.normal);\n    ref.scattered = new Ray(record.p, _add_(reflected, _mul_(this.fuzz, randomInUnitSphere())));\n    ref.attenuation = this.albedo;\n    return dot(ref.scattered.direction(), record.normal) > 0;\n  }\n\n}\n\nconst refract = (v, normal, ni_over_nt, ref) => {\n  let uv = vec3.normalize(vec3.create(), v);\n  let dt = dot(uv, normal);\n\n  let discriminant = _sub_(1.0, _mul_(_mul_(ni_over_nt, ni_over_nt), _sub_(1.0, _mul_(dt, dt))));\n\n  if (discriminant > 0) {\n    ref.refracted = _sub_(_mul_(ni_over_nt, _sub_(uv, _mul_(normal, dt))), _mul_(normal, Math.sqrt(discriminant)));\n    return true;\n  }\n\n  return false;\n};\n\nconst schlick = (consine, refractIndex) => {\n  let r0 = _div_(_sub_(1, refractIndex), _add_(1, refractIndex));\n\n  r0 = _mul_(r0, r0);\n  return _add_(r0, _mul_(_sub_(1, r0), Math.pow(_sub_(1, consine), 5)));\n};\n\nclass DielectricMaterial {\n  constructor(refractIndex) {\n    this.refractIndex = refractIndex;\n  }\n\n  scatter(ray, record, ref) {\n    let outwardNormal = vec3.create();\n    let reflected = reflect(ray.direction(), record.normal);\n    let ni_over_nt = 0.0;\n    let consine = 0.0;\n    ref.attenuation = from(1.0, 1.0, 1.0);\n    let dotResult = dot(ray.direction(), record.normal);\n\n    if (dotResult > 0) {\n      outwardNormal = _negate_(record.normal);\n      ni_over_nt = this.refractIndex;\n      consine = _div_(_mul_(this.refractIndex, dotResult), vec3.length(ray.direction()));\n    } else {\n      outwardNormal = record.normal;\n      ni_over_nt = _div_(1.0, this.refractIndex);\n      consine = _div_(_negate_(dotResult), vec3.length(ray.direction()));\n    }\n\n    let refractProb = 0.0;\n\n    if (refract(ray.direction(), outwardNormal, ni_over_nt, ref)) {\n      refractProb = schlick(consine, this.refractIndex);\n    } else {\n      refractProb = 1.0;\n    }\n\n    if (Math.random() < refractProb) {\n      ref.scattered = new Ray(record.p, reflected);\n    } else {\n      ref.scattered = new Ray(record.p, ref.refracted);\n    }\n\n    return true;\n  }\n\n}\n\nconst color = (ray, world, depth = 0) => {\n  let record = createRecord();\n\n  if (world.hit(ray, 0.001, Infinity, record)) {\n    let ref = {\n      scattered: null,\n      attenuation: 0\n    };\n\n    if (depth >= 50 || !record.material.scatter(ray, record, ref)) {\n      return from(0.0, 0.0, 0.0);\n    }\n\n    return _mul_(ref.attenuation, color(ref.scattered, world, _add_(depth, 1)));\n  }\n\n  let direction = vec3.normalize(vec3.create(), ray.direction());\n  return lerp(_mul_(0.5, _add_(direction[1], 1.0)), from(1.0, 1.0, 1.0), from(0.5, 0.7, 1.0));\n};\n\nconst randomScene = amount => {\n  let list = [];\n  let range = Math.floor(_div_(Math.sqrt(amount), 2));\n\n  let start = _negate_(range);\n\n  let end = +range;\n  list[0] = new Sphere(from(0.0, -1000, 0), 1000, new LambertianMaterial(from(0.5, 0.5, 0.5)));\n  let i = 1;\n  let based = from(4.0, 0.2, 0.0);\n\n  for (let a = start; a < end; a++) {\n    for (let b = start; b < end; b++) {\n      let chooseMat = Math.random();\n      let center = from(_add_(a, _mul_(0.9, Math.random())), 0.2, _add_(b, _mul_(0.9, Math.random())));\n\n      if (vec3.length(_sub_(center, based)) > 0.9) {\n        if (chooseMat < 0.8) {\n          let material = new LambertianMaterial(from(_mul_(Math.random(), Math.random()), _mul_(Math.random(), Math.random()), _mul_(Math.random(), Math.random()))); // list[i++] = new Sphere(center, 0.2, material)\n          // continue\n\n          list[i++] = new MovingSphere(center, _add_(center, from(0, _mul_(0.5, Math.random()), 0)), 0.0, 1.0, 0.2, material);\n        } else if (chooseMat < 0.95) {\n          let material = new MetalMaterial(from(_mul_(0.5, _add_(1, Math.random())), _mul_(0.5, _add_(1, Math.random())), _mul_(0.5, _add_(1, Math.random()))), _mul_(0.5, Math.random()));\n          list[i++] = new Sphere(center, 0.2, material);\n        } else {\n          list[i++] = new Sphere(center, 0.2, new DielectricMaterial(1.5));\n        }\n      }\n    }\n  }\n\n  list[i++] = new Sphere(from(0.0, 1.0, 0.0), 1.0, new DielectricMaterial(1.5));\n  list[i++] = new Sphere(from(-4.0, 1.0, 0.0), 1.0, new LambertianMaterial(from(0.4, 0.2, 0.1)));\n  list[i++] = new Sphere(from(4.0, 1.0, 0.0), 1.0, new MetalMaterial(from(0.7, 0.6, 0.5), 0.0));\n  return new HitableList(list);\n};\n\nexport default (({\n  width = 800,\n  height = 400,\n  amount = 2,\n  lookFrom = from(13.0, 2.0, 3.0),\n  lookAt = from(0.0, 0.0, 0.0),\n  vup = from(0.0, 1.0, 0.0),\n  vfov = 20,\n  aspect = _div_(width, height),\n  focusDist = 10,\n  aperture = 0.1\n}) => {\n  let nx = width;\n  let ny = height;\n  let camera = new Camera(lookFrom, lookAt, vup, vfov, aspect, aperture, focusDist, 0.0, 1.0);\n  let world = randomScene(amount);\n\n  let renderByPosition = (x, y) => {\n    let u = _div_(_add_(x, Math.random()), nx);\n\n    let v = _div_(_add_(y, Math.random()), ny);\n\n    let ray = camera.getRay(u, v);\n    return color(ray, world);\n  };\n\n  let render = function* () {\n    for (let j = _sub_(ny, 1); j >= 0; j--) {\n      for (let i = 0; i < nx; i++) {\n        let [r, g, b] = renderByPosition(i, j);\n        let a = 1;\n        yield r;\n        yield g;\n        yield b;\n        yield a;\n      }\n    }\n  };\n\n  return {\n    render,\n    renderByPosition\n  };\n});","import React, { useState, useEffect, useRef } from 'react'\r\nimport createRayTracing from './ray-tracing'\r\n\r\nconst noop = () => {}\r\nconst frame = (f = noop) =>\r\n  new Promise(resolve => {\r\n    requestAnimationFrame(() => {\r\n      f()\r\n      resolve()\r\n    })\r\n  })\r\n\r\nconst getMSE = (listA, listB) => {\r\n  let sum = 0\r\n  for (let i = 0; i < listA.length; i++) {\r\n    sum += Math.pow(listA[i] - listB[i], 2)\r\n  }\r\n  return sum / listA.length\r\n}\r\n\r\nconst incre = function*(start, end, step = 1) {\r\n  while (start <= end) {\r\n    yield start\r\n    start += step\r\n  }\r\n}\r\n\r\nconst decre = function*(start, end, step = -1) {\r\n  while (start >= end) {\r\n    yield start\r\n    start += step\r\n  }\r\n}\r\n\r\nconst range = function(start, end, step = 1) {\r\n  if (start < end) return incre(start, end, Math.abs(step))\r\n  return decre(start, end, -Math.abs(step))\r\n}\r\n\r\nconst toggle = function*(a, b) {\r\n  while (true) {\r\n    let valueA = a.next()\r\n    let valueB = b.next()\r\n    if (valueA.done && valueB.done) break\r\n    if (!valueA.done) yield valueA.value\r\n    if (!valueB.done) yield valueB.value\r\n  }\r\n}\r\n\r\nconst spread = function*(start, end, step = 1) {\r\n  let middle = Math.floor((end - start) / 2)\r\n  let source = toggle(\r\n    range(middle, start, step),\r\n    range(middle + step, end, step)\r\n  )\r\n  for (let v of source) yield v\r\n}\r\n\r\n// mean squared error\r\nconst sortByMSE = (prev, current) => {\r\n  let result = []\r\n\r\n  for (let i = 0; i < prev.length; i += 4) {\r\n    let index = Math.floor(i / 4)\r\n    let listA = [prev[i + 0], prev[i + 1], prev[i + 2], prev[i + 3]]\r\n    let listB = [current[i + 0], current[i + 1], current[i + 2], current[i + 3]]\r\n\r\n    result[index] = {\r\n      index,\r\n      value: getMSE(listA, listB)\r\n    }\r\n  }\r\n\r\n  return result.sort((a, b) => b.value - a.value)\r\n}\r\n\r\nconst toColor = value => {\r\n  return Math.floor(255.99 * Math.sqrt(value))\r\n}\r\n\r\nexport default function Demo01() {\r\n  let [time, setTime] = useState(0)\r\n  let ref = useRef()\r\n  let deubgRef = useRef()\r\n  let width = 800\r\n  let height = 400\r\n\r\n  useEffect(() => {\r\n    let canvas = ref.current\r\n    let debugCanvas = deubgRef.current\r\n    let ctx = canvas.getContext('2d')\r\n    let debugCtx = debugCanvas.getContext('2d')\r\n    let imageData = ctx.createImageData(width, height)\r\n    let debugImageData = debugCtx.createImageData(width, height)\r\n    let ray = createRayTracing({ width, height, amount: 50 })\r\n    let data = new Float32Array(width * height * 4)\r\n    let prevImageData = new Float32Array(width * height * 4)\r\n    let currImageData = new Float32Array(width * height * 4)\r\n    let renderCount = new Float32Array(width * height * 4)\r\n    let innerCount = 1\r\n    let innerTime = 0\r\n    let tid = null\r\n    let over = false\r\n\r\n    let renderToCanvas = () => {\r\n      ctx.fillColor = `rgba(0, 0, 0, 1)`\r\n      ctx.clearRect(0, 0, width, height)\r\n      ctx.putImageData(imageData, 0, 0)\r\n    }\r\n\r\n    let showDebugInfo = () => {\r\n      let data = renderCount\r\n      for (let i = 0; i < data.length; i++) {\r\n        if ((i + 1) % 4 === 0) {\r\n          debugImageData.data[i] = 255\r\n        } else {\r\n          debugImageData.data[i] = data[i]\r\n        }\r\n      }\r\n      debugCtx.clearRect(0, 0, width, height)\r\n      debugCtx.putImageData(debugImageData, 0, 0)\r\n    }\r\n\r\n    let renderByPosition = (x, y) => {\r\n      let [r, g, b, a = 1] = ray.renderByPosition(x, y)\r\n      let i = ((height - 1 - y) * width + x) * 4\r\n\r\n      data[i + 0] += r\r\n      data[i + 1] += g\r\n      data[i + 2] += b\r\n      data[i + 3] += a\r\n\r\n      renderCount[i + 0] += 1\r\n      renderCount[i + 1] += 1\r\n      renderCount[i + 2] += 1\r\n      renderCount[i + 3] += 1\r\n\r\n      prevImageData[i + 0] = imageData.data[i + 0]\r\n      prevImageData[i + 1] = imageData.data[i + 1]\r\n      prevImageData[i + 2] = imageData.data[i + 2]\r\n      prevImageData[i + 3] = imageData.data[i + 3]\r\n\r\n      imageData.data[i + 0] = toColor(data[i + 0] / renderCount[i + 0])\r\n      imageData.data[i + 1] = toColor(data[i + 1] / renderCount[i + 1])\r\n      imageData.data[i + 2] = toColor(data[i + 2] / renderCount[i + 2])\r\n      imageData.data[i + 3] = toColor(data[i + 3] / renderCount[i + 3])\r\n\r\n      currImageData[i + 0] = imageData.data[i + 0]\r\n      currImageData[i + 1] = imageData.data[i + 1]\r\n      currImageData[i + 2] = imageData.data[i + 2]\r\n      currImageData[i + 3] = imageData.data[i + 3]\r\n    }\r\n\r\n    let render = async function(step = 1) {\r\n      let start = Date.now()\r\n      let duration = 0\r\n\r\n      for (let y of spread(0, height - 1, step)) {\r\n        for (let x of range(0, width - 1, step)) {\r\n          if (over) return\r\n\r\n          renderByPosition(x, y)\r\n          duration = Date.now() - start\r\n          if (duration % 100 === 0) {\r\n            setTime(innerTime + duration)\r\n            await frame(() => {\r\n              renderToCanvas()\r\n              showDebugInfo()\r\n            })\r\n          }\r\n        }\r\n      }\r\n\r\n      if (step === 1) innerCount += 1\r\n      renderToCanvas()\r\n      showDebugInfo()\r\n      setTime((innerTime += duration))\r\n      if (innerCount > 2) {\r\n        scheduleRender()\r\n      } else {\r\n        tid = requestAnimationFrame(() => render())\r\n      }\r\n    }\r\n\r\n    let scheduleRender = async (count = 0) => {\r\n      let list = sortByMSE(prevImageData, currImageData)\r\n      let start = Date.now()\r\n      let duration = 0\r\n\r\n      for (let i = 0; i < 20000; i++) {\r\n        let item = list[i]\r\n        let x = item.index % width\r\n        let y = height - Math.floor(item.index / width)\r\n\r\n        renderByPosition(x, y)\r\n        duration = Date.now() - start\r\n\r\n        if (duration % 100 === 0) {\r\n          setTime(innerTime + duration)\r\n          await frame(() => {\r\n            renderToCanvas()\r\n            showDebugInfo()\r\n          })\r\n        }\r\n        if (over) return\r\n      }\r\n\r\n      if (over) return\r\n\r\n      renderToCanvas()\r\n      setTime((innerTime += Date.now() - start))\r\n      tid = requestAnimationFrame(() => {\r\n        if (count < 5) {\r\n          scheduleRender(count + 1)\r\n        } else {\r\n          render()\r\n        }\r\n      })\r\n    }\r\n\r\n    render(3)\r\n\r\n    return () => {\r\n      over = true\r\n      clearTimeout(tid)\r\n    }\r\n  }, [])\r\n\r\n  return (\r\n    <>\r\n      <canvas\r\n        width={width}\r\n        height={height}\r\n        ref={ref}\r\n        style={{ background: '#000' }}\r\n      />\r\n      <br />\r\n      <canvas width={width} height={height} ref={deubgRef} />\r\n      <h3>光线追踪时间：{(time / 1000).toFixed(2)}秒</h3>\r\n    </>\r\n  )\r\n}\r\n"],"sourceRoot":""}