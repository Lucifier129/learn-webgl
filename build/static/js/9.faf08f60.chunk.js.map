{"version":3,"sources":["../node_modules/_@babel_runtime@7.3.1@@babel/runtime/helpers/esm/defineProperty.js","../node_modules/_@babel_runtime@7.3.1@@babel/runtime/helpers/esm/objectSpread.js","../node_modules/_@babel_runtime@7.3.1@@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/_@babel_runtime@7.3.1@@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/_@babel_runtime@7.3.1@@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/_@babel_runtime@7.3.1@@babel/runtime/helpers/esm/nonIterableSpread.js","../node_modules/_bistate@1.0.0@bistate/dist/lib/createBistate.js","../node_modules/_bistate@1.0.0@bistate/dist/lib/util.js","../node_modules/_regl@1.3.11@regl/dist/regl.js","../node_modules/_bistate@1.0.0@bistate/dist/lib/index.js","../node_modules/_bistate@1.0.0@bistate/dist/lib/createStore.js","../node_modules/_bunny@1.0.1@bunny/index.js","../node_modules/_angle-normals@1.0.0@angle-normals/angle-normals.js"],"names":["_defineProperty","obj","key","value","Object","defineProperty","enumerable","configurable","writable","_objectSpread","target","i","arguments","length","source","ownKeys","keys","getOwnPropertySymbols","concat","filter","sym","getOwnPropertyDescriptor","forEach","__webpack_require__","d","__webpack_exports__","_toConsumableArray","arr","Array","isArray","arr2","_arrayWithoutHoles","iter","Symbol","iterator","prototype","toString","call","from","_iterableToArray","TypeError","_nonIterableSpread","exports","util_1","BISTATE","isBistate","input","getBistateValue","currentProxy","previousProxy","parent_1","getParent","compute","createBistate","isObject","setParent","isMutable","dirtyStateList","mutate","f","isFunction","Error","previousFlag","result","isThenable","list","trigger","release","initialState","scapegoat","consuming","watcher","unwatch","parent","deleteParent","isDirty","notify","includes","push","nextProxy","internal","watch","Proxy","get","Reflect","set","_","deleteProperty","has","initialArray","item","fileArrayBistate","initialObject","fillObjectBistate","default","state","remove","index","indexOf","splice","proto","getPrototypeOf","then","module","isTypedArray","x","Uint8Array","Uint16Array","Uint32Array","Int8Array","Int16Array","Int32Array","Float32Array","Float64Array","Uint8ClampedArray","extend","base","opts","endl","raise","message","error","console","check","pred","encolon","checkOneOf","constructorKeys","leftPad","str","n","ShaderFile","this","name","lines","hasErrors","ShaderLine","number","line","errors","ShaderError","fileNumber","lineNumber","file","guessCommand","stack","pat","exec","pat2","guessCallSite","parseSource","command","split","files","unknown","0","parts","lineNumberInfo","nameInfo","atob","saveCommandRef","object","_commandRef","commandRaise","callSite","checkCommandType","type","GL_CLAMP_TO_EDGE","GL_NEAREST","GL_NEAREST_MIPMAP_NEAREST","GL_LINEAR_MIPMAP_NEAREST","GL_NEAREST_MIPMAP_LINEAR","GL_LINEAR_MIPMAP_LINEAR","GL_FLOAT","GL_UNSIGNED_SHORT_4_4_4_4","GL_UNSIGNED_SHORT_5_5_5_1","GL_UNSIGNED_SHORT_5_6_5","GL_UNSIGNED_INT_24_8_WEBGL","TYPE_SIZE","pixelSize","channels","isPow2","v","check$1","optional","block","parameter","param","possibilities","join","commandParameter","constructor","commandType","data","nni","oneOf","shaderError","gl","shader","getShaderParameter","COMPILE_STATUS","errLog","getShaderInfoLog","typeName","FRAGMENT_SHADER","errMsg","trim","parseErrorLog","annotateFiles","strings","styles","offset","token","tokenPat","Math","max","document","window","chrome","log","apply","style","linkError","program","fragShader","vertShader","getProgramParameter","LINK_STATUS","getProgramInfoLog","fragParse","vertParse","header","saveDrawInfo","uniforms","attributes","stringStore","id","addProps","dict","u","_fragId","static","frag","_vertId","vert","uniformSet","_uniformSet","dynamic","attributeSet","_attributeSet","_hasCount","framebufferFormat","attachment","texFormats","rbFormats","texture","_texture","internalformat","renderbuffer","_renderbuffer","format","texture2D","info","mipData","limits","w","width","h","height","c","maxTextureSize","wrapS","wrapT","mipmask","minFilter","extensions","magFilter","genMipmaps","mipimages","images","mw","mh","img","compressed","rowSize","ceil","unpackAlignment","byteLength","element","copy","textureCube","faces","face","mipmaps","j","VARIABLE_COUNTER","DYN_FUNC","DynamicVariable","escapeStr","replace","toAccessorString","splitParts","firstChar","charAt","lastChar","substr","subparts","define","isDynamic","_reglType","unbox","path","accessor","raf","next","requestAnimationFrame","cb","setTimeout","cancel","cancelAnimationFrame","clearTimeout","clock","performance","now","Date","parseExtensions","getElement","desc","querySelector","parseArgs","args_","container","canvas","args","contextAttributes","optionalExtensions","pixelRatio","devicePixelRatio","profile","onDone","err","onDestroy","nodeName","appendChild","getBoundingClientRect","drawArrays","drawElements","isWebGLContext","toLowerCase","createElement","resize","innerWidth","innerHeight","body","bounds","right","left","bottom","top","border","margin","padding","position","addEventListener","removeEventListener","removeChild","createCanvas","getContext","e","createContext","loop","GL_BYTE$1","GL_UNSIGNED_BYTE$2","GL_SHORT$1","GL_UNSIGNED_SHORT$1","GL_INT$1","GL_UNSIGNED_INT$1","GL_FLOAT$2","log2","r","shift","createPool","bufferPool","alloc","sz","nextPow16","bin","pop","ArrayBuffer","free","buf","allocType","subarray","freeType","array","buffer","pool","zero","wrapLimits","maxAnisotropic","ext_texture_filter_anisotropic","getParameter","maxDrawbuffers","maxColorAttachments","webgl_draw_buffers","readFloat","oes_texture_float","readFloatTexture","createTexture","bindTexture","texImage2D","fbo","createFramebuffer","bindFramebuffer","framebufferTexture2D","checkFramebufferStatus","viewport","clearColor","clear","pixels","readPixels","getError","deleteFramebuffer","deleteTexture","isIE","navigator","test","userAgent","appVersion","npotTextureCube","cubeTexture","activeTexture","colorBits","depthBits","stencilBits","subpixelBits","ext","pointSizeDims","lineWidthDims","maxViewportDims","maxCombinedTextureUnits","maxCubeMapSize","maxRenderbufferSize","maxTextureUnits","maxAttributes","maxVertexUniforms","maxVertexTextureUnits","maxVaryingVectors","maxFragmentUniforms","glsl","renderer","vendor","version","isNDArrayLike","shape","stride","values","map","flattenUtils","array_","flatten","out_","out","nx","flatten1D","ny","ptr","row","flatten2D","flatten3D","flattenRec","level","nz","ptr_","col","k","arrayTypes","[object Int8Array]","[object Int16Array]","[object Int32Array]","[object Uint8Array]","[object Uint8ClampedArray]","[object Uint16Array]","[object Uint32Array]","[object Float32Array]","[object Float64Array]","[object ArrayBuffer]","glTypes","int8","int16","int32","uint8","uint16","uint32","float","float32","usageTypes","stream","arrayFlatten","arrayShape","GL_STATIC_DRAW","GL_STREAM_DRAW","GL_UNSIGNED_BYTE$3","GL_FLOAT$3","DTYPES_SIZES","typedArrayCode","copyArray","inp","transpose","shapeX","shapeY","strideX","strideY","primTypes","points","point","triangles","triangle","line loop","line strip","triangle strip","triangle fan","GL_POINTS","GL_LINES","GL_TRIANGLES","GL_BYTE$2","GL_UNSIGNED_BYTE$4","GL_SHORT$2","GL_UNSIGNED_SHORT$2","GL_INT$2","GL_UNSIGNED_INT$2","GL_ELEMENT_ARRAY_BUFFER","GL_STREAM_DRAW$1","GL_STATIC_DRAW$1","FLOAT","INT","GL_UNSIGNED_SHORT$4","convertToHalfFloat","ushorts","isNaN","Infinity","sgn","exp","frac","s","isArrayLike","isPow2$1","GL_COMPRESSED_TEXTURE_FORMATS","GL_TEXTURE_2D$1","GL_TEXTURE_CUBE_MAP$1","GL_TEXTURE_CUBE_MAP_POSITIVE_X$1","GL_RGBA$1","GL_ALPHA","GL_RGB","GL_LUMINANCE","GL_LUMINANCE_ALPHA","GL_RGBA4","GL_RGB5_A1","GL_RGB565","GL_UNSIGNED_SHORT_4_4_4_4$1","GL_UNSIGNED_SHORT_5_5_5_1$1","GL_UNSIGNED_SHORT_5_6_5$1","GL_UNSIGNED_INT_24_8_WEBGL$1","GL_DEPTH_COMPONENT","GL_DEPTH_STENCIL","GL_SRGB_EXT","GL_SRGB_ALPHA_EXT","GL_HALF_FLOAT_OES$1","GL_COMPRESSED_RGB_S3TC_DXT1_EXT","GL_COMPRESSED_RGBA_S3TC_DXT1_EXT","GL_COMPRESSED_RGBA_S3TC_DXT3_EXT","GL_COMPRESSED_RGBA_S3TC_DXT5_EXT","GL_COMPRESSED_RGB_ATC_WEBGL","GL_COMPRESSED_RGBA_ATC_EXPLICIT_ALPHA_WEBGL","GL_COMPRESSED_RGBA_ATC_INTERPOLATED_ALPHA_WEBGL","GL_COMPRESSED_RGB_PVRTC_4BPPV1_IMG","GL_COMPRESSED_RGB_PVRTC_2BPPV1_IMG","GL_COMPRESSED_RGBA_PVRTC_4BPPV1_IMG","GL_COMPRESSED_RGBA_PVRTC_2BPPV1_IMG","GL_COMPRESSED_RGB_ETC1_WEBGL","GL_UNSIGNED_BYTE$5","GL_UNSIGNED_SHORT$3","GL_UNSIGNED_INT$3","GL_FLOAT$4","GL_TEXTURE_WRAP_S","GL_TEXTURE_WRAP_T","GL_REPEAT","GL_CLAMP_TO_EDGE$1","GL_MIRRORED_REPEAT","GL_TEXTURE_MAG_FILTER","GL_TEXTURE_MIN_FILTER","GL_NEAREST$1","GL_LINEAR","GL_NEAREST_MIPMAP_NEAREST$1","GL_LINEAR_MIPMAP_NEAREST$1","GL_NEAREST_MIPMAP_LINEAR$1","GL_LINEAR_MIPMAP_LINEAR$1","GL_GENERATE_MIPMAP_HINT","GL_DONT_CARE","GL_FASTEST","GL_NICEST","GL_TEXTURE_MAX_ANISOTROPY_EXT","GL_UNPACK_ALIGNMENT","GL_UNPACK_FLIP_Y_WEBGL","GL_UNPACK_PREMULTIPLY_ALPHA_WEBGL","GL_UNPACK_COLORSPACE_CONVERSION_WEBGL","GL_BROWSER_DEFAULT_WEBGL","GL_TEXTURE0$1","MIPMAP_FILTERS","CHANNELS_FORMAT","FORMAT_CHANNELS","objectName","CANVAS_CLASS","CONTEXT2D_CLASS","BITMAP_CLASS","IMAGE_CLASS","VIDEO_CLASS","PIXEL_CLASSES","TYPE_SIZES","FORMAT_SIZES_SPECIAL","isNumericArray","isRectArray","classString","isCanvasElement","isPixelData","className","typedArrayCode$1","preConvert","image","postConvert","getTextureSize","isMipmap","isCube","total","createTextureSet","reglPoll","contextState","stats","config","mipmapHint","don't care","dont care","nice","fast","wrapModes","repeat","clamp","mirror","magFilters","nearest","linear","minFilters","mipmap","nearest mipmap nearest","linear mipmap nearest","nearest mipmap linear","linear mipmap linear","colorSpace","none","browser","textureTypes","rgba4","rgb565","rgb5 a1","textureFormats","alpha","luminance","luminance alpha","rgb","rgba","compressedTextureFormats","ext_srgb","srgb","srgba","oes_texture_half_float","webgl_depth_texture","depth","depth stencil","webgl_compressed_texture_s3tc","rgb s3tc dxt1","rgba s3tc dxt1","rgba s3tc dxt3","rgba s3tc dxt5","webgl_compressed_texture_atc","rgb atc","rgba atc explicit alpha","rgba atc interpolated alpha","webgl_compressed_texture_pvrtc","rgb pvrtc 4bppv1","rgb pvrtc 2bppv1","rgba pvrtc 4bppv1","rgba pvrtc 2bppv1","webgl_compressed_texture_etc1","supportedCompressedFormats","slice","supportedFormats","textureFormatsInvert","val","textureTypesInvert","magFiltersInvert","minFiltersInvert","wrapModesInvert","colorFormats","reduce","color","glenum","TexFlags","premultiplyAlpha","flipY","copyFlags","other","parseFlags","flags","options","alignment","hasChannels","radius","hasFormat","formatStr","setFlags","pixelStorei","TexImage","xOffset","yOffset","needsFree","needsCopy","parseImage","y","viewW","viewportWidth","viewH","viewportHeight","converted","convertData","shapeC","strideC","p","transposeData","isBitmap","isImageElement","naturalWidth","naturalHeight","isVideoElement","videoWidth","videoHeight","dd","allocData","setImage","miplevel","compressedTexImage2D","copyTexImage2D","nullData","setSubImage","texSubImage2D","compressedTexSubImage2D","copyTexSubImage2D","imagePool","allocImage","freeImage","MipMap","parseMipMapFromShape","parseMipMapFromObject","imgData","setMipMap","mipPool","allocMipMap","freeMipMap","TexInfo","anisotropic","parseTexInfo","min","mag","wrap","optWrapS","optWrapT","hasMipMap","setTexInfo","texParameteri","hint","generateMipmap","textureCount","textureSet","numTexUnits","textureUnits","REGLTexture","refCount","unit","bindCount","texInfo","size","tempBind","tempRestore","prev","destroy","handle","params","bind","unbind","decRef","getTotalTextureSize","create2D","a","b","reglTexture2D","subimage","x_","y_","level_","imageData","w_","h_","_w","_h","createCube","a0","a1","a2","a3","a4","a5","cubeCount","reglTextureCube","face_input","radius_","getTexture","wrapper","restore","tex","GL_RENDERBUFFER","GL_RGBA4$1","FORMAT_SIZES","getRenderbufferSize","wrapRenderbuffers","formatTypes","stencil","ext_color_buffer_half_float","webgl_color_buffer_float","formatTypesInvert","renderbufferCount","renderbufferSet","REGLRenderbuffer","rb","bindRenderbuffer","deleteRenderbuffer","getTotalRenderbufferSize","create","createRenderbuffer","reglRenderbuffer","renderbufferStorage","GL_FRAMEBUFFER$1","GL_RENDERBUFFER$1","GL_TEXTURE_2D$2","GL_TEXTURE_CUBE_MAP_POSITIVE_X$2","GL_COLOR_ATTACHMENT0$1","GL_DEPTH_ATTACHMENT","GL_STENCIL_ATTACHMENT","GL_DEPTH_STENCIL_ATTACHMENT","GL_FRAMEBUFFER_COMPLETE$1","GL_DEPTH_COMPONENT$1","colorTextureFormatEnums","textureFormatChannels","textureTypeSizes","GL_DEPTH_COMPONENT16$1","GL_STENCIL_INDEX8$1","GL_DEPTH_STENCIL$2","colorRenderbufferFormatEnums","statusCode","GL_FLOAT$6","AttributeRecord","z","normalized","divisor","GL_FRAGMENT_SHADER","GL_VERTEX_SHADER","GL_ACTIVE_UNIFORMS","GL_ACTIVE_ATTRIBUTES","GL_RGBA$3","GL_UNSIGNED_BYTE$7","GL_PACK_ALIGNMENT","GL_FLOAT$7","wrapReadPixels","framebufferState","context","glAttributes","readPixelsImpl","preserveDrawingBuffer","colorAttachments","framebufferWidth","framebufferHeight","setFBO","framebuffer","readPixelsFBO","CUTE_COMPONENTS","GL_UNSIGNED_BYTE$8","ATTRIB_STATE_POINTER","ATTRIB_STATE_CONSTANT","DYN_FUNC$1","DYN_PROP$1","DYN_CONTEXT$1","DYN_STATE$1","DYN_THUNK","S_DITHER","S_BLEND_ENABLE","S_BLEND_COLOR","S_BLEND_EQUATION","S_BLEND_FUNC","S_DEPTH_ENABLE","S_DEPTH_FUNC","S_DEPTH_RANGE","S_DEPTH_MASK","S_COLOR_MASK","S_CULL_ENABLE","S_CULL_FACE","S_FRONT_FACE","S_LINE_WIDTH","S_POLYGON_OFFSET_ENABLE","S_POLYGON_OFFSET_OFFSET","S_SAMPLE_ALPHA","S_SAMPLE_ENABLE","S_SAMPLE_COVERAGE","S_STENCIL_ENABLE","S_STENCIL_MASK","S_STENCIL_FUNC","S_STENCIL_OPFRONT","S_STENCIL_OPBACK","S_SCISSOR_ENABLE","S_SCISSOR_BOX","S_VIEWPORT","S_PROFILE","S_FRAMEBUFFER","S_VERT","S_FRAG","S_ELEMENTS","S_PRIMITIVE","S_COUNT","S_OFFSET","S_INSTANCES","S_FRAMEBUFFER_WIDTH","S_FRAMEBUFFER_HEIGHT","S_VIEWPORT_WIDTH","S_VIEWPORT_HEIGHT","S_DRAWINGBUFFER_WIDTH","S_DRAWINGBUFFER","S_DRAWINGBUFFER_HEIGHT","NESTED_OPTIONS","GL_ARRAY_BUFFER$1","GL_ELEMENT_ARRAY_BUFFER$1","GL_TEXTURE_2D$3","GL_TEXTURE_CUBE_MAP$2","GL_CULL_FACE","GL_BLEND","GL_DITHER","GL_STENCIL_TEST","GL_DEPTH_TEST","GL_SCISSOR_TEST","GL_POLYGON_OFFSET_FILL","GL_SAMPLE_ALPHA_TO_COVERAGE","GL_SAMPLE_COVERAGE","GL_FLOAT$8","GL_FLOAT_VEC2","GL_FLOAT_VEC3","GL_FLOAT_VEC4","GL_INT$3","GL_INT_VEC2","GL_INT_VEC3","GL_INT_VEC4","GL_BOOL","GL_BOOL_VEC2","GL_BOOL_VEC3","GL_BOOL_VEC4","GL_FLOAT_MAT2","GL_FLOAT_MAT3","GL_FLOAT_MAT4","GL_SAMPLER_2D","GL_SAMPLER_CUBE","GL_TRIANGLES$1","GL_FRONT","GL_BACK","GL_CW","GL_CCW","GL_MIN_EXT","GL_MAX_EXT","GL_ALWAYS","GL_KEEP","GL_ZERO","GL_ONE","GL_FUNC_ADD","GL_LESS","GL_FRAMEBUFFER$2","GL_COLOR_ATTACHMENT0$2","blendFuncs","1","one","src color","one minus src color","src alpha","one minus src alpha","dst color","one minus dst color","dst alpha","one minus dst alpha","constant color","one minus constant color","constant alpha","one minus constant alpha","src alpha saturate","invalidBlendCombinations","compareFuncs","never","less","<","equal","=","==","===","lequal","<=","greater",">","notequal","!=","!==","gequal",">=","always","stencilOps","keep","increment","decrement","increment wrap","decrement wrap","invert","shaderType","orientationType","cw","ccw","isBufferArgs","sortState","sort","Declaration","thisDep","contextDep","propDep","append","isStatic","decl","createStaticDecl","createDynamicDecl","dyn","numArgs","SCOPE_DECL","reglCore","bufferState","elementState","textureState","uniformState","attributeState","shaderState","drawState","timer","Record","blendEquations","add","subtract","reverse subtract","ext_blend_minmax","extInstancing","angle_instanced_arrays","extDrawBuffers","currentState","dirty","nextState","GL_STATE_NAMES","GL_FLAGS","GL_VARIABLES","propName","stateFlag","sname","cap","init","stateVariable","func","drawingBufferWidth","drawingBufferHeight","sharedState","current","draw","elements","sharedConstants","backBuffer","drawBuffer","drawCallCounter","createREGLEnvironment","env","varCounter","linkedNames","linkedValues","code","vars","def","scope","entry","exit","entryToString","exitToString","save","prop","globalBlock","procedures","global","link","proc","count","arg","bodyToString","cond","thenBlock","elseBlock","thenToString","elseToString","else","elseClause","compile","src","Function","createEnvironment","batchId","SHARED","shared","props","CHECK","commandStr","assert","nextVars","currentVars","variable","constants","JSON","stringify","invoke","argList","ref","attribCache","scopeAttribs","scopeAttrib","binding","parseArguments","staticOptions","dynamicOptions","KEY_NAMES","checkKeys","getFramebuffer","FRAMEBUFFER","CONTEXT","FRAMEBUFFER_FUNC","FRAMEBUFFER_STATE","parseFramebuffer","viewportAndScissor","parseBox","box","BOX_W","BOX_H","dynBox","BOX","BOX_X","BOX_Y","prevViewport","VIEWPORT","scissor_box","parseViewportScissor","getElements","ELEMENTS","IS_BUFFER_ARGS","ELEMENT_STATE","elementDefn","elementStream","ifte","parseElements","parseParam","isOffset","OFFSET","dynValue","primitive","dynPrimitive","PRIM_TYPES","prim","parsePrimitive","dynCount","MISSING","DYNAMIC","parseVertCount","instances","parseDraw","STATE","parseStatic","parseDynamic","COMPARE_FUNCS","srcRGB","srcAlpha","dstRGB","dst","dstAlpha","BLEND_FUNCS","read","prefix","suffix","INVALID_BLEND_COMBINATIONS","SRC_RGB","SRC_ALPHA","BLEND_EQUATIONS","RGB","ALPHA","checkProp","cmp","mask","fail","zfail","zpass","STENCIL_OPS","factor","units","sampleValue","sampleInvert","parseGLState","parseShader","progVar","fragId","vertId","SHADER_STATE","progDef","parseProgram","copyBox","defn","profileEnable","enable","parseProfile","staticUniforms","dynamicUniforms","UNIFORMS","reglType","parseUniforms","staticAttributes","dynamicAttributes","attributeDefs","attribute","record","getBuffer","constant","VALID_KEYS","dtype","cache","isStream","VALUE","BUFFER_STATE","defaultRecord","BUFFER","TYPE","emitReadRecord","parseAttributes","staticContext","dynamicContext","parseContext","emitContext","contextEnter","emitPollFramebuffer","skipCheck","EXT_DRAW_BUFFERS","GL","NEXT","DRAW_BUFFERS","BACK_BUFFER","emitPollState","CURRENT_VARS","NEXT_VARS","CURRENT_STATE","NEXT_STATE","CURRENT","emitSetOptions","flag","injectExtensions","instancing","emitProfile","useScope","incrementCounter","CPU_START","QUERY_COUNTER","USE_PROFILE","STATS","TIMER","profileArg","perfCounter","emitProfileStart","emitProfileEnd","scopeProfile","start","end","emitAttributes","ATTRIBUTE","LOCATION","BINDING","CONST_COMPONENTS","COMMON_KEYS","emitBuffer","SIZE","DIVISOR","emitConstant","emitBindAttribute","typeLength","emitUniforms","infix","uniform","UNIFORM","TEX_VALUE","MAT_VALUE","dim","checkType","checkVector","checkTexture","unroll","TEX","matSize","pow","STORAGE","emitDraw","outer","inner","DRAW_STATE","drawOptions","contextDynamic","emitElements","emitValue","INSTANCES","EXT_INSTANCING","PRIMITIVE","COUNT","emitCount","ELEMENT_TYPE","elementsStatic","emitInstancing","emitRegular","createBody","emitBody","parentEnv","emitDrawBody","emitBatchDynamicShaderBody","all","emitBatchBody","BATCH_ID","PROPS","isInnerDefn","isOuterDefn","needsContext","needsFramebuffer","progCache","PROGRAM","PROG_ID","CACHED_PROC","splatObject","isDynamicObject","globals","objectRef","deps","procs","poll","refresh","common","INSTANCING","drawCache","emitDrawProc","saveShader","opt","emitScopeProc","batch","progDefn","batchCache","emitBatchProc","GL_QUERY_RESULT_EXT","GL_QUERY_RESULT_AVAILABLE_EXT","GL_TIME_ELAPSED_EXT","createTimer","ext_disjoint_timer_query","queryPool","freeQuery","query","pendingQueries","PendingStats","startQueryIndex","endQueryIndex","sum","pendingStatsPool","freePendingStats","pendingStats","pushScopeStats","ps","timeSum","queryPtr","beginQuery","createQueryEXT","beginQueryEXT","endQuery","endQueryEXT","update","queryTime","getQueryObjectEXT","startPtr","endPtr","gpuTime","getNumPendingQueries","deleteQueryEXT","GL_COLOR_BUFFER_BIT","GL_DEPTH_BUFFER_BIT","GL_STENCIL_BUFFER_BIT","GL_ARRAY_BUFFER","CONTEXT_LOST_EVENT","CONTEXT_RESTORED_EVENT","DYN_PROP","DYN_CONTEXT","DYN_STATE","find","haystack","needle","getContextAttributes","contextLost","isContextLost","extensionState","tryLoadExtension","name_","getExtension","createExtensionCache","stringIds","","stringValues","createStringStore","stats$$1","bufferCount","elementsCount","framebufferCount","shaderCount","START_TIME","WIDTH","HEIGHT","tick","time","NUM_ATTRIBUTES","attributeBindings","wrapAttributeState","bufferSet","REGLBuffer","createBuffer","usage","dimension","persistentData","bindBuffer","streamPool","initBufferFromTypedArray","bufferData","initBufferFromData","persist","flatData","typedData","disableVertexAttribArray","deleteBuffer","getTotalBufferSize","deferInit","persistent","reglBuffer","setSubData","bufferSubData","_buffer","subdata","offset_","createStream","destroyStream","stream$$1","_initBuffer","wrapBufferState","elementSet","elementCount","elementTypes","REGLElementBuffer","primType","vertCount","oes_element_index_uint","initElements","predictedType","destroyElements","reglElements","_elements","wrapElementsState","fragShaders","vertShaders","ActiveInfo","location","insertActiveInfo","getShader","createShader","shaderSource","compileShader","programCache","programList","PROGRAM_COUNTER","REGLProgram","uniformsCount","attributesCount","linkProgram","createProgram","attachShader","numUniforms","getActiveUniform","getUniformLocation","numAttributes","getActiveAttrib","getAttribLocation","getMaxUniformsCount","m","getMaxAttributesCount","deleteShader","deleteProgram","wrapShaderState","core","renderbufferState","cur","colorTextureFormats","colorRenderbufferFormats","colorTypes","FramebufferAttachment","incRefAndCheckShape","tw","th","attach","framebufferRenderbuffer","parseAttachment","allocAttachment","isTexture","unwrapAttachment","resizeAttachment","framebufferSet","REGLFramebuffer","depthAttachment","stencilAttachment","depthStencilAttachment","decFBORefs","_destroy","updateFramebuffer","status","createFBO","reglFramebuffer","needsDepth","needsStencil","colorBuffer","colorTexture","colorFormat","colorType","colorCount","depthBuffer","stencilBuffer","depthStencilBuffer","depthStencilTexture","colors","depthTexture","depthStencil","commonColorAttachmentSize","colorAttachmentSize","_framebuffer","use","reglFramebufferCube","colorCubes","cubeMapParams","cube","fb","wrapFBOState","rafCallbacks","lossCallbacks","restoreCallbacks","destroyCallbacks","activeRAF","handleRAF","_poll","flush","startRAF","stopRAF","handleContextLoss","event","preventDefault","handleContextRestored","compileProcedure","separateDynamic","staticItems","dynamicItems","option","merge","child","op","opBack","opFront","flattenNestedOptions","cpuTime","compiled","EMPTY_ARRAY","reserve","clearImpl","clearFlags","clearDepth","clearStencil","frame","pendingCancel","pollViewport","scissorBox","regl","framebuffer_reglType","framebufferCube","on","callback","callbacks","hasExtension","_gl","_refresh","factory","__importDefault","mod","__esModule","createBistate_1","createStore_1","createStore","__read","o","ar","done","__spread","__importStar","hasOwnProperty","listenerList","publish","listener","getState","subscribe","positions","cells","hypot","sqrt","weight","atan2","mulAdd","dest","numVerts","numCells","normals","cell","abx","aby","abz","ab","bcx","bcy","bcz","bc","cax","cay","caz","ca","nl","l"],"mappings":"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","file":"static/js/9.faf08f60.chunk.js","sourcesContent":["export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}","import defineProperty from \"./defineProperty\";\nexport default function _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n\n    ownKeys.forEach(function (key) {\n      defineProperty(target, key, source[key]);\n    });\n  }\n\n  return target;\n}","import arrayWithoutHoles from \"./arrayWithoutHoles\";\nimport iterableToArray from \"./iterableToArray\";\nimport nonIterableSpread from \"./nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || nonIterableSpread();\n}","export default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  }\n}","export default function _iterableToArray(iter) {\n  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar util_1 = require(\"./util\");\n\nvar BISTATE = Symbol('BISTATE');\n\nexports.isBistate = function (input) {\n  return !!(input && input[BISTATE]);\n};\n\nvar getBistateValue = function getBistateValue(value, currentProxy, previousProxy) {\n  if (previousProxy && exports.isBistate(value)) {\n    var parent_1 = value[BISTATE].getParent(); // reuse bistate\n\n    if (parent_1 === previousProxy) {\n      value = value[BISTATE].compute();\n    } else {\n      value = createBistate(value);\n    }\n  } else if (util_1.isArray(value) || util_1.isObject(value)) {\n    value = createBistate(value);\n  }\n\n  if (exports.isBistate(value)) {\n    value[BISTATE].setParent(currentProxy);\n  }\n\n  return value;\n};\n\nvar fillObjectBistate = function fillObjectBistate(currentProxy, initialObject, target, scapegoat, previousProxy) {\n  for (var key in initialObject) {\n    var value = getBistateValue(initialObject[key], currentProxy, previousProxy);\n    scapegoat[key] = value;\n    target[key] = value;\n  }\n};\n\nvar fileArrayBistate = function fileArrayBistate(currentProxy, initialArray, target, scapegoat, previousProxy) {\n  for (var i = 0; i < initialArray.length; i++) {\n    var item = getBistateValue(initialArray[i], currentProxy, previousProxy);\n    scapegoat[i] = item;\n    target[i] = item;\n  }\n};\n\nvar isMutable = false;\nvar dirtyStateList = [];\n\nvar release = function release() {\n  var list = dirtyStateList;\n  isMutable = false;\n  dirtyStateList = [];\n\n  for (var i = 0; i < list.length; i++) {\n    var item = list[i];\n    item[BISTATE].trigger();\n  }\n};\n\nexports.mutate = function (f) {\n  if (!util_1.isFunction(f)) {\n    throw new Error(\"Expected f in mutate(f) is a function, but got \" + f + \" \");\n  }\n\n  var previousFlag = isMutable;\n  isMutable = true;\n\n  try {\n    var result = f();\n\n    if (util_1.isThenable(result)) {\n      throw new Error(\"mutate(f) don't support async function\");\n    }\n\n    return result;\n  } finally {\n    if (!previousFlag) release();\n  }\n};\n\nvar createBistate = function createBistate(initialState, previousProxy) {\n  if (previousProxy === void 0) {\n    previousProxy = null;\n  }\n\n  if (!util_1.isArray(initialState) && !util_1.isObject(initialState)) {\n    throw new Error(\"Expected initialState to be array or plain object, but got \" + initialState);\n  }\n\n  var scapegoat = util_1.isArray(initialState) ? [] : {};\n  var target = util_1.isArray(initialState) ? [] : {};\n  var consuming = false;\n  var watcher = null;\n\n  var watch = function watch(f) {\n    if (watcher) throw new Error(\"bistate can be watched twice\");\n    if (!scapegoat) throw new Error(\"current state is immutable, can not be watched now\");\n    if (parent) throw new Error(\"Only root node can be watched\");\n    watcher = f;\n\n    if (isDirty) {\n      trigger();\n    } else {\n      consuming = true;\n    }\n\n    return unwatch;\n  };\n\n  var unwatch = function unwatch() {\n    consuming = false;\n    watcher = null;\n  };\n\n  var parent = null;\n\n  var setParent = function setParent(input) {\n    parent = input;\n  };\n\n  var getParent = function getParent() {\n    return parent;\n  };\n\n  var deleteParent = function deleteParent() {\n    parent = null;\n  };\n\n  var isDirty = false;\n\n  var notify = function notify() {\n    isDirty = true;\n\n    if (consuming && !dirtyStateList.includes(currentProxy)) {\n      dirtyStateList.push(currentProxy);\n    }\n\n    if (parent) {\n      parent[BISTATE].notify();\n    }\n  };\n\n  var trigger = function trigger() {\n    if (!watcher) return;\n    var f = watcher;\n    var nextProxy = compute();\n\n    if (nextProxy !== currentProxy) {\n      f(nextProxy);\n    }\n  };\n\n  var compute = function compute() {\n    if (!isDirty) return currentProxy;\n    isDirty = false;\n    /**\r\n     * redo\r\n     * create nextProxy based on scapegoat and target\r\n     * reuse unchanged value as possible\r\n     */\n\n    var nextProxy = createBistate(scapegoat, currentProxy);\n    /**\r\n     * undo\r\n     * clear scapegoat to keep currentProxy as immutable\r\n     */\n\n    scapegoat = null;\n    deleteParent();\n    unwatch();\n    return nextProxy;\n  };\n\n  var internal = {\n    watch: watch,\n    setParent: setParent,\n    getParent: getParent,\n    deleteParent: deleteParent,\n    notify: notify,\n    compute: compute,\n    trigger: trigger\n  };\n  var handlers = {\n    get: function get(target, key) {\n      if (key === BISTATE) return internal;\n\n      if (isMutable && scapegoat) {\n        return Reflect.get(scapegoat, key);\n      } else {\n        return Reflect.get(target, key);\n      }\n    },\n    set: function set(_, key, value) {\n      if (isMutable && scapegoat) {\n        var result = Reflect.set(scapegoat, key, value);\n        notify();\n        return result;\n      } else {\n        throw new Error(\"state is immutable, it's not allow to set property \" + key);\n      }\n    },\n    deleteProperty: function deleteProperty(_, key) {\n      if (isMutable && scapegoat) {\n        var result = Reflect.deleteProperty(scapegoat, key);\n        notify();\n        return result;\n      } else {\n        throw new Error(\"state is immutable, it's not allow to delete property \" + key);\n      }\n    },\n    has: function has(target, key) {\n      if (isMutable && scapegoat) {\n        return Reflect.has(scapegoat, key);\n      } else {\n        return Reflect.has(target, key);\n      }\n    },\n    ownKeys: function ownKeys(target) {\n      if (isMutable && scapegoat) {\n        return Reflect.ownKeys(scapegoat);\n      } else {\n        return Reflect.ownKeys(target);\n      }\n    }\n  };\n  var currentProxy = new Proxy(target, handlers);\n\n  if (util_1.isArray(currentProxy)) {\n    fileArrayBistate(currentProxy, initialState, target, scapegoat, previousProxy);\n  } else {\n    fillObjectBistate(currentProxy, initialState, target, scapegoat, previousProxy);\n  } // clear previousProxy\n\n\n  previousProxy = null; // clear initialState\n\n  initialState = null;\n  return currentProxy;\n};\n\nfunction default_1(initialState) {\n  return createBistate(initialState, null);\n}\n\nexports.default = default_1;\n\nexports.watch = function (state, watcher) {\n  if (!exports.isBistate(state)) {\n    throw new Error(\"Expected state to be a bistate, but received \" + state);\n  }\n\n  if (!util_1.isFunction(watcher)) {\n    throw new Error(\"Expected watcher to be a function, but received \" + watcher);\n  }\n\n  return state[BISTATE].watch(watcher);\n};\n\nexports.remove = function (state) {\n  if (!exports.isBistate(state)) {\n    throw new Error(\"Expected state to be a bistate, but received \" + state);\n  }\n\n  var parent = state[BISTATE].getParent();\n  if (!parent) return;\n\n  if (util_1.isArray(parent)) {\n    var index = parent.indexOf(state);\n    parent.splice(index, 1);\n    return;\n  }\n\n  if (util_1.isObject(parent)) {\n    for (var key in parent) {\n      var value = parent[key];\n\n      if (value === state) {\n        delete parent[key];\n        return;\n      }\n    }\n  }\n};","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isArray = Array.isArray;\n\nexports.isFunction = function (input) {\n  return typeof input === 'function';\n};\n\nexports.isObject = function (input) {\n  if (typeof input !== 'object' || input === null) return false;\n  var proto = input;\n\n  while (Object.getPrototypeOf(proto) !== null) {\n    proto = Object.getPrototypeOf(proto);\n  }\n\n  return Object.getPrototypeOf(input) === proto;\n};\n\nexports.isThenable = function (input) {\n  return !!(input && typeof input.then === 'function');\n};","(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() : typeof define === 'function' && define.amd ? define(factory) : global.createREGL = factory();\n})(this, function () {\n  'use strict';\n\n  var isTypedArray = function isTypedArray(x) {\n    return x instanceof Uint8Array || x instanceof Uint16Array || x instanceof Uint32Array || x instanceof Int8Array || x instanceof Int16Array || x instanceof Int32Array || x instanceof Float32Array || x instanceof Float64Array || x instanceof Uint8ClampedArray;\n  };\n\n  var extend = function extend(base, opts) {\n    var keys = Object.keys(opts);\n\n    for (var i = 0; i < keys.length; ++i) {\n      base[keys[i]] = opts[keys[i]];\n    }\n\n    return base;\n  }; // Error checking and parameter validation.\n  //\n  // Statements for the form `check.someProcedure(...)` get removed by\n  // a browserify transform for optimized/minified bundles.\n  //\n\n  /* globals atob */\n\n\n  var endl = '\\n'; // only used for extracting shader names.  if atob not present, then errors\n  // will be slightly crappier\n\n  function decodeB64(str) {\n    if (typeof atob !== 'undefined') {\n      return atob(str);\n    }\n\n    return 'base64:' + str;\n  }\n\n  function raise(message) {\n    var error = new Error('(regl) ' + message);\n    console.error(error);\n    throw error;\n  }\n\n  function check(pred, message) {\n    if (!pred) {\n      raise(message);\n    }\n  }\n\n  function encolon(message) {\n    if (message) {\n      return ': ' + message;\n    }\n\n    return '';\n  }\n\n  function checkParameter(param, possibilities, message) {\n    if (!(param in possibilities)) {\n      raise('unknown parameter (' + param + ')' + encolon(message) + '. possible values: ' + Object.keys(possibilities).join());\n    }\n  }\n\n  function checkIsTypedArray(data, message) {\n    if (!isTypedArray(data)) {\n      raise('invalid parameter type' + encolon(message) + '. must be a typed array');\n    }\n  }\n\n  function checkTypeOf(value, type, message) {\n    if (typeof value !== type) {\n      raise('invalid parameter type' + encolon(message) + '. expected ' + type + ', got ' + typeof value);\n    }\n  }\n\n  function checkNonNegativeInt(value, message) {\n    if (!(value >= 0 && (value | 0) === value)) {\n      raise('invalid parameter type, (' + value + ')' + encolon(message) + '. must be a nonnegative integer');\n    }\n  }\n\n  function checkOneOf(value, list, message) {\n    if (list.indexOf(value) < 0) {\n      raise('invalid value' + encolon(message) + '. must be one of: ' + list);\n    }\n  }\n\n  var constructorKeys = ['gl', 'canvas', 'container', 'attributes', 'pixelRatio', 'extensions', 'optionalExtensions', 'profile', 'onDone'];\n\n  function checkConstructor(obj) {\n    Object.keys(obj).forEach(function (key) {\n      if (constructorKeys.indexOf(key) < 0) {\n        raise('invalid regl constructor argument \"' + key + '\". must be one of ' + constructorKeys);\n      }\n    });\n  }\n\n  function leftPad(str, n) {\n    str = str + '';\n\n    while (str.length < n) {\n      str = ' ' + str;\n    }\n\n    return str;\n  }\n\n  function ShaderFile() {\n    this.name = 'unknown';\n    this.lines = [];\n    this.index = {};\n    this.hasErrors = false;\n  }\n\n  function ShaderLine(number, line) {\n    this.number = number;\n    this.line = line;\n    this.errors = [];\n  }\n\n  function ShaderError(fileNumber, lineNumber, message) {\n    this.file = fileNumber;\n    this.line = lineNumber;\n    this.message = message;\n  }\n\n  function guessCommand() {\n    var error = new Error();\n    var stack = (error.stack || error).toString();\n    var pat = /compileProcedure.*\\n\\s*at.*\\((.*)\\)/.exec(stack);\n\n    if (pat) {\n      return pat[1];\n    }\n\n    var pat2 = /compileProcedure.*\\n\\s*at\\s+(.*)(\\n|$)/.exec(stack);\n\n    if (pat2) {\n      return pat2[1];\n    }\n\n    return 'unknown';\n  }\n\n  function guessCallSite() {\n    var error = new Error();\n    var stack = (error.stack || error).toString();\n    var pat = /at REGLCommand.*\\n\\s+at.*\\((.*)\\)/.exec(stack);\n\n    if (pat) {\n      return pat[1];\n    }\n\n    var pat2 = /at REGLCommand.*\\n\\s+at\\s+(.*)\\n/.exec(stack);\n\n    if (pat2) {\n      return pat2[1];\n    }\n\n    return 'unknown';\n  }\n\n  function parseSource(source, command) {\n    var lines = source.split('\\n');\n    var lineNumber = 1;\n    var fileNumber = 0;\n    var files = {\n      unknown: new ShaderFile(),\n      0: new ShaderFile()\n    };\n    files.unknown.name = files[0].name = command || guessCommand();\n    files.unknown.lines.push(new ShaderLine(0, ''));\n\n    for (var i = 0; i < lines.length; ++i) {\n      var line = lines[i];\n      var parts = /^\\s*\\#\\s*(\\w+)\\s+(.+)\\s*$/.exec(line);\n\n      if (parts) {\n        switch (parts[1]) {\n          case 'line':\n            var lineNumberInfo = /(\\d+)(\\s+\\d+)?/.exec(parts[2]);\n\n            if (lineNumberInfo) {\n              lineNumber = lineNumberInfo[1] | 0;\n\n              if (lineNumberInfo[2]) {\n                fileNumber = lineNumberInfo[2] | 0;\n\n                if (!(fileNumber in files)) {\n                  files[fileNumber] = new ShaderFile();\n                }\n              }\n            }\n\n            break;\n\n          case 'define':\n            var nameInfo = /SHADER_NAME(_B64)?\\s+(.*)$/.exec(parts[2]);\n\n            if (nameInfo) {\n              files[fileNumber].name = nameInfo[1] ? decodeB64(nameInfo[2]) : nameInfo[2];\n            }\n\n            break;\n        }\n      }\n\n      files[fileNumber].lines.push(new ShaderLine(lineNumber++, line));\n    }\n\n    Object.keys(files).forEach(function (fileNumber) {\n      var file = files[fileNumber];\n      file.lines.forEach(function (line) {\n        file.index[line.number] = line;\n      });\n    });\n    return files;\n  }\n\n  function parseErrorLog(errLog) {\n    var result = [];\n    errLog.split('\\n').forEach(function (errMsg) {\n      if (errMsg.length < 5) {\n        return;\n      }\n\n      var parts = /^ERROR\\:\\s+(\\d+)\\:(\\d+)\\:\\s*(.*)$/.exec(errMsg);\n\n      if (parts) {\n        result.push(new ShaderError(parts[1] | 0, parts[2] | 0, parts[3].trim()));\n      } else if (errMsg.length > 0) {\n        result.push(new ShaderError('unknown', 0, errMsg));\n      }\n    });\n    return result;\n  }\n\n  function annotateFiles(files, errors) {\n    errors.forEach(function (error) {\n      var file = files[error.file];\n\n      if (file) {\n        var line = file.index[error.line];\n\n        if (line) {\n          line.errors.push(error);\n          file.hasErrors = true;\n          return;\n        }\n      }\n\n      files.unknown.hasErrors = true;\n      files.unknown.lines[0].errors.push(error);\n    });\n  }\n\n  function checkShaderError(gl, shader, source, type, command) {\n    if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\n      var errLog = gl.getShaderInfoLog(shader);\n      var typeName = type === gl.FRAGMENT_SHADER ? 'fragment' : 'vertex';\n      checkCommandType(source, 'string', typeName + ' shader source must be a string', command);\n      var files = parseSource(source, command);\n      var errors = parseErrorLog(errLog);\n      annotateFiles(files, errors);\n      Object.keys(files).forEach(function (fileNumber) {\n        var file = files[fileNumber];\n\n        if (!file.hasErrors) {\n          return;\n        }\n\n        var strings = [''];\n        var styles = [''];\n\n        function push(str, style) {\n          strings.push(str);\n          styles.push(style || '');\n        }\n\n        push('file number ' + fileNumber + ': ' + file.name + '\\n', 'color:red;text-decoration:underline;font-weight:bold');\n        file.lines.forEach(function (line) {\n          if (line.errors.length > 0) {\n            push(leftPad(line.number, 4) + '|  ', 'background-color:yellow; font-weight:bold');\n            push(line.line + endl, 'color:red; background-color:yellow; font-weight:bold'); // try to guess token\n\n            var offset = 0;\n            line.errors.forEach(function (error) {\n              var message = error.message;\n              var token = /^\\s*\\'(.*)\\'\\s*\\:\\s*(.*)$/.exec(message);\n\n              if (token) {\n                var tokenPat = token[1];\n                message = token[2];\n\n                switch (tokenPat) {\n                  case 'assign':\n                    tokenPat = '=';\n                    break;\n                }\n\n                offset = Math.max(line.line.indexOf(tokenPat, offset), 0);\n              } else {\n                offset = 0;\n              }\n\n              push(leftPad('| ', 6));\n              push(leftPad('^^^', offset + 3) + endl, 'font-weight:bold');\n              push(leftPad('| ', 6));\n              push(message + endl, 'font-weight:bold');\n            });\n            push(leftPad('| ', 6) + endl);\n          } else {\n            push(leftPad(line.number, 4) + '|  ');\n            push(line.line + endl, 'color:red');\n          }\n        });\n\n        if (typeof document !== 'undefined' && !window.chrome) {\n          styles[0] = strings.join('%c');\n          console.log.apply(console, styles);\n        } else {\n          console.log(strings.join(''));\n        }\n      });\n      check.raise('Error compiling ' + typeName + ' shader, ' + files[0].name);\n    }\n  }\n\n  function checkLinkError(gl, program, fragShader, vertShader, command) {\n    if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\n      var errLog = gl.getProgramInfoLog(program);\n      var fragParse = parseSource(fragShader, command);\n      var vertParse = parseSource(vertShader, command);\n      var header = 'Error linking program with vertex shader, \"' + vertParse[0].name + '\", and fragment shader \"' + fragParse[0].name + '\"';\n\n      if (typeof document !== 'undefined') {\n        console.log('%c' + header + endl + '%c' + errLog, 'color:red;text-decoration:underline;font-weight:bold', 'color:red');\n      } else {\n        console.log(header + endl + errLog);\n      }\n\n      check.raise(header);\n    }\n  }\n\n  function saveCommandRef(object) {\n    object._commandRef = guessCommand();\n  }\n\n  function saveDrawCommandInfo(opts, uniforms, attributes, stringStore) {\n    saveCommandRef(opts);\n\n    function id(str) {\n      if (str) {\n        return stringStore.id(str);\n      }\n\n      return 0;\n    }\n\n    opts._fragId = id(opts.static.frag);\n    opts._vertId = id(opts.static.vert);\n\n    function addProps(dict, set) {\n      Object.keys(set).forEach(function (u) {\n        dict[stringStore.id(u)] = true;\n      });\n    }\n\n    var uniformSet = opts._uniformSet = {};\n    addProps(uniformSet, uniforms.static);\n    addProps(uniformSet, uniforms.dynamic);\n    var attributeSet = opts._attributeSet = {};\n    addProps(attributeSet, attributes.static);\n    addProps(attributeSet, attributes.dynamic);\n    opts._hasCount = 'count' in opts.static || 'count' in opts.dynamic || 'elements' in opts.static || 'elements' in opts.dynamic;\n  }\n\n  function commandRaise(message, command) {\n    var callSite = guessCallSite();\n    raise(message + ' in command ' + (command || guessCommand()) + (callSite === 'unknown' ? '' : ' called from ' + callSite));\n  }\n\n  function checkCommand(pred, message, command) {\n    if (!pred) {\n      commandRaise(message, command || guessCommand());\n    }\n  }\n\n  function checkParameterCommand(param, possibilities, message, command) {\n    if (!(param in possibilities)) {\n      commandRaise('unknown parameter (' + param + ')' + encolon(message) + '. possible values: ' + Object.keys(possibilities).join(), command || guessCommand());\n    }\n  }\n\n  function checkCommandType(value, type, message, command) {\n    if (typeof value !== type) {\n      commandRaise('invalid parameter type' + encolon(message) + '. expected ' + type + ', got ' + typeof value, command || guessCommand());\n    }\n  }\n\n  function checkOptional(block) {\n    block();\n  }\n\n  function checkFramebufferFormat(attachment, texFormats, rbFormats) {\n    if (attachment.texture) {\n      checkOneOf(attachment.texture._texture.internalformat, texFormats, 'unsupported texture format for attachment');\n    } else {\n      checkOneOf(attachment.renderbuffer._renderbuffer.format, rbFormats, 'unsupported renderbuffer format for attachment');\n    }\n  }\n\n  var GL_CLAMP_TO_EDGE = 0x812F;\n  var GL_NEAREST = 0x2600;\n  var GL_NEAREST_MIPMAP_NEAREST = 0x2700;\n  var GL_LINEAR_MIPMAP_NEAREST = 0x2701;\n  var GL_NEAREST_MIPMAP_LINEAR = 0x2702;\n  var GL_LINEAR_MIPMAP_LINEAR = 0x2703;\n  var GL_BYTE = 5120;\n  var GL_UNSIGNED_BYTE = 5121;\n  var GL_SHORT = 5122;\n  var GL_UNSIGNED_SHORT = 5123;\n  var GL_INT = 5124;\n  var GL_UNSIGNED_INT = 5125;\n  var GL_FLOAT = 5126;\n  var GL_UNSIGNED_SHORT_4_4_4_4 = 0x8033;\n  var GL_UNSIGNED_SHORT_5_5_5_1 = 0x8034;\n  var GL_UNSIGNED_SHORT_5_6_5 = 0x8363;\n  var GL_UNSIGNED_INT_24_8_WEBGL = 0x84FA;\n  var GL_HALF_FLOAT_OES = 0x8D61;\n  var TYPE_SIZE = {};\n  TYPE_SIZE[GL_BYTE] = TYPE_SIZE[GL_UNSIGNED_BYTE] = 1;\n  TYPE_SIZE[GL_SHORT] = TYPE_SIZE[GL_UNSIGNED_SHORT] = TYPE_SIZE[GL_HALF_FLOAT_OES] = TYPE_SIZE[GL_UNSIGNED_SHORT_5_6_5] = TYPE_SIZE[GL_UNSIGNED_SHORT_4_4_4_4] = TYPE_SIZE[GL_UNSIGNED_SHORT_5_5_5_1] = 2;\n  TYPE_SIZE[GL_INT] = TYPE_SIZE[GL_UNSIGNED_INT] = TYPE_SIZE[GL_FLOAT] = TYPE_SIZE[GL_UNSIGNED_INT_24_8_WEBGL] = 4;\n\n  function pixelSize(type, channels) {\n    if (type === GL_UNSIGNED_SHORT_5_5_5_1 || type === GL_UNSIGNED_SHORT_4_4_4_4 || type === GL_UNSIGNED_SHORT_5_6_5) {\n      return 2;\n    } else if (type === GL_UNSIGNED_INT_24_8_WEBGL) {\n      return 4;\n    } else {\n      return TYPE_SIZE[type] * channels;\n    }\n  }\n\n  function isPow2(v) {\n    return !(v & v - 1) && !!v;\n  }\n\n  function checkTexture2D(info, mipData, limits) {\n    var i;\n    var w = mipData.width;\n    var h = mipData.height;\n    var c = mipData.channels; // Check texture shape\n\n    check(w > 0 && w <= limits.maxTextureSize && h > 0 && h <= limits.maxTextureSize, 'invalid texture shape'); // check wrap mode\n\n    if (info.wrapS !== GL_CLAMP_TO_EDGE || info.wrapT !== GL_CLAMP_TO_EDGE) {\n      check(isPow2(w) && isPow2(h), 'incompatible wrap mode for texture, both width and height must be power of 2');\n    }\n\n    if (mipData.mipmask === 1) {\n      if (w !== 1 && h !== 1) {\n        check(info.minFilter !== GL_NEAREST_MIPMAP_NEAREST && info.minFilter !== GL_NEAREST_MIPMAP_LINEAR && info.minFilter !== GL_LINEAR_MIPMAP_NEAREST && info.minFilter !== GL_LINEAR_MIPMAP_LINEAR, 'min filter requires mipmap');\n      }\n    } else {\n      // texture must be power of 2\n      check(isPow2(w) && isPow2(h), 'texture must be a square power of 2 to support mipmapping');\n      check(mipData.mipmask === (w << 1) - 1, 'missing or incomplete mipmap data');\n    }\n\n    if (mipData.type === GL_FLOAT) {\n      if (limits.extensions.indexOf('oes_texture_float_linear') < 0) {\n        check(info.minFilter === GL_NEAREST && info.magFilter === GL_NEAREST, 'filter not supported, must enable oes_texture_float_linear');\n      }\n\n      check(!info.genMipmaps, 'mipmap generation not supported with float textures');\n    } // check image complete\n\n\n    var mipimages = mipData.images;\n\n    for (i = 0; i < 16; ++i) {\n      if (mipimages[i]) {\n        var mw = w >> i;\n        var mh = h >> i;\n        check(mipData.mipmask & 1 << i, 'missing mipmap data');\n        var img = mipimages[i];\n        check(img.width === mw && img.height === mh, 'invalid shape for mip images');\n        check(img.format === mipData.format && img.internalformat === mipData.internalformat && img.type === mipData.type, 'incompatible type for mip image');\n\n        if (img.compressed) {// TODO: check size for compressed images\n        } else if (img.data) {\n          // check(img.data.byteLength === mw * mh *\n          // Math.max(pixelSize(img.type, c), img.unpackAlignment),\n          var rowSize = Math.ceil(pixelSize(img.type, c) * mw / img.unpackAlignment) * img.unpackAlignment;\n          check(img.data.byteLength === rowSize * mh, 'invalid data for image, buffer size is inconsistent with image format');\n        } else if (img.element) {// TODO: check element can be loaded\n        } else if (img.copy) {// TODO: check compatible format and type\n        }\n      } else if (!info.genMipmaps) {\n        check((mipData.mipmask & 1 << i) === 0, 'extra mipmap data');\n      }\n    }\n\n    if (mipData.compressed) {\n      check(!info.genMipmaps, 'mipmap generation for compressed images not supported');\n    }\n  }\n\n  function checkTextureCube(texture, info, faces, limits) {\n    var w = texture.width;\n    var h = texture.height;\n    var c = texture.channels; // Check texture shape\n\n    check(w > 0 && w <= limits.maxTextureSize && h > 0 && h <= limits.maxTextureSize, 'invalid texture shape');\n    check(w === h, 'cube map must be square');\n    check(info.wrapS === GL_CLAMP_TO_EDGE && info.wrapT === GL_CLAMP_TO_EDGE, 'wrap mode not supported by cube map');\n\n    for (var i = 0; i < faces.length; ++i) {\n      var face = faces[i];\n      check(face.width === w && face.height === h, 'inconsistent cube map face shape');\n\n      if (info.genMipmaps) {\n        check(!face.compressed, 'can not generate mipmap for compressed textures');\n        check(face.mipmask === 1, 'can not specify mipmaps and generate mipmaps');\n      } else {// TODO: check mip and filter mode\n      }\n\n      var mipmaps = face.images;\n\n      for (var j = 0; j < 16; ++j) {\n        var img = mipmaps[j];\n\n        if (img) {\n          var mw = w >> j;\n          var mh = h >> j;\n          check(face.mipmask & 1 << j, 'missing mipmap data');\n          check(img.width === mw && img.height === mh, 'invalid shape for mip images');\n          check(img.format === texture.format && img.internalformat === texture.internalformat && img.type === texture.type, 'incompatible type for mip image');\n\n          if (img.compressed) {// TODO: check size for compressed images\n          } else if (img.data) {\n            check(img.data.byteLength === mw * mh * Math.max(pixelSize(img.type, c), img.unpackAlignment), 'invalid data for image, buffer size is inconsistent with image format');\n          } else if (img.element) {// TODO: check element can be loaded\n          } else if (img.copy) {// TODO: check compatible format and type\n          }\n        }\n      }\n    }\n  }\n\n  var check$1 = extend(check, {\n    optional: checkOptional,\n    raise: raise,\n    commandRaise: commandRaise,\n    command: checkCommand,\n    parameter: checkParameter,\n    commandParameter: checkParameterCommand,\n    constructor: checkConstructor,\n    type: checkTypeOf,\n    commandType: checkCommandType,\n    isTypedArray: checkIsTypedArray,\n    nni: checkNonNegativeInt,\n    oneOf: checkOneOf,\n    shaderError: checkShaderError,\n    linkError: checkLinkError,\n    callSite: guessCallSite,\n    saveCommandRef: saveCommandRef,\n    saveDrawInfo: saveDrawCommandInfo,\n    framebufferFormat: checkFramebufferFormat,\n    guessCommand: guessCommand,\n    texture2D: checkTexture2D,\n    textureCube: checkTextureCube\n  });\n  var VARIABLE_COUNTER = 0;\n  var DYN_FUNC = 0;\n\n  function DynamicVariable(type, data) {\n    this.id = VARIABLE_COUNTER++;\n    this.type = type;\n    this.data = data;\n  }\n\n  function escapeStr(str) {\n    return str.replace(/\\\\/g, '\\\\\\\\').replace(/\"/g, '\\\\\"');\n  }\n\n  function splitParts(str) {\n    if (str.length === 0) {\n      return [];\n    }\n\n    var firstChar = str.charAt(0);\n    var lastChar = str.charAt(str.length - 1);\n\n    if (str.length > 1 && firstChar === lastChar && (firstChar === '\"' || firstChar === \"'\")) {\n      return ['\"' + escapeStr(str.substr(1, str.length - 2)) + '\"'];\n    }\n\n    var parts = /\\[(false|true|null|\\d+|'[^']*'|\"[^\"]*\")\\]/.exec(str);\n\n    if (parts) {\n      return splitParts(str.substr(0, parts.index)).concat(splitParts(parts[1])).concat(splitParts(str.substr(parts.index + parts[0].length)));\n    }\n\n    var subparts = str.split('.');\n\n    if (subparts.length === 1) {\n      return ['\"' + escapeStr(str) + '\"'];\n    }\n\n    var result = [];\n\n    for (var i = 0; i < subparts.length; ++i) {\n      result = result.concat(splitParts(subparts[i]));\n    }\n\n    return result;\n  }\n\n  function toAccessorString(str) {\n    return '[' + splitParts(str).join('][') + ']';\n  }\n\n  function defineDynamic(type, data) {\n    return new DynamicVariable(type, toAccessorString(data + ''));\n  }\n\n  function isDynamic(x) {\n    return typeof x === 'function' && !x._reglType || x instanceof DynamicVariable;\n  }\n\n  function unbox(x, path) {\n    if (typeof x === 'function') {\n      return new DynamicVariable(DYN_FUNC, x);\n    }\n\n    return x;\n  }\n\n  var dynamic = {\n    DynamicVariable: DynamicVariable,\n    define: defineDynamic,\n    isDynamic: isDynamic,\n    unbox: unbox,\n    accessor: toAccessorString\n  };\n  /* globals requestAnimationFrame, cancelAnimationFrame */\n\n  var raf = {\n    next: typeof requestAnimationFrame === 'function' ? function (cb) {\n      return requestAnimationFrame(cb);\n    } : function (cb) {\n      return setTimeout(cb, 16);\n    },\n    cancel: typeof cancelAnimationFrame === 'function' ? function (raf) {\n      return cancelAnimationFrame(raf);\n    } : clearTimeout\n  };\n  /* globals performance */\n\n  var clock = typeof performance !== 'undefined' && performance.now ? function () {\n    return performance.now();\n  } : function () {\n    return +new Date();\n  };\n\n  function createStringStore() {\n    var stringIds = {\n      '': 0\n    };\n    var stringValues = [''];\n    return {\n      id: function id(str) {\n        var result = stringIds[str];\n\n        if (result) {\n          return result;\n        }\n\n        result = stringIds[str] = stringValues.length;\n        stringValues.push(str);\n        return result;\n      },\n      str: function str(id) {\n        return stringValues[id];\n      }\n    };\n  } // Context and canvas creation helper functions\n\n\n  function createCanvas(element, onDone, pixelRatio) {\n    var canvas = document.createElement('canvas');\n    extend(canvas.style, {\n      border: 0,\n      margin: 0,\n      padding: 0,\n      top: 0,\n      left: 0\n    });\n    element.appendChild(canvas);\n\n    if (element === document.body) {\n      canvas.style.position = 'absolute';\n      extend(element.style, {\n        margin: 0,\n        padding: 0\n      });\n    }\n\n    function resize() {\n      var w = window.innerWidth;\n      var h = window.innerHeight;\n\n      if (element !== document.body) {\n        var bounds = element.getBoundingClientRect();\n        w = bounds.right - bounds.left;\n        h = bounds.bottom - bounds.top;\n      }\n\n      canvas.width = pixelRatio * w;\n      canvas.height = pixelRatio * h;\n      extend(canvas.style, {\n        width: w + 'px',\n        height: h + 'px'\n      });\n    }\n\n    window.addEventListener('resize', resize, false);\n\n    function onDestroy() {\n      window.removeEventListener('resize', resize);\n      element.removeChild(canvas);\n    }\n\n    resize();\n    return {\n      canvas: canvas,\n      onDestroy: onDestroy\n    };\n  }\n\n  function createContext(canvas, contextAttributes) {\n    function get(name) {\n      try {\n        return canvas.getContext(name, contextAttributes);\n      } catch (e) {\n        return null;\n      }\n    }\n\n    return get('webgl') || get('experimental-webgl') || get('webgl-experimental');\n  }\n\n  function isHTMLElement(obj) {\n    return typeof obj.nodeName === 'string' && typeof obj.appendChild === 'function' && typeof obj.getBoundingClientRect === 'function';\n  }\n\n  function isWebGLContext(obj) {\n    return typeof obj.drawArrays === 'function' || typeof obj.drawElements === 'function';\n  }\n\n  function parseExtensions(input) {\n    if (typeof input === 'string') {\n      return input.split();\n    }\n\n    check$1(Array.isArray(input), 'invalid extension array');\n    return input;\n  }\n\n  function getElement(desc) {\n    if (typeof desc === 'string') {\n      check$1(typeof document !== 'undefined', 'not supported outside of DOM');\n      return document.querySelector(desc);\n    }\n\n    return desc;\n  }\n\n  function parseArgs(args_) {\n    var args = args_ || {};\n    var element, container, canvas, gl;\n    var contextAttributes = {};\n    var extensions = [];\n    var optionalExtensions = [];\n    var pixelRatio = typeof window === 'undefined' ? 1 : window.devicePixelRatio;\n    var profile = false;\n\n    var onDone = function onDone(err) {\n      if (err) {\n        check$1.raise(err);\n      }\n    };\n\n    var onDestroy = function onDestroy() {};\n\n    if (typeof args === 'string') {\n      check$1(typeof document !== 'undefined', 'selector queries only supported in DOM enviroments');\n      element = document.querySelector(args);\n      check$1(element, 'invalid query string for element');\n    } else if (typeof args === 'object') {\n      if (isHTMLElement(args)) {\n        element = args;\n      } else if (isWebGLContext(args)) {\n        gl = args;\n        canvas = gl.canvas;\n      } else {\n        check$1.constructor(args);\n\n        if ('gl' in args) {\n          gl = args.gl;\n        } else if ('canvas' in args) {\n          canvas = getElement(args.canvas);\n        } else if ('container' in args) {\n          container = getElement(args.container);\n        }\n\n        if ('attributes' in args) {\n          contextAttributes = args.attributes;\n          check$1.type(contextAttributes, 'object', 'invalid context attributes');\n        }\n\n        if ('extensions' in args) {\n          extensions = parseExtensions(args.extensions);\n        }\n\n        if ('optionalExtensions' in args) {\n          optionalExtensions = parseExtensions(args.optionalExtensions);\n        }\n\n        if ('onDone' in args) {\n          check$1.type(args.onDone, 'function', 'invalid or missing onDone callback');\n          onDone = args.onDone;\n        }\n\n        if ('profile' in args) {\n          profile = !!args.profile;\n        }\n\n        if ('pixelRatio' in args) {\n          pixelRatio = +args.pixelRatio;\n          check$1(pixelRatio > 0, 'invalid pixel ratio');\n        }\n      }\n    } else {\n      check$1.raise('invalid arguments to regl');\n    }\n\n    if (element) {\n      if (element.nodeName.toLowerCase() === 'canvas') {\n        canvas = element;\n      } else {\n        container = element;\n      }\n    }\n\n    if (!gl) {\n      if (!canvas) {\n        check$1(typeof document !== 'undefined', 'must manually specify webgl context outside of DOM environments');\n        var result = createCanvas(container || document.body, onDone, pixelRatio);\n\n        if (!result) {\n          return null;\n        }\n\n        canvas = result.canvas;\n        onDestroy = result.onDestroy;\n      }\n\n      gl = createContext(canvas, contextAttributes);\n    }\n\n    if (!gl) {\n      onDestroy();\n      onDone('webgl not supported, try upgrading your browser or graphics drivers http://get.webgl.org');\n      return null;\n    }\n\n    return {\n      gl: gl,\n      canvas: canvas,\n      container: container,\n      extensions: extensions,\n      optionalExtensions: optionalExtensions,\n      pixelRatio: pixelRatio,\n      profile: profile,\n      onDone: onDone,\n      onDestroy: onDestroy\n    };\n  }\n\n  function createExtensionCache(gl, config) {\n    var extensions = {};\n\n    function tryLoadExtension(name_) {\n      check$1.type(name_, 'string', 'extension name must be string');\n      var name = name_.toLowerCase();\n      var ext;\n\n      try {\n        ext = extensions[name] = gl.getExtension(name);\n      } catch (e) {}\n\n      return !!ext;\n    }\n\n    for (var i = 0; i < config.extensions.length; ++i) {\n      var name = config.extensions[i];\n\n      if (!tryLoadExtension(name)) {\n        config.onDestroy();\n        config.onDone('\"' + name + '\" extension is not supported by the current WebGL context, try upgrading your system or a different browser');\n        return null;\n      }\n    }\n\n    config.optionalExtensions.forEach(tryLoadExtension);\n    return {\n      extensions: extensions,\n      restore: function restore() {\n        Object.keys(extensions).forEach(function (name) {\n          if (extensions[name] && !tryLoadExtension(name)) {\n            throw new Error('(regl): error restoring extension ' + name);\n          }\n        });\n      }\n    };\n  }\n\n  function loop(n, f) {\n    var result = Array(n);\n\n    for (var i = 0; i < n; ++i) {\n      result[i] = f(i);\n    }\n\n    return result;\n  }\n\n  var GL_BYTE$1 = 5120;\n  var GL_UNSIGNED_BYTE$2 = 5121;\n  var GL_SHORT$1 = 5122;\n  var GL_UNSIGNED_SHORT$1 = 5123;\n  var GL_INT$1 = 5124;\n  var GL_UNSIGNED_INT$1 = 5125;\n  var GL_FLOAT$2 = 5126;\n\n  function nextPow16(v) {\n    for (var i = 16; i <= 1 << 28; i *= 16) {\n      if (v <= i) {\n        return i;\n      }\n    }\n\n    return 0;\n  }\n\n  function log2(v) {\n    var r, shift;\n    r = (v > 0xFFFF) << 4;\n    v >>>= r;\n    shift = (v > 0xFF) << 3;\n    v >>>= shift;\n    r |= shift;\n    shift = (v > 0xF) << 2;\n    v >>>= shift;\n    r |= shift;\n    shift = (v > 0x3) << 1;\n    v >>>= shift;\n    r |= shift;\n    return r | v >> 1;\n  }\n\n  function createPool() {\n    var bufferPool = loop(8, function () {\n      return [];\n    });\n\n    function alloc(n) {\n      var sz = nextPow16(n);\n      var bin = bufferPool[log2(sz) >> 2];\n\n      if (bin.length > 0) {\n        return bin.pop();\n      }\n\n      return new ArrayBuffer(sz);\n    }\n\n    function free(buf) {\n      bufferPool[log2(buf.byteLength) >> 2].push(buf);\n    }\n\n    function allocType(type, n) {\n      var result = null;\n\n      switch (type) {\n        case GL_BYTE$1:\n          result = new Int8Array(alloc(n), 0, n);\n          break;\n\n        case GL_UNSIGNED_BYTE$2:\n          result = new Uint8Array(alloc(n), 0, n);\n          break;\n\n        case GL_SHORT$1:\n          result = new Int16Array(alloc(2 * n), 0, n);\n          break;\n\n        case GL_UNSIGNED_SHORT$1:\n          result = new Uint16Array(alloc(2 * n), 0, n);\n          break;\n\n        case GL_INT$1:\n          result = new Int32Array(alloc(4 * n), 0, n);\n          break;\n\n        case GL_UNSIGNED_INT$1:\n          result = new Uint32Array(alloc(4 * n), 0, n);\n          break;\n\n        case GL_FLOAT$2:\n          result = new Float32Array(alloc(4 * n), 0, n);\n          break;\n\n        default:\n          return null;\n      }\n\n      if (result.length !== n) {\n        return result.subarray(0, n);\n      }\n\n      return result;\n    }\n\n    function freeType(array) {\n      free(array.buffer);\n    }\n\n    return {\n      alloc: alloc,\n      free: free,\n      allocType: allocType,\n      freeType: freeType\n    };\n  }\n\n  var pool = createPool(); // zero pool for initial zero data\n\n  pool.zero = createPool();\n  var GL_SUBPIXEL_BITS = 0x0D50;\n  var GL_RED_BITS = 0x0D52;\n  var GL_GREEN_BITS = 0x0D53;\n  var GL_BLUE_BITS = 0x0D54;\n  var GL_ALPHA_BITS = 0x0D55;\n  var GL_DEPTH_BITS = 0x0D56;\n  var GL_STENCIL_BITS = 0x0D57;\n  var GL_ALIASED_POINT_SIZE_RANGE = 0x846D;\n  var GL_ALIASED_LINE_WIDTH_RANGE = 0x846E;\n  var GL_MAX_TEXTURE_SIZE = 0x0D33;\n  var GL_MAX_VIEWPORT_DIMS = 0x0D3A;\n  var GL_MAX_VERTEX_ATTRIBS = 0x8869;\n  var GL_MAX_VERTEX_UNIFORM_VECTORS = 0x8DFB;\n  var GL_MAX_VARYING_VECTORS = 0x8DFC;\n  var GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS = 0x8B4D;\n  var GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS = 0x8B4C;\n  var GL_MAX_TEXTURE_IMAGE_UNITS = 0x8872;\n  var GL_MAX_FRAGMENT_UNIFORM_VECTORS = 0x8DFD;\n  var GL_MAX_CUBE_MAP_TEXTURE_SIZE = 0x851C;\n  var GL_MAX_RENDERBUFFER_SIZE = 0x84E8;\n  var GL_VENDOR = 0x1F00;\n  var GL_RENDERER = 0x1F01;\n  var GL_VERSION = 0x1F02;\n  var GL_SHADING_LANGUAGE_VERSION = 0x8B8C;\n  var GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT = 0x84FF;\n  var GL_MAX_COLOR_ATTACHMENTS_WEBGL = 0x8CDF;\n  var GL_MAX_DRAW_BUFFERS_WEBGL = 0x8824;\n  var GL_TEXTURE_2D = 0x0DE1;\n  var GL_TEXTURE_CUBE_MAP = 0x8513;\n  var GL_TEXTURE_CUBE_MAP_POSITIVE_X = 0x8515;\n  var GL_TEXTURE0 = 0x84C0;\n  var GL_RGBA = 0x1908;\n  var GL_FLOAT$1 = 0x1406;\n  var GL_UNSIGNED_BYTE$1 = 0x1401;\n  var GL_FRAMEBUFFER = 0x8D40;\n  var GL_FRAMEBUFFER_COMPLETE = 0x8CD5;\n  var GL_COLOR_ATTACHMENT0 = 0x8CE0;\n  var GL_COLOR_BUFFER_BIT$1 = 0x4000;\n\n  var wrapLimits = function wrapLimits(gl, extensions) {\n    var maxAnisotropic = 1;\n\n    if (extensions.ext_texture_filter_anisotropic) {\n      maxAnisotropic = gl.getParameter(GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT);\n    }\n\n    var maxDrawbuffers = 1;\n    var maxColorAttachments = 1;\n\n    if (extensions.webgl_draw_buffers) {\n      maxDrawbuffers = gl.getParameter(GL_MAX_DRAW_BUFFERS_WEBGL);\n      maxColorAttachments = gl.getParameter(GL_MAX_COLOR_ATTACHMENTS_WEBGL);\n    } // detect if reading float textures is available (Safari doesn't support)\n\n\n    var readFloat = !!extensions.oes_texture_float;\n\n    if (readFloat) {\n      var readFloatTexture = gl.createTexture();\n      gl.bindTexture(GL_TEXTURE_2D, readFloatTexture);\n      gl.texImage2D(GL_TEXTURE_2D, 0, GL_RGBA, 1, 1, 0, GL_RGBA, GL_FLOAT$1, null);\n      var fbo = gl.createFramebuffer();\n      gl.bindFramebuffer(GL_FRAMEBUFFER, fbo);\n      gl.framebufferTexture2D(GL_FRAMEBUFFER, GL_COLOR_ATTACHMENT0, GL_TEXTURE_2D, readFloatTexture, 0);\n      gl.bindTexture(GL_TEXTURE_2D, null);\n      if (gl.checkFramebufferStatus(GL_FRAMEBUFFER) !== GL_FRAMEBUFFER_COMPLETE) readFloat = false;else {\n        gl.viewport(0, 0, 1, 1);\n        gl.clearColor(1.0, 0.0, 0.0, 1.0);\n        gl.clear(GL_COLOR_BUFFER_BIT$1);\n        var pixels = pool.allocType(GL_FLOAT$1, 4);\n        gl.readPixels(0, 0, 1, 1, GL_RGBA, GL_FLOAT$1, pixels);\n        if (gl.getError()) readFloat = false;else {\n          gl.deleteFramebuffer(fbo);\n          gl.deleteTexture(readFloatTexture);\n          readFloat = pixels[0] === 1.0;\n        }\n        pool.freeType(pixels);\n      }\n    } // detect non power of two cube textures support (IE doesn't support)\n\n\n    var isIE = typeof navigator !== 'undefined' && (/MSIE/.test(navigator.userAgent) || /Trident\\//.test(navigator.appVersion) || /Edge/.test(navigator.userAgent));\n    var npotTextureCube = true;\n\n    if (!isIE) {\n      var cubeTexture = gl.createTexture();\n      var data = pool.allocType(GL_UNSIGNED_BYTE$1, 36);\n      gl.activeTexture(GL_TEXTURE0);\n      gl.bindTexture(GL_TEXTURE_CUBE_MAP, cubeTexture);\n      gl.texImage2D(GL_TEXTURE_CUBE_MAP_POSITIVE_X, 0, GL_RGBA, 3, 3, 0, GL_RGBA, GL_UNSIGNED_BYTE$1, data);\n      pool.freeType(data);\n      gl.bindTexture(GL_TEXTURE_CUBE_MAP, null);\n      gl.deleteTexture(cubeTexture);\n      npotTextureCube = !gl.getError();\n    }\n\n    return {\n      // drawing buffer bit depth\n      colorBits: [gl.getParameter(GL_RED_BITS), gl.getParameter(GL_GREEN_BITS), gl.getParameter(GL_BLUE_BITS), gl.getParameter(GL_ALPHA_BITS)],\n      depthBits: gl.getParameter(GL_DEPTH_BITS),\n      stencilBits: gl.getParameter(GL_STENCIL_BITS),\n      subpixelBits: gl.getParameter(GL_SUBPIXEL_BITS),\n      // supported extensions\n      extensions: Object.keys(extensions).filter(function (ext) {\n        return !!extensions[ext];\n      }),\n      // max aniso samples\n      maxAnisotropic: maxAnisotropic,\n      // max draw buffers\n      maxDrawbuffers: maxDrawbuffers,\n      maxColorAttachments: maxColorAttachments,\n      // point and line size ranges\n      pointSizeDims: gl.getParameter(GL_ALIASED_POINT_SIZE_RANGE),\n      lineWidthDims: gl.getParameter(GL_ALIASED_LINE_WIDTH_RANGE),\n      maxViewportDims: gl.getParameter(GL_MAX_VIEWPORT_DIMS),\n      maxCombinedTextureUnits: gl.getParameter(GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS),\n      maxCubeMapSize: gl.getParameter(GL_MAX_CUBE_MAP_TEXTURE_SIZE),\n      maxRenderbufferSize: gl.getParameter(GL_MAX_RENDERBUFFER_SIZE),\n      maxTextureUnits: gl.getParameter(GL_MAX_TEXTURE_IMAGE_UNITS),\n      maxTextureSize: gl.getParameter(GL_MAX_TEXTURE_SIZE),\n      maxAttributes: gl.getParameter(GL_MAX_VERTEX_ATTRIBS),\n      maxVertexUniforms: gl.getParameter(GL_MAX_VERTEX_UNIFORM_VECTORS),\n      maxVertexTextureUnits: gl.getParameter(GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS),\n      maxVaryingVectors: gl.getParameter(GL_MAX_VARYING_VECTORS),\n      maxFragmentUniforms: gl.getParameter(GL_MAX_FRAGMENT_UNIFORM_VECTORS),\n      // vendor info\n      glsl: gl.getParameter(GL_SHADING_LANGUAGE_VERSION),\n      renderer: gl.getParameter(GL_RENDERER),\n      vendor: gl.getParameter(GL_VENDOR),\n      version: gl.getParameter(GL_VERSION),\n      // quirks\n      readFloat: readFloat,\n      npotTextureCube: npotTextureCube\n    };\n  };\n\n  function isNDArrayLike(obj) {\n    return !!obj && typeof obj === 'object' && Array.isArray(obj.shape) && Array.isArray(obj.stride) && typeof obj.offset === 'number' && obj.shape.length === obj.stride.length && (Array.isArray(obj.data) || isTypedArray(obj.data));\n  }\n\n  var values = function values(obj) {\n    return Object.keys(obj).map(function (key) {\n      return obj[key];\n    });\n  };\n\n  var flattenUtils = {\n    shape: arrayShape$1,\n    flatten: flattenArray\n  };\n\n  function flatten1D(array, nx, out) {\n    for (var i = 0; i < nx; ++i) {\n      out[i] = array[i];\n    }\n  }\n\n  function flatten2D(array, nx, ny, out) {\n    var ptr = 0;\n\n    for (var i = 0; i < nx; ++i) {\n      var row = array[i];\n\n      for (var j = 0; j < ny; ++j) {\n        out[ptr++] = row[j];\n      }\n    }\n  }\n\n  function flatten3D(array, nx, ny, nz, out, ptr_) {\n    var ptr = ptr_;\n\n    for (var i = 0; i < nx; ++i) {\n      var row = array[i];\n\n      for (var j = 0; j < ny; ++j) {\n        var col = row[j];\n\n        for (var k = 0; k < nz; ++k) {\n          out[ptr++] = col[k];\n        }\n      }\n    }\n  }\n\n  function flattenRec(array, shape, level, out, ptr) {\n    var stride = 1;\n\n    for (var i = level + 1; i < shape.length; ++i) {\n      stride *= shape[i];\n    }\n\n    var n = shape[level];\n\n    if (shape.length - level === 4) {\n      var nx = shape[level + 1];\n      var ny = shape[level + 2];\n      var nz = shape[level + 3];\n\n      for (i = 0; i < n; ++i) {\n        flatten3D(array[i], nx, ny, nz, out, ptr);\n        ptr += stride;\n      }\n    } else {\n      for (i = 0; i < n; ++i) {\n        flattenRec(array[i], shape, level + 1, out, ptr);\n        ptr += stride;\n      }\n    }\n  }\n\n  function flattenArray(array, shape, type, out_) {\n    var sz = 1;\n\n    if (shape.length) {\n      for (var i = 0; i < shape.length; ++i) {\n        sz *= shape[i];\n      }\n    } else {\n      sz = 0;\n    }\n\n    var out = out_ || pool.allocType(type, sz);\n\n    switch (shape.length) {\n      case 0:\n        break;\n\n      case 1:\n        flatten1D(array, shape[0], out);\n        break;\n\n      case 2:\n        flatten2D(array, shape[0], shape[1], out);\n        break;\n\n      case 3:\n        flatten3D(array, shape[0], shape[1], shape[2], out, 0);\n        break;\n\n      default:\n        flattenRec(array, shape, 0, out, 0);\n    }\n\n    return out;\n  }\n\n  function arrayShape$1(array_) {\n    var shape = [];\n\n    for (var array = array_; array.length; array = array[0]) {\n      shape.push(array.length);\n    }\n\n    return shape;\n  }\n\n  var arrayTypes = {\n    \"[object Int8Array]\": 5120,\n    \"[object Int16Array]\": 5122,\n    \"[object Int32Array]\": 5124,\n    \"[object Uint8Array]\": 5121,\n    \"[object Uint8ClampedArray]\": 5121,\n    \"[object Uint16Array]\": 5123,\n    \"[object Uint32Array]\": 5125,\n    \"[object Float32Array]\": 5126,\n    \"[object Float64Array]\": 5121,\n    \"[object ArrayBuffer]\": 5121\n  };\n  var int8 = 5120;\n  var int16 = 5122;\n  var int32 = 5124;\n  var uint8 = 5121;\n  var uint16 = 5123;\n  var uint32 = 5125;\n  var float = 5126;\n  var float32 = 5126;\n  var glTypes = {\n    int8: int8,\n    int16: int16,\n    int32: int32,\n    uint8: uint8,\n    uint16: uint16,\n    uint32: uint32,\n    float: float,\n    float32: float32\n  };\n  var dynamic$1 = 35048;\n  var stream = 35040;\n  var usageTypes = {\n    dynamic: dynamic$1,\n    stream: stream,\n    \"static\": 35044\n  };\n  var arrayFlatten = flattenUtils.flatten;\n  var arrayShape = flattenUtils.shape;\n  var GL_STATIC_DRAW = 0x88E4;\n  var GL_STREAM_DRAW = 0x88E0;\n  var GL_UNSIGNED_BYTE$3 = 5121;\n  var GL_FLOAT$3 = 5126;\n  var DTYPES_SIZES = [];\n  DTYPES_SIZES[5120] = 1; // int8\n\n  DTYPES_SIZES[5122] = 2; // int16\n\n  DTYPES_SIZES[5124] = 4; // int32\n\n  DTYPES_SIZES[5121] = 1; // uint8\n\n  DTYPES_SIZES[5123] = 2; // uint16\n\n  DTYPES_SIZES[5125] = 4; // uint32\n\n  DTYPES_SIZES[5126] = 4; // float32\n\n  function typedArrayCode(data) {\n    return arrayTypes[Object.prototype.toString.call(data)] | 0;\n  }\n\n  function copyArray(out, inp) {\n    for (var i = 0; i < inp.length; ++i) {\n      out[i] = inp[i];\n    }\n  }\n\n  function transpose(result, data, shapeX, shapeY, strideX, strideY, offset) {\n    var ptr = 0;\n\n    for (var i = 0; i < shapeX; ++i) {\n      for (var j = 0; j < shapeY; ++j) {\n        result[ptr++] = data[strideX * i + strideY * j + offset];\n      }\n    }\n  }\n\n  function wrapBufferState(gl, stats, config, attributeState) {\n    var bufferCount = 0;\n    var bufferSet = {};\n\n    function REGLBuffer(type) {\n      this.id = bufferCount++;\n      this.buffer = gl.createBuffer();\n      this.type = type;\n      this.usage = GL_STATIC_DRAW;\n      this.byteLength = 0;\n      this.dimension = 1;\n      this.dtype = GL_UNSIGNED_BYTE$3;\n      this.persistentData = null;\n\n      if (config.profile) {\n        this.stats = {\n          size: 0\n        };\n      }\n    }\n\n    REGLBuffer.prototype.bind = function () {\n      gl.bindBuffer(this.type, this.buffer);\n    };\n\n    REGLBuffer.prototype.destroy = function () {\n      destroy(this);\n    };\n\n    var streamPool = [];\n\n    function createStream(type, data) {\n      var buffer = streamPool.pop();\n\n      if (!buffer) {\n        buffer = new REGLBuffer(type);\n      }\n\n      buffer.bind();\n      initBufferFromData(buffer, data, GL_STREAM_DRAW, 0, 1, false);\n      return buffer;\n    }\n\n    function destroyStream(stream$$1) {\n      streamPool.push(stream$$1);\n    }\n\n    function initBufferFromTypedArray(buffer, data, usage) {\n      buffer.byteLength = data.byteLength;\n      gl.bufferData(buffer.type, data, usage);\n    }\n\n    function initBufferFromData(buffer, data, usage, dtype, dimension, persist) {\n      var shape;\n      buffer.usage = usage;\n\n      if (Array.isArray(data)) {\n        buffer.dtype = dtype || GL_FLOAT$3;\n\n        if (data.length > 0) {\n          var flatData;\n\n          if (Array.isArray(data[0])) {\n            shape = arrayShape(data);\n            var dim = 1;\n\n            for (var i = 1; i < shape.length; ++i) {\n              dim *= shape[i];\n            }\n\n            buffer.dimension = dim;\n            flatData = arrayFlatten(data, shape, buffer.dtype);\n            initBufferFromTypedArray(buffer, flatData, usage);\n\n            if (persist) {\n              buffer.persistentData = flatData;\n            } else {\n              pool.freeType(flatData);\n            }\n          } else if (typeof data[0] === 'number') {\n            buffer.dimension = dimension;\n            var typedData = pool.allocType(buffer.dtype, data.length);\n            copyArray(typedData, data);\n            initBufferFromTypedArray(buffer, typedData, usage);\n\n            if (persist) {\n              buffer.persistentData = typedData;\n            } else {\n              pool.freeType(typedData);\n            }\n          } else if (isTypedArray(data[0])) {\n            buffer.dimension = data[0].length;\n            buffer.dtype = dtype || typedArrayCode(data[0]) || GL_FLOAT$3;\n            flatData = arrayFlatten(data, [data.length, data[0].length], buffer.dtype);\n            initBufferFromTypedArray(buffer, flatData, usage);\n\n            if (persist) {\n              buffer.persistentData = flatData;\n            } else {\n              pool.freeType(flatData);\n            }\n          } else {\n            check$1.raise('invalid buffer data');\n          }\n        }\n      } else if (isTypedArray(data)) {\n        buffer.dtype = dtype || typedArrayCode(data);\n        buffer.dimension = dimension;\n        initBufferFromTypedArray(buffer, data, usage);\n\n        if (persist) {\n          buffer.persistentData = new Uint8Array(new Uint8Array(data.buffer));\n        }\n      } else if (isNDArrayLike(data)) {\n        shape = data.shape;\n        var stride = data.stride;\n        var offset = data.offset;\n        var shapeX = 0;\n        var shapeY = 0;\n        var strideX = 0;\n        var strideY = 0;\n\n        if (shape.length === 1) {\n          shapeX = shape[0];\n          shapeY = 1;\n          strideX = stride[0];\n          strideY = 0;\n        } else if (shape.length === 2) {\n          shapeX = shape[0];\n          shapeY = shape[1];\n          strideX = stride[0];\n          strideY = stride[1];\n        } else {\n          check$1.raise('invalid shape');\n        }\n\n        buffer.dtype = dtype || typedArrayCode(data.data) || GL_FLOAT$3;\n        buffer.dimension = shapeY;\n        var transposeData = pool.allocType(buffer.dtype, shapeX * shapeY);\n        transpose(transposeData, data.data, shapeX, shapeY, strideX, strideY, offset);\n        initBufferFromTypedArray(buffer, transposeData, usage);\n\n        if (persist) {\n          buffer.persistentData = transposeData;\n        } else {\n          pool.freeType(transposeData);\n        }\n      } else {\n        check$1.raise('invalid buffer data');\n      }\n    }\n\n    function destroy(buffer) {\n      stats.bufferCount--;\n\n      for (var i = 0; i < attributeState.state.length; ++i) {\n        var record = attributeState.state[i];\n\n        if (record.buffer === buffer) {\n          gl.disableVertexAttribArray(i);\n          record.buffer = null;\n        }\n      }\n\n      var handle = buffer.buffer;\n      check$1(handle, 'buffer must not be deleted already');\n      gl.deleteBuffer(handle);\n      buffer.buffer = null;\n      delete bufferSet[buffer.id];\n    }\n\n    function createBuffer(options, type, deferInit, persistent) {\n      stats.bufferCount++;\n      var buffer = new REGLBuffer(type);\n      bufferSet[buffer.id] = buffer;\n\n      function reglBuffer(options) {\n        var usage = GL_STATIC_DRAW;\n        var data = null;\n        var byteLength = 0;\n        var dtype = 0;\n        var dimension = 1;\n\n        if (Array.isArray(options) || isTypedArray(options) || isNDArrayLike(options)) {\n          data = options;\n        } else if (typeof options === 'number') {\n          byteLength = options | 0;\n        } else if (options) {\n          check$1.type(options, 'object', 'buffer arguments must be an object, a number or an array');\n\n          if ('data' in options) {\n            check$1(data === null || Array.isArray(data) || isTypedArray(data) || isNDArrayLike(data), 'invalid data for buffer');\n            data = options.data;\n          }\n\n          if ('usage' in options) {\n            check$1.parameter(options.usage, usageTypes, 'invalid buffer usage');\n            usage = usageTypes[options.usage];\n          }\n\n          if ('type' in options) {\n            check$1.parameter(options.type, glTypes, 'invalid buffer type');\n            dtype = glTypes[options.type];\n          }\n\n          if ('dimension' in options) {\n            check$1.type(options.dimension, 'number', 'invalid dimension');\n            dimension = options.dimension | 0;\n          }\n\n          if ('length' in options) {\n            check$1.nni(byteLength, 'buffer length must be a nonnegative integer');\n            byteLength = options.length | 0;\n          }\n        }\n\n        buffer.bind();\n\n        if (!data) {\n          // #475\n          if (byteLength) gl.bufferData(buffer.type, byteLength, usage);\n          buffer.dtype = dtype || GL_UNSIGNED_BYTE$3;\n          buffer.usage = usage;\n          buffer.dimension = dimension;\n          buffer.byteLength = byteLength;\n        } else {\n          initBufferFromData(buffer, data, usage, dtype, dimension, persistent);\n        }\n\n        if (config.profile) {\n          buffer.stats.size = buffer.byteLength * DTYPES_SIZES[buffer.dtype];\n        }\n\n        return reglBuffer;\n      }\n\n      function setSubData(data, offset) {\n        check$1(offset + data.byteLength <= buffer.byteLength, 'invalid buffer subdata call, buffer is too small. ' + ' Can\\'t write data of size ' + data.byteLength + ' starting from offset ' + offset + ' to a buffer of size ' + buffer.byteLength);\n        gl.bufferSubData(buffer.type, offset, data);\n      }\n\n      function subdata(data, offset_) {\n        var offset = (offset_ || 0) | 0;\n        var shape;\n        buffer.bind();\n\n        if (isTypedArray(data)) {\n          setSubData(data, offset);\n        } else if (Array.isArray(data)) {\n          if (data.length > 0) {\n            if (typeof data[0] === 'number') {\n              var converted = pool.allocType(buffer.dtype, data.length);\n              copyArray(converted, data);\n              setSubData(converted, offset);\n              pool.freeType(converted);\n            } else if (Array.isArray(data[0]) || isTypedArray(data[0])) {\n              shape = arrayShape(data);\n              var flatData = arrayFlatten(data, shape, buffer.dtype);\n              setSubData(flatData, offset);\n              pool.freeType(flatData);\n            } else {\n              check$1.raise('invalid buffer data');\n            }\n          }\n        } else if (isNDArrayLike(data)) {\n          shape = data.shape;\n          var stride = data.stride;\n          var shapeX = 0;\n          var shapeY = 0;\n          var strideX = 0;\n          var strideY = 0;\n\n          if (shape.length === 1) {\n            shapeX = shape[0];\n            shapeY = 1;\n            strideX = stride[0];\n            strideY = 0;\n          } else if (shape.length === 2) {\n            shapeX = shape[0];\n            shapeY = shape[1];\n            strideX = stride[0];\n            strideY = stride[1];\n          } else {\n            check$1.raise('invalid shape');\n          }\n\n          var dtype = Array.isArray(data.data) ? buffer.dtype : typedArrayCode(data.data);\n          var transposeData = pool.allocType(dtype, shapeX * shapeY);\n          transpose(transposeData, data.data, shapeX, shapeY, strideX, strideY, data.offset);\n          setSubData(transposeData, offset);\n          pool.freeType(transposeData);\n        } else {\n          check$1.raise('invalid data for buffer subdata');\n        }\n\n        return reglBuffer;\n      }\n\n      if (!deferInit) {\n        reglBuffer(options);\n      }\n\n      reglBuffer._reglType = 'buffer';\n      reglBuffer._buffer = buffer;\n      reglBuffer.subdata = subdata;\n\n      if (config.profile) {\n        reglBuffer.stats = buffer.stats;\n      }\n\n      reglBuffer.destroy = function () {\n        destroy(buffer);\n      };\n\n      return reglBuffer;\n    }\n\n    function restoreBuffers() {\n      values(bufferSet).forEach(function (buffer) {\n        buffer.buffer = gl.createBuffer();\n        gl.bindBuffer(buffer.type, buffer.buffer);\n        gl.bufferData(buffer.type, buffer.persistentData || buffer.byteLength, buffer.usage);\n      });\n    }\n\n    if (config.profile) {\n      stats.getTotalBufferSize = function () {\n        var total = 0; // TODO: Right now, the streams are not part of the total count.\n\n        Object.keys(bufferSet).forEach(function (key) {\n          total += bufferSet[key].stats.size;\n        });\n        return total;\n      };\n    }\n\n    return {\n      create: createBuffer,\n      createStream: createStream,\n      destroyStream: destroyStream,\n      clear: function clear() {\n        values(bufferSet).forEach(destroy);\n        streamPool.forEach(destroy);\n      },\n      getBuffer: function getBuffer(wrapper) {\n        if (wrapper && wrapper._buffer instanceof REGLBuffer) {\n          return wrapper._buffer;\n        }\n\n        return null;\n      },\n      restore: restoreBuffers,\n      _initBuffer: initBufferFromData\n    };\n  }\n\n  var points = 0;\n  var point = 0;\n  var lines = 1;\n  var line = 1;\n  var triangles = 4;\n  var triangle = 4;\n  var primTypes = {\n    points: points,\n    point: point,\n    lines: lines,\n    line: line,\n    triangles: triangles,\n    triangle: triangle,\n    \"line loop\": 2,\n    \"line strip\": 3,\n    \"triangle strip\": 5,\n    \"triangle fan\": 6\n  };\n  var GL_POINTS = 0;\n  var GL_LINES = 1;\n  var GL_TRIANGLES = 4;\n  var GL_BYTE$2 = 5120;\n  var GL_UNSIGNED_BYTE$4 = 5121;\n  var GL_SHORT$2 = 5122;\n  var GL_UNSIGNED_SHORT$2 = 5123;\n  var GL_INT$2 = 5124;\n  var GL_UNSIGNED_INT$2 = 5125;\n  var GL_ELEMENT_ARRAY_BUFFER = 34963;\n  var GL_STREAM_DRAW$1 = 0x88E0;\n  var GL_STATIC_DRAW$1 = 0x88E4;\n\n  function wrapElementsState(gl, extensions, bufferState, stats) {\n    var elementSet = {};\n    var elementCount = 0;\n    var elementTypes = {\n      'uint8': GL_UNSIGNED_BYTE$4,\n      'uint16': GL_UNSIGNED_SHORT$2\n    };\n\n    if (extensions.oes_element_index_uint) {\n      elementTypes.uint32 = GL_UNSIGNED_INT$2;\n    }\n\n    function REGLElementBuffer(buffer) {\n      this.id = elementCount++;\n      elementSet[this.id] = this;\n      this.buffer = buffer;\n      this.primType = GL_TRIANGLES;\n      this.vertCount = 0;\n      this.type = 0;\n    }\n\n    REGLElementBuffer.prototype.bind = function () {\n      this.buffer.bind();\n    };\n\n    var bufferPool = [];\n\n    function createElementStream(data) {\n      var result = bufferPool.pop();\n\n      if (!result) {\n        result = new REGLElementBuffer(bufferState.create(null, GL_ELEMENT_ARRAY_BUFFER, true, false)._buffer);\n      }\n\n      initElements(result, data, GL_STREAM_DRAW$1, -1, -1, 0, 0);\n      return result;\n    }\n\n    function destroyElementStream(elements) {\n      bufferPool.push(elements);\n    }\n\n    function initElements(elements, data, usage, prim, count, byteLength, type) {\n      elements.buffer.bind();\n\n      if (data) {\n        var predictedType = type;\n\n        if (!type && (!isTypedArray(data) || isNDArrayLike(data) && !isTypedArray(data.data))) {\n          predictedType = extensions.oes_element_index_uint ? GL_UNSIGNED_INT$2 : GL_UNSIGNED_SHORT$2;\n        }\n\n        bufferState._initBuffer(elements.buffer, data, usage, predictedType, 3);\n      } else {\n        gl.bufferData(GL_ELEMENT_ARRAY_BUFFER, byteLength, usage);\n        elements.buffer.dtype = dtype || GL_UNSIGNED_BYTE$4;\n        elements.buffer.usage = usage;\n        elements.buffer.dimension = 3;\n        elements.buffer.byteLength = byteLength;\n      }\n\n      var dtype = type;\n\n      if (!type) {\n        switch (elements.buffer.dtype) {\n          case GL_UNSIGNED_BYTE$4:\n          case GL_BYTE$2:\n            dtype = GL_UNSIGNED_BYTE$4;\n            break;\n\n          case GL_UNSIGNED_SHORT$2:\n          case GL_SHORT$2:\n            dtype = GL_UNSIGNED_SHORT$2;\n            break;\n\n          case GL_UNSIGNED_INT$2:\n          case GL_INT$2:\n            dtype = GL_UNSIGNED_INT$2;\n            break;\n\n          default:\n            check$1.raise('unsupported type for element array');\n        }\n\n        elements.buffer.dtype = dtype;\n      }\n\n      elements.type = dtype; // Check oes_element_index_uint extension\n\n      check$1(dtype !== GL_UNSIGNED_INT$2 || !!extensions.oes_element_index_uint, '32 bit element buffers not supported, enable oes_element_index_uint first'); // try to guess default primitive type and arguments\n\n      var vertCount = count;\n\n      if (vertCount < 0) {\n        vertCount = elements.buffer.byteLength;\n\n        if (dtype === GL_UNSIGNED_SHORT$2) {\n          vertCount >>= 1;\n        } else if (dtype === GL_UNSIGNED_INT$2) {\n          vertCount >>= 2;\n        }\n      }\n\n      elements.vertCount = vertCount; // try to guess primitive type from cell dimension\n\n      var primType = prim;\n\n      if (prim < 0) {\n        primType = GL_TRIANGLES;\n        var dimension = elements.buffer.dimension;\n        if (dimension === 1) primType = GL_POINTS;\n        if (dimension === 2) primType = GL_LINES;\n        if (dimension === 3) primType = GL_TRIANGLES;\n      }\n\n      elements.primType = primType;\n    }\n\n    function destroyElements(elements) {\n      stats.elementsCount--;\n      check$1(elements.buffer !== null, 'must not double destroy elements');\n      delete elementSet[elements.id];\n      elements.buffer.destroy();\n      elements.buffer = null;\n    }\n\n    function createElements(options, persistent) {\n      var buffer = bufferState.create(null, GL_ELEMENT_ARRAY_BUFFER, true);\n      var elements = new REGLElementBuffer(buffer._buffer);\n      stats.elementsCount++;\n\n      function reglElements(options) {\n        if (!options) {\n          buffer();\n          elements.primType = GL_TRIANGLES;\n          elements.vertCount = 0;\n          elements.type = GL_UNSIGNED_BYTE$4;\n        } else if (typeof options === 'number') {\n          buffer(options);\n          elements.primType = GL_TRIANGLES;\n          elements.vertCount = options | 0;\n          elements.type = GL_UNSIGNED_BYTE$4;\n        } else {\n          var data = null;\n          var usage = GL_STATIC_DRAW$1;\n          var primType = -1;\n          var vertCount = -1;\n          var byteLength = 0;\n          var dtype = 0;\n\n          if (Array.isArray(options) || isTypedArray(options) || isNDArrayLike(options)) {\n            data = options;\n          } else {\n            check$1.type(options, 'object', 'invalid arguments for elements');\n\n            if ('data' in options) {\n              data = options.data;\n              check$1(Array.isArray(data) || isTypedArray(data) || isNDArrayLike(data), 'invalid data for element buffer');\n            }\n\n            if ('usage' in options) {\n              check$1.parameter(options.usage, usageTypes, 'invalid element buffer usage');\n              usage = usageTypes[options.usage];\n            }\n\n            if ('primitive' in options) {\n              check$1.parameter(options.primitive, primTypes, 'invalid element buffer primitive');\n              primType = primTypes[options.primitive];\n            }\n\n            if ('count' in options) {\n              check$1(typeof options.count === 'number' && options.count >= 0, 'invalid vertex count for elements');\n              vertCount = options.count | 0;\n            }\n\n            if ('type' in options) {\n              check$1.parameter(options.type, elementTypes, 'invalid buffer type');\n              dtype = elementTypes[options.type];\n            }\n\n            if ('length' in options) {\n              byteLength = options.length | 0;\n            } else {\n              byteLength = vertCount;\n\n              if (dtype === GL_UNSIGNED_SHORT$2 || dtype === GL_SHORT$2) {\n                byteLength *= 2;\n              } else if (dtype === GL_UNSIGNED_INT$2 || dtype === GL_INT$2) {\n                byteLength *= 4;\n              }\n            }\n          }\n\n          initElements(elements, data, usage, primType, vertCount, byteLength, dtype);\n        }\n\n        return reglElements;\n      }\n\n      reglElements(options);\n      reglElements._reglType = 'elements';\n      reglElements._elements = elements;\n\n      reglElements.subdata = function (data, offset) {\n        buffer.subdata(data, offset);\n        return reglElements;\n      };\n\n      reglElements.destroy = function () {\n        destroyElements(elements);\n      };\n\n      return reglElements;\n    }\n\n    return {\n      create: createElements,\n      createStream: createElementStream,\n      destroyStream: destroyElementStream,\n      getElements: function getElements(elements) {\n        if (typeof elements === 'function' && elements._elements instanceof REGLElementBuffer) {\n          return elements._elements;\n        }\n\n        return null;\n      },\n      clear: function clear() {\n        values(elementSet).forEach(destroyElements);\n      }\n    };\n  }\n\n  var FLOAT = new Float32Array(1);\n  var INT = new Uint32Array(FLOAT.buffer);\n  var GL_UNSIGNED_SHORT$4 = 5123;\n\n  function convertToHalfFloat(array) {\n    var ushorts = pool.allocType(GL_UNSIGNED_SHORT$4, array.length);\n\n    for (var i = 0; i < array.length; ++i) {\n      if (isNaN(array[i])) {\n        ushorts[i] = 0xffff;\n      } else if (array[i] === Infinity) {\n        ushorts[i] = 0x7c00;\n      } else if (array[i] === -Infinity) {\n        ushorts[i] = 0xfc00;\n      } else {\n        FLOAT[0] = array[i];\n        var x = INT[0];\n        var sgn = x >>> 31 << 15;\n        var exp = (x << 1 >>> 24) - 127;\n        var frac = x >> 13 & (1 << 10) - 1;\n\n        if (exp < -24) {\n          // round non-representable denormals to 0\n          ushorts[i] = sgn;\n        } else if (exp < -14) {\n          // handle denormals\n          var s = -14 - exp;\n          ushorts[i] = sgn + (frac + (1 << 10) >> s);\n        } else if (exp > 15) {\n          // round overflow to +/- Infinity\n          ushorts[i] = sgn + 0x7c00;\n        } else {\n          // otherwise convert directly\n          ushorts[i] = sgn + (exp + 15 << 10) + frac;\n        }\n      }\n    }\n\n    return ushorts;\n  }\n\n  function isArrayLike(s) {\n    return Array.isArray(s) || isTypedArray(s);\n  }\n\n  var isPow2$1 = function isPow2$1(v) {\n    return !(v & v - 1) && !!v;\n  };\n\n  var GL_COMPRESSED_TEXTURE_FORMATS = 0x86A3;\n  var GL_TEXTURE_2D$1 = 0x0DE1;\n  var GL_TEXTURE_CUBE_MAP$1 = 0x8513;\n  var GL_TEXTURE_CUBE_MAP_POSITIVE_X$1 = 0x8515;\n  var GL_RGBA$1 = 0x1908;\n  var GL_ALPHA = 0x1906;\n  var GL_RGB = 0x1907;\n  var GL_LUMINANCE = 0x1909;\n  var GL_LUMINANCE_ALPHA = 0x190A;\n  var GL_RGBA4 = 0x8056;\n  var GL_RGB5_A1 = 0x8057;\n  var GL_RGB565 = 0x8D62;\n  var GL_UNSIGNED_SHORT_4_4_4_4$1 = 0x8033;\n  var GL_UNSIGNED_SHORT_5_5_5_1$1 = 0x8034;\n  var GL_UNSIGNED_SHORT_5_6_5$1 = 0x8363;\n  var GL_UNSIGNED_INT_24_8_WEBGL$1 = 0x84FA;\n  var GL_DEPTH_COMPONENT = 0x1902;\n  var GL_DEPTH_STENCIL = 0x84F9;\n  var GL_SRGB_EXT = 0x8C40;\n  var GL_SRGB_ALPHA_EXT = 0x8C42;\n  var GL_HALF_FLOAT_OES$1 = 0x8D61;\n  var GL_COMPRESSED_RGB_S3TC_DXT1_EXT = 0x83F0;\n  var GL_COMPRESSED_RGBA_S3TC_DXT1_EXT = 0x83F1;\n  var GL_COMPRESSED_RGBA_S3TC_DXT3_EXT = 0x83F2;\n  var GL_COMPRESSED_RGBA_S3TC_DXT5_EXT = 0x83F3;\n  var GL_COMPRESSED_RGB_ATC_WEBGL = 0x8C92;\n  var GL_COMPRESSED_RGBA_ATC_EXPLICIT_ALPHA_WEBGL = 0x8C93;\n  var GL_COMPRESSED_RGBA_ATC_INTERPOLATED_ALPHA_WEBGL = 0x87EE;\n  var GL_COMPRESSED_RGB_PVRTC_4BPPV1_IMG = 0x8C00;\n  var GL_COMPRESSED_RGB_PVRTC_2BPPV1_IMG = 0x8C01;\n  var GL_COMPRESSED_RGBA_PVRTC_4BPPV1_IMG = 0x8C02;\n  var GL_COMPRESSED_RGBA_PVRTC_2BPPV1_IMG = 0x8C03;\n  var GL_COMPRESSED_RGB_ETC1_WEBGL = 0x8D64;\n  var GL_UNSIGNED_BYTE$5 = 0x1401;\n  var GL_UNSIGNED_SHORT$3 = 0x1403;\n  var GL_UNSIGNED_INT$3 = 0x1405;\n  var GL_FLOAT$4 = 0x1406;\n  var GL_TEXTURE_WRAP_S = 0x2802;\n  var GL_TEXTURE_WRAP_T = 0x2803;\n  var GL_REPEAT = 0x2901;\n  var GL_CLAMP_TO_EDGE$1 = 0x812F;\n  var GL_MIRRORED_REPEAT = 0x8370;\n  var GL_TEXTURE_MAG_FILTER = 0x2800;\n  var GL_TEXTURE_MIN_FILTER = 0x2801;\n  var GL_NEAREST$1 = 0x2600;\n  var GL_LINEAR = 0x2601;\n  var GL_NEAREST_MIPMAP_NEAREST$1 = 0x2700;\n  var GL_LINEAR_MIPMAP_NEAREST$1 = 0x2701;\n  var GL_NEAREST_MIPMAP_LINEAR$1 = 0x2702;\n  var GL_LINEAR_MIPMAP_LINEAR$1 = 0x2703;\n  var GL_GENERATE_MIPMAP_HINT = 0x8192;\n  var GL_DONT_CARE = 0x1100;\n  var GL_FASTEST = 0x1101;\n  var GL_NICEST = 0x1102;\n  var GL_TEXTURE_MAX_ANISOTROPY_EXT = 0x84FE;\n  var GL_UNPACK_ALIGNMENT = 0x0CF5;\n  var GL_UNPACK_FLIP_Y_WEBGL = 0x9240;\n  var GL_UNPACK_PREMULTIPLY_ALPHA_WEBGL = 0x9241;\n  var GL_UNPACK_COLORSPACE_CONVERSION_WEBGL = 0x9243;\n  var GL_BROWSER_DEFAULT_WEBGL = 0x9244;\n  var GL_TEXTURE0$1 = 0x84C0;\n  var MIPMAP_FILTERS = [GL_NEAREST_MIPMAP_NEAREST$1, GL_NEAREST_MIPMAP_LINEAR$1, GL_LINEAR_MIPMAP_NEAREST$1, GL_LINEAR_MIPMAP_LINEAR$1];\n  var CHANNELS_FORMAT = [0, GL_LUMINANCE, GL_LUMINANCE_ALPHA, GL_RGB, GL_RGBA$1];\n  var FORMAT_CHANNELS = {};\n  FORMAT_CHANNELS[GL_LUMINANCE] = FORMAT_CHANNELS[GL_ALPHA] = FORMAT_CHANNELS[GL_DEPTH_COMPONENT] = 1;\n  FORMAT_CHANNELS[GL_DEPTH_STENCIL] = FORMAT_CHANNELS[GL_LUMINANCE_ALPHA] = 2;\n  FORMAT_CHANNELS[GL_RGB] = FORMAT_CHANNELS[GL_SRGB_EXT] = 3;\n  FORMAT_CHANNELS[GL_RGBA$1] = FORMAT_CHANNELS[GL_SRGB_ALPHA_EXT] = 4;\n\n  function objectName(str) {\n    return '[object ' + str + ']';\n  }\n\n  var CANVAS_CLASS = objectName('HTMLCanvasElement');\n  var CONTEXT2D_CLASS = objectName('CanvasRenderingContext2D');\n  var BITMAP_CLASS = objectName('ImageBitmap');\n  var IMAGE_CLASS = objectName('HTMLImageElement');\n  var VIDEO_CLASS = objectName('HTMLVideoElement');\n  var PIXEL_CLASSES = Object.keys(arrayTypes).concat([CANVAS_CLASS, CONTEXT2D_CLASS, BITMAP_CLASS, IMAGE_CLASS, VIDEO_CLASS]); // for every texture type, store\n  // the size in bytes.\n\n  var TYPE_SIZES = [];\n  TYPE_SIZES[GL_UNSIGNED_BYTE$5] = 1;\n  TYPE_SIZES[GL_FLOAT$4] = 4;\n  TYPE_SIZES[GL_HALF_FLOAT_OES$1] = 2;\n  TYPE_SIZES[GL_UNSIGNED_SHORT$3] = 2;\n  TYPE_SIZES[GL_UNSIGNED_INT$3] = 4;\n  var FORMAT_SIZES_SPECIAL = [];\n  FORMAT_SIZES_SPECIAL[GL_RGBA4] = 2;\n  FORMAT_SIZES_SPECIAL[GL_RGB5_A1] = 2;\n  FORMAT_SIZES_SPECIAL[GL_RGB565] = 2;\n  FORMAT_SIZES_SPECIAL[GL_DEPTH_STENCIL] = 4;\n  FORMAT_SIZES_SPECIAL[GL_COMPRESSED_RGB_S3TC_DXT1_EXT] = 0.5;\n  FORMAT_SIZES_SPECIAL[GL_COMPRESSED_RGBA_S3TC_DXT1_EXT] = 0.5;\n  FORMAT_SIZES_SPECIAL[GL_COMPRESSED_RGBA_S3TC_DXT3_EXT] = 1;\n  FORMAT_SIZES_SPECIAL[GL_COMPRESSED_RGBA_S3TC_DXT5_EXT] = 1;\n  FORMAT_SIZES_SPECIAL[GL_COMPRESSED_RGB_ATC_WEBGL] = 0.5;\n  FORMAT_SIZES_SPECIAL[GL_COMPRESSED_RGBA_ATC_EXPLICIT_ALPHA_WEBGL] = 1;\n  FORMAT_SIZES_SPECIAL[GL_COMPRESSED_RGBA_ATC_INTERPOLATED_ALPHA_WEBGL] = 1;\n  FORMAT_SIZES_SPECIAL[GL_COMPRESSED_RGB_PVRTC_4BPPV1_IMG] = 0.5;\n  FORMAT_SIZES_SPECIAL[GL_COMPRESSED_RGB_PVRTC_2BPPV1_IMG] = 0.25;\n  FORMAT_SIZES_SPECIAL[GL_COMPRESSED_RGBA_PVRTC_4BPPV1_IMG] = 0.5;\n  FORMAT_SIZES_SPECIAL[GL_COMPRESSED_RGBA_PVRTC_2BPPV1_IMG] = 0.25;\n  FORMAT_SIZES_SPECIAL[GL_COMPRESSED_RGB_ETC1_WEBGL] = 0.5;\n\n  function isNumericArray(arr) {\n    return Array.isArray(arr) && (arr.length === 0 || typeof arr[0] === 'number');\n  }\n\n  function isRectArray(arr) {\n    if (!Array.isArray(arr)) {\n      return false;\n    }\n\n    var width = arr.length;\n\n    if (width === 0 || !isArrayLike(arr[0])) {\n      return false;\n    }\n\n    return true;\n  }\n\n  function classString(x) {\n    return Object.prototype.toString.call(x);\n  }\n\n  function isCanvasElement(object) {\n    return classString(object) === CANVAS_CLASS;\n  }\n\n  function isContext2D(object) {\n    return classString(object) === CONTEXT2D_CLASS;\n  }\n\n  function isBitmap(object) {\n    return classString(object) === BITMAP_CLASS;\n  }\n\n  function isImageElement(object) {\n    return classString(object) === IMAGE_CLASS;\n  }\n\n  function isVideoElement(object) {\n    return classString(object) === VIDEO_CLASS;\n  }\n\n  function isPixelData(object) {\n    if (!object) {\n      return false;\n    }\n\n    var className = classString(object);\n\n    if (PIXEL_CLASSES.indexOf(className) >= 0) {\n      return true;\n    }\n\n    return isNumericArray(object) || isRectArray(object) || isNDArrayLike(object);\n  }\n\n  function typedArrayCode$1(data) {\n    return arrayTypes[Object.prototype.toString.call(data)] | 0;\n  }\n\n  function convertData(result, data) {\n    var n = data.length;\n\n    switch (result.type) {\n      case GL_UNSIGNED_BYTE$5:\n      case GL_UNSIGNED_SHORT$3:\n      case GL_UNSIGNED_INT$3:\n      case GL_FLOAT$4:\n        var converted = pool.allocType(result.type, n);\n        converted.set(data);\n        result.data = converted;\n        break;\n\n      case GL_HALF_FLOAT_OES$1:\n        result.data = convertToHalfFloat(data);\n        break;\n\n      default:\n        check$1.raise('unsupported texture type, must specify a typed array');\n    }\n  }\n\n  function preConvert(image, n) {\n    return pool.allocType(image.type === GL_HALF_FLOAT_OES$1 ? GL_FLOAT$4 : image.type, n);\n  }\n\n  function postConvert(image, data) {\n    if (image.type === GL_HALF_FLOAT_OES$1) {\n      image.data = convertToHalfFloat(data);\n      pool.freeType(data);\n    } else {\n      image.data = data;\n    }\n  }\n\n  function transposeData(image, array, strideX, strideY, strideC, offset) {\n    var w = image.width;\n    var h = image.height;\n    var c = image.channels;\n    var n = w * h * c;\n    var data = preConvert(image, n);\n    var p = 0;\n\n    for (var i = 0; i < h; ++i) {\n      for (var j = 0; j < w; ++j) {\n        for (var k = 0; k < c; ++k) {\n          data[p++] = array[strideX * j + strideY * i + strideC * k + offset];\n        }\n      }\n    }\n\n    postConvert(image, data);\n  }\n\n  function getTextureSize(format, type, width, height, isMipmap, isCube) {\n    var s;\n\n    if (typeof FORMAT_SIZES_SPECIAL[format] !== 'undefined') {\n      // we have a special array for dealing with weird color formats such as RGB5A1\n      s = FORMAT_SIZES_SPECIAL[format];\n    } else {\n      s = FORMAT_CHANNELS[format] * TYPE_SIZES[type];\n    }\n\n    if (isCube) {\n      s *= 6;\n    }\n\n    if (isMipmap) {\n      // compute the total size of all the mipmaps.\n      var total = 0;\n      var w = width;\n\n      while (w >= 1) {\n        // we can only use mipmaps on a square image,\n        // so we can simply use the width and ignore the height:\n        total += s * w * w;\n        w /= 2;\n      }\n\n      return total;\n    } else {\n      return s * width * height;\n    }\n  }\n\n  function createTextureSet(gl, extensions, limits, reglPoll, contextState, stats, config) {\n    // -------------------------------------------------------\n    // Initialize constants and parameter tables here\n    // -------------------------------------------------------\n    var mipmapHint = {\n      \"don't care\": GL_DONT_CARE,\n      'dont care': GL_DONT_CARE,\n      'nice': GL_NICEST,\n      'fast': GL_FASTEST\n    };\n    var wrapModes = {\n      'repeat': GL_REPEAT,\n      'clamp': GL_CLAMP_TO_EDGE$1,\n      'mirror': GL_MIRRORED_REPEAT\n    };\n    var magFilters = {\n      'nearest': GL_NEAREST$1,\n      'linear': GL_LINEAR\n    };\n    var minFilters = extend({\n      'mipmap': GL_LINEAR_MIPMAP_LINEAR$1,\n      'nearest mipmap nearest': GL_NEAREST_MIPMAP_NEAREST$1,\n      'linear mipmap nearest': GL_LINEAR_MIPMAP_NEAREST$1,\n      'nearest mipmap linear': GL_NEAREST_MIPMAP_LINEAR$1,\n      'linear mipmap linear': GL_LINEAR_MIPMAP_LINEAR$1\n    }, magFilters);\n    var colorSpace = {\n      'none': 0,\n      'browser': GL_BROWSER_DEFAULT_WEBGL\n    };\n    var textureTypes = {\n      'uint8': GL_UNSIGNED_BYTE$5,\n      'rgba4': GL_UNSIGNED_SHORT_4_4_4_4$1,\n      'rgb565': GL_UNSIGNED_SHORT_5_6_5$1,\n      'rgb5 a1': GL_UNSIGNED_SHORT_5_5_5_1$1\n    };\n    var textureFormats = {\n      'alpha': GL_ALPHA,\n      'luminance': GL_LUMINANCE,\n      'luminance alpha': GL_LUMINANCE_ALPHA,\n      'rgb': GL_RGB,\n      'rgba': GL_RGBA$1,\n      'rgba4': GL_RGBA4,\n      'rgb5 a1': GL_RGB5_A1,\n      'rgb565': GL_RGB565\n    };\n    var compressedTextureFormats = {};\n\n    if (extensions.ext_srgb) {\n      textureFormats.srgb = GL_SRGB_EXT;\n      textureFormats.srgba = GL_SRGB_ALPHA_EXT;\n    }\n\n    if (extensions.oes_texture_float) {\n      textureTypes.float32 = textureTypes.float = GL_FLOAT$4;\n    }\n\n    if (extensions.oes_texture_half_float) {\n      textureTypes['float16'] = textureTypes['half float'] = GL_HALF_FLOAT_OES$1;\n    }\n\n    if (extensions.webgl_depth_texture) {\n      extend(textureFormats, {\n        'depth': GL_DEPTH_COMPONENT,\n        'depth stencil': GL_DEPTH_STENCIL\n      });\n      extend(textureTypes, {\n        'uint16': GL_UNSIGNED_SHORT$3,\n        'uint32': GL_UNSIGNED_INT$3,\n        'depth stencil': GL_UNSIGNED_INT_24_8_WEBGL$1\n      });\n    }\n\n    if (extensions.webgl_compressed_texture_s3tc) {\n      extend(compressedTextureFormats, {\n        'rgb s3tc dxt1': GL_COMPRESSED_RGB_S3TC_DXT1_EXT,\n        'rgba s3tc dxt1': GL_COMPRESSED_RGBA_S3TC_DXT1_EXT,\n        'rgba s3tc dxt3': GL_COMPRESSED_RGBA_S3TC_DXT3_EXT,\n        'rgba s3tc dxt5': GL_COMPRESSED_RGBA_S3TC_DXT5_EXT\n      });\n    }\n\n    if (extensions.webgl_compressed_texture_atc) {\n      extend(compressedTextureFormats, {\n        'rgb atc': GL_COMPRESSED_RGB_ATC_WEBGL,\n        'rgba atc explicit alpha': GL_COMPRESSED_RGBA_ATC_EXPLICIT_ALPHA_WEBGL,\n        'rgba atc interpolated alpha': GL_COMPRESSED_RGBA_ATC_INTERPOLATED_ALPHA_WEBGL\n      });\n    }\n\n    if (extensions.webgl_compressed_texture_pvrtc) {\n      extend(compressedTextureFormats, {\n        'rgb pvrtc 4bppv1': GL_COMPRESSED_RGB_PVRTC_4BPPV1_IMG,\n        'rgb pvrtc 2bppv1': GL_COMPRESSED_RGB_PVRTC_2BPPV1_IMG,\n        'rgba pvrtc 4bppv1': GL_COMPRESSED_RGBA_PVRTC_4BPPV1_IMG,\n        'rgba pvrtc 2bppv1': GL_COMPRESSED_RGBA_PVRTC_2BPPV1_IMG\n      });\n    }\n\n    if (extensions.webgl_compressed_texture_etc1) {\n      compressedTextureFormats['rgb etc1'] = GL_COMPRESSED_RGB_ETC1_WEBGL;\n    } // Copy over all texture formats\n\n\n    var supportedCompressedFormats = Array.prototype.slice.call(gl.getParameter(GL_COMPRESSED_TEXTURE_FORMATS));\n    Object.keys(compressedTextureFormats).forEach(function (name) {\n      var format = compressedTextureFormats[name];\n\n      if (supportedCompressedFormats.indexOf(format) >= 0) {\n        textureFormats[name] = format;\n      }\n    });\n    var supportedFormats = Object.keys(textureFormats);\n    limits.textureFormats = supportedFormats; // associate with every format string its\n    // corresponding GL-value.\n\n    var textureFormatsInvert = [];\n    Object.keys(textureFormats).forEach(function (key) {\n      var val = textureFormats[key];\n      textureFormatsInvert[val] = key;\n    }); // associate with every type string its\n    // corresponding GL-value.\n\n    var textureTypesInvert = [];\n    Object.keys(textureTypes).forEach(function (key) {\n      var val = textureTypes[key];\n      textureTypesInvert[val] = key;\n    });\n    var magFiltersInvert = [];\n    Object.keys(magFilters).forEach(function (key) {\n      var val = magFilters[key];\n      magFiltersInvert[val] = key;\n    });\n    var minFiltersInvert = [];\n    Object.keys(minFilters).forEach(function (key) {\n      var val = minFilters[key];\n      minFiltersInvert[val] = key;\n    });\n    var wrapModesInvert = [];\n    Object.keys(wrapModes).forEach(function (key) {\n      var val = wrapModes[key];\n      wrapModesInvert[val] = key;\n    }); // colorFormats[] gives the format (channels) associated to an\n    // internalformat\n\n    var colorFormats = supportedFormats.reduce(function (color, key) {\n      var glenum = textureFormats[key];\n\n      if (glenum === GL_LUMINANCE || glenum === GL_ALPHA || glenum === GL_LUMINANCE || glenum === GL_LUMINANCE_ALPHA || glenum === GL_DEPTH_COMPONENT || glenum === GL_DEPTH_STENCIL) {\n        color[glenum] = glenum;\n      } else if (glenum === GL_RGB5_A1 || key.indexOf('rgba') >= 0) {\n        color[glenum] = GL_RGBA$1;\n      } else {\n        color[glenum] = GL_RGB;\n      }\n\n      return color;\n    }, {});\n\n    function TexFlags() {\n      // format info\n      this.internalformat = GL_RGBA$1;\n      this.format = GL_RGBA$1;\n      this.type = GL_UNSIGNED_BYTE$5;\n      this.compressed = false; // pixel storage\n\n      this.premultiplyAlpha = false;\n      this.flipY = false;\n      this.unpackAlignment = 1;\n      this.colorSpace = GL_BROWSER_DEFAULT_WEBGL; // shape info\n\n      this.width = 0;\n      this.height = 0;\n      this.channels = 0;\n    }\n\n    function copyFlags(result, other) {\n      result.internalformat = other.internalformat;\n      result.format = other.format;\n      result.type = other.type;\n      result.compressed = other.compressed;\n      result.premultiplyAlpha = other.premultiplyAlpha;\n      result.flipY = other.flipY;\n      result.unpackAlignment = other.unpackAlignment;\n      result.colorSpace = other.colorSpace;\n      result.width = other.width;\n      result.height = other.height;\n      result.channels = other.channels;\n    }\n\n    function parseFlags(flags, options) {\n      if (typeof options !== 'object' || !options) {\n        return;\n      }\n\n      if ('premultiplyAlpha' in options) {\n        check$1.type(options.premultiplyAlpha, 'boolean', 'invalid premultiplyAlpha');\n        flags.premultiplyAlpha = options.premultiplyAlpha;\n      }\n\n      if ('flipY' in options) {\n        check$1.type(options.flipY, 'boolean', 'invalid texture flip');\n        flags.flipY = options.flipY;\n      }\n\n      if ('alignment' in options) {\n        check$1.oneOf(options.alignment, [1, 2, 4, 8], 'invalid texture unpack alignment');\n        flags.unpackAlignment = options.alignment;\n      }\n\n      if ('colorSpace' in options) {\n        check$1.parameter(options.colorSpace, colorSpace, 'invalid colorSpace');\n        flags.colorSpace = colorSpace[options.colorSpace];\n      }\n\n      if ('type' in options) {\n        var type = options.type;\n        check$1(extensions.oes_texture_float || !(type === 'float' || type === 'float32'), 'you must enable the OES_texture_float extension in order to use floating point textures.');\n        check$1(extensions.oes_texture_half_float || !(type === 'half float' || type === 'float16'), 'you must enable the OES_texture_half_float extension in order to use 16-bit floating point textures.');\n        check$1(extensions.webgl_depth_texture || !(type === 'uint16' || type === 'uint32' || type === 'depth stencil'), 'you must enable the WEBGL_depth_texture extension in order to use depth/stencil textures.');\n        check$1.parameter(type, textureTypes, 'invalid texture type');\n        flags.type = textureTypes[type];\n      }\n\n      var w = flags.width;\n      var h = flags.height;\n      var c = flags.channels;\n      var hasChannels = false;\n\n      if ('shape' in options) {\n        check$1(Array.isArray(options.shape) && options.shape.length >= 2, 'shape must be an array');\n        w = options.shape[0];\n        h = options.shape[1];\n\n        if (options.shape.length === 3) {\n          c = options.shape[2];\n          check$1(c > 0 && c <= 4, 'invalid number of channels');\n          hasChannels = true;\n        }\n\n        check$1(w >= 0 && w <= limits.maxTextureSize, 'invalid width');\n        check$1(h >= 0 && h <= limits.maxTextureSize, 'invalid height');\n      } else {\n        if ('radius' in options) {\n          w = h = options.radius;\n          check$1(w >= 0 && w <= limits.maxTextureSize, 'invalid radius');\n        }\n\n        if ('width' in options) {\n          w = options.width;\n          check$1(w >= 0 && w <= limits.maxTextureSize, 'invalid width');\n        }\n\n        if ('height' in options) {\n          h = options.height;\n          check$1(h >= 0 && h <= limits.maxTextureSize, 'invalid height');\n        }\n\n        if ('channels' in options) {\n          c = options.channels;\n          check$1(c > 0 && c <= 4, 'invalid number of channels');\n          hasChannels = true;\n        }\n      }\n\n      flags.width = w | 0;\n      flags.height = h | 0;\n      flags.channels = c | 0;\n      var hasFormat = false;\n\n      if ('format' in options) {\n        var formatStr = options.format;\n        check$1(extensions.webgl_depth_texture || !(formatStr === 'depth' || formatStr === 'depth stencil'), 'you must enable the WEBGL_depth_texture extension in order to use depth/stencil textures.');\n        check$1.parameter(formatStr, textureFormats, 'invalid texture format');\n        var internalformat = flags.internalformat = textureFormats[formatStr];\n        flags.format = colorFormats[internalformat];\n\n        if (formatStr in textureTypes) {\n          if (!('type' in options)) {\n            flags.type = textureTypes[formatStr];\n          }\n        }\n\n        if (formatStr in compressedTextureFormats) {\n          flags.compressed = true;\n        }\n\n        hasFormat = true;\n      } // Reconcile channels and format\n\n\n      if (!hasChannels && hasFormat) {\n        flags.channels = FORMAT_CHANNELS[flags.format];\n      } else if (hasChannels && !hasFormat) {\n        if (flags.channels !== CHANNELS_FORMAT[flags.format]) {\n          flags.format = flags.internalformat = CHANNELS_FORMAT[flags.channels];\n        }\n      } else if (hasFormat && hasChannels) {\n        check$1(flags.channels === FORMAT_CHANNELS[flags.format], 'number of channels inconsistent with specified format');\n      }\n    }\n\n    function setFlags(flags) {\n      gl.pixelStorei(GL_UNPACK_FLIP_Y_WEBGL, flags.flipY);\n      gl.pixelStorei(GL_UNPACK_PREMULTIPLY_ALPHA_WEBGL, flags.premultiplyAlpha);\n      gl.pixelStorei(GL_UNPACK_COLORSPACE_CONVERSION_WEBGL, flags.colorSpace);\n      gl.pixelStorei(GL_UNPACK_ALIGNMENT, flags.unpackAlignment);\n    } // -------------------------------------------------------\n    // Tex image data\n    // -------------------------------------------------------\n\n\n    function TexImage() {\n      TexFlags.call(this);\n      this.xOffset = 0;\n      this.yOffset = 0; // data\n\n      this.data = null;\n      this.needsFree = false; // html element\n\n      this.element = null; // copyTexImage info\n\n      this.needsCopy = false;\n    }\n\n    function parseImage(image, options) {\n      var data = null;\n\n      if (isPixelData(options)) {\n        data = options;\n      } else if (options) {\n        check$1.type(options, 'object', 'invalid pixel data type');\n        parseFlags(image, options);\n\n        if ('x' in options) {\n          image.xOffset = options.x | 0;\n        }\n\n        if ('y' in options) {\n          image.yOffset = options.y | 0;\n        }\n\n        if (isPixelData(options.data)) {\n          data = options.data;\n        }\n      }\n\n      check$1(!image.compressed || data instanceof Uint8Array, 'compressed texture data must be stored in a uint8array');\n\n      if (options.copy) {\n        check$1(!data, 'can not specify copy and data field for the same texture');\n        var viewW = contextState.viewportWidth;\n        var viewH = contextState.viewportHeight;\n        image.width = image.width || viewW - image.xOffset;\n        image.height = image.height || viewH - image.yOffset;\n        image.needsCopy = true;\n        check$1(image.xOffset >= 0 && image.xOffset < viewW && image.yOffset >= 0 && image.yOffset < viewH && image.width > 0 && image.width <= viewW && image.height > 0 && image.height <= viewH, 'copy texture read out of bounds');\n      } else if (!data) {\n        image.width = image.width || 1;\n        image.height = image.height || 1;\n        image.channels = image.channels || 4;\n      } else if (isTypedArray(data)) {\n        image.channels = image.channels || 4;\n        image.data = data;\n\n        if (!('type' in options) && image.type === GL_UNSIGNED_BYTE$5) {\n          image.type = typedArrayCode$1(data);\n        }\n      } else if (isNumericArray(data)) {\n        image.channels = image.channels || 4;\n        convertData(image, data);\n        image.alignment = 1;\n        image.needsFree = true;\n      } else if (isNDArrayLike(data)) {\n        var array = data.data;\n\n        if (!Array.isArray(array) && image.type === GL_UNSIGNED_BYTE$5) {\n          image.type = typedArrayCode$1(array);\n        }\n\n        var shape = data.shape;\n        var stride = data.stride;\n        var shapeX, shapeY, shapeC, strideX, strideY, strideC;\n\n        if (shape.length === 3) {\n          shapeC = shape[2];\n          strideC = stride[2];\n        } else {\n          check$1(shape.length === 2, 'invalid ndarray pixel data, must be 2 or 3D');\n          shapeC = 1;\n          strideC = 1;\n        }\n\n        shapeX = shape[0];\n        shapeY = shape[1];\n        strideX = stride[0];\n        strideY = stride[1];\n        image.alignment = 1;\n        image.width = shapeX;\n        image.height = shapeY;\n        image.channels = shapeC;\n        image.format = image.internalformat = CHANNELS_FORMAT[shapeC];\n        image.needsFree = true;\n        transposeData(image, array, strideX, strideY, strideC, data.offset);\n      } else if (isCanvasElement(data) || isContext2D(data)) {\n        if (isCanvasElement(data)) {\n          image.element = data;\n        } else {\n          image.element = data.canvas;\n        }\n\n        image.width = image.element.width;\n        image.height = image.element.height;\n        image.channels = 4;\n      } else if (isBitmap(data)) {\n        image.element = data;\n        image.width = data.width;\n        image.height = data.height;\n        image.channels = 4;\n      } else if (isImageElement(data)) {\n        image.element = data;\n        image.width = data.naturalWidth;\n        image.height = data.naturalHeight;\n        image.channels = 4;\n      } else if (isVideoElement(data)) {\n        image.element = data;\n        image.width = data.videoWidth;\n        image.height = data.videoHeight;\n        image.channels = 4;\n      } else if (isRectArray(data)) {\n        var w = image.width || data[0].length;\n        var h = image.height || data.length;\n        var c = image.channels;\n\n        if (isArrayLike(data[0][0])) {\n          c = c || data[0][0].length;\n        } else {\n          c = c || 1;\n        }\n\n        var arrayShape = flattenUtils.shape(data);\n        var n = 1;\n\n        for (var dd = 0; dd < arrayShape.length; ++dd) {\n          n *= arrayShape[dd];\n        }\n\n        var allocData = preConvert(image, n);\n        flattenUtils.flatten(data, arrayShape, '', allocData);\n        postConvert(image, allocData);\n        image.alignment = 1;\n        image.width = w;\n        image.height = h;\n        image.channels = c;\n        image.format = image.internalformat = CHANNELS_FORMAT[c];\n        image.needsFree = true;\n      }\n\n      if (image.type === GL_FLOAT$4) {\n        check$1(limits.extensions.indexOf('oes_texture_float') >= 0, 'oes_texture_float extension not enabled');\n      } else if (image.type === GL_HALF_FLOAT_OES$1) {\n        check$1(limits.extensions.indexOf('oes_texture_half_float') >= 0, 'oes_texture_half_float extension not enabled');\n      } // do compressed texture  validation here.\n\n    }\n\n    function setImage(info, target, miplevel) {\n      var element = info.element;\n      var data = info.data;\n      var internalformat = info.internalformat;\n      var format = info.format;\n      var type = info.type;\n      var width = info.width;\n      var height = info.height;\n      var channels = info.channels;\n      setFlags(info);\n\n      if (element) {\n        gl.texImage2D(target, miplevel, format, format, type, element);\n      } else if (info.compressed) {\n        gl.compressedTexImage2D(target, miplevel, internalformat, width, height, 0, data);\n      } else if (info.needsCopy) {\n        reglPoll();\n        gl.copyTexImage2D(target, miplevel, format, info.xOffset, info.yOffset, width, height, 0);\n      } else {\n        var nullData = !data;\n\n        if (nullData) {\n          data = pool.zero.allocType(type, width * height * channels);\n        }\n\n        gl.texImage2D(target, miplevel, format, width, height, 0, format, type, data);\n\n        if (nullData && data) {\n          pool.zero.freeType(data);\n        }\n      }\n    }\n\n    function setSubImage(info, target, x, y, miplevel) {\n      var element = info.element;\n      var data = info.data;\n      var internalformat = info.internalformat;\n      var format = info.format;\n      var type = info.type;\n      var width = info.width;\n      var height = info.height;\n      setFlags(info);\n\n      if (element) {\n        gl.texSubImage2D(target, miplevel, x, y, format, type, element);\n      } else if (info.compressed) {\n        gl.compressedTexSubImage2D(target, miplevel, x, y, internalformat, width, height, data);\n      } else if (info.needsCopy) {\n        reglPoll();\n        gl.copyTexSubImage2D(target, miplevel, x, y, info.xOffset, info.yOffset, width, height);\n      } else {\n        gl.texSubImage2D(target, miplevel, x, y, width, height, format, type, data);\n      }\n    } // texImage pool\n\n\n    var imagePool = [];\n\n    function allocImage() {\n      return imagePool.pop() || new TexImage();\n    }\n\n    function freeImage(image) {\n      if (image.needsFree) {\n        pool.freeType(image.data);\n      }\n\n      TexImage.call(image);\n      imagePool.push(image);\n    } // -------------------------------------------------------\n    // Mip map\n    // -------------------------------------------------------\n\n\n    function MipMap() {\n      TexFlags.call(this);\n      this.genMipmaps = false;\n      this.mipmapHint = GL_DONT_CARE;\n      this.mipmask = 0;\n      this.images = Array(16);\n    }\n\n    function parseMipMapFromShape(mipmap, width, height) {\n      var img = mipmap.images[0] = allocImage();\n      mipmap.mipmask = 1;\n      img.width = mipmap.width = width;\n      img.height = mipmap.height = height;\n      img.channels = mipmap.channels = 4;\n    }\n\n    function parseMipMapFromObject(mipmap, options) {\n      var imgData = null;\n\n      if (isPixelData(options)) {\n        imgData = mipmap.images[0] = allocImage();\n        copyFlags(imgData, mipmap);\n        parseImage(imgData, options);\n        mipmap.mipmask = 1;\n      } else {\n        parseFlags(mipmap, options);\n\n        if (Array.isArray(options.mipmap)) {\n          var mipData = options.mipmap;\n\n          for (var i = 0; i < mipData.length; ++i) {\n            imgData = mipmap.images[i] = allocImage();\n            copyFlags(imgData, mipmap);\n            imgData.width >>= i;\n            imgData.height >>= i;\n            parseImage(imgData, mipData[i]);\n            mipmap.mipmask |= 1 << i;\n          }\n        } else {\n          imgData = mipmap.images[0] = allocImage();\n          copyFlags(imgData, mipmap);\n          parseImage(imgData, options);\n          mipmap.mipmask = 1;\n        }\n      }\n\n      copyFlags(mipmap, mipmap.images[0]); // For textures of the compressed format WEBGL_compressed_texture_s3tc\n      // we must have that\n      //\n      // \"When level equals zero width and height must be a multiple of 4.\n      // When level is greater than 0 width and height must be 0, 1, 2 or a multiple of 4. \"\n      //\n      // but we do not yet support having multiple mipmap levels for compressed textures,\n      // so we only test for level zero.\n\n      if (mipmap.compressed && mipmap.internalformat === GL_COMPRESSED_RGB_S3TC_DXT1_EXT || mipmap.internalformat === GL_COMPRESSED_RGBA_S3TC_DXT1_EXT || mipmap.internalformat === GL_COMPRESSED_RGBA_S3TC_DXT3_EXT || mipmap.internalformat === GL_COMPRESSED_RGBA_S3TC_DXT5_EXT) {\n        check$1(mipmap.width % 4 === 0 && mipmap.height % 4 === 0, 'for compressed texture formats, mipmap level 0 must have width and height that are a multiple of 4');\n      }\n    }\n\n    function setMipMap(mipmap, target) {\n      var images = mipmap.images;\n\n      for (var i = 0; i < images.length; ++i) {\n        if (!images[i]) {\n          return;\n        }\n\n        setImage(images[i], target, i);\n      }\n    }\n\n    var mipPool = [];\n\n    function allocMipMap() {\n      var result = mipPool.pop() || new MipMap();\n      TexFlags.call(result);\n      result.mipmask = 0;\n\n      for (var i = 0; i < 16; ++i) {\n        result.images[i] = null;\n      }\n\n      return result;\n    }\n\n    function freeMipMap(mipmap) {\n      var images = mipmap.images;\n\n      for (var i = 0; i < images.length; ++i) {\n        if (images[i]) {\n          freeImage(images[i]);\n        }\n\n        images[i] = null;\n      }\n\n      mipPool.push(mipmap);\n    } // -------------------------------------------------------\n    // Tex info\n    // -------------------------------------------------------\n\n\n    function TexInfo() {\n      this.minFilter = GL_NEAREST$1;\n      this.magFilter = GL_NEAREST$1;\n      this.wrapS = GL_CLAMP_TO_EDGE$1;\n      this.wrapT = GL_CLAMP_TO_EDGE$1;\n      this.anisotropic = 1;\n      this.genMipmaps = false;\n      this.mipmapHint = GL_DONT_CARE;\n    }\n\n    function parseTexInfo(info, options) {\n      if ('min' in options) {\n        var minFilter = options.min;\n        check$1.parameter(minFilter, minFilters);\n        info.minFilter = minFilters[minFilter];\n\n        if (MIPMAP_FILTERS.indexOf(info.minFilter) >= 0 && !('faces' in options)) {\n          info.genMipmaps = true;\n        }\n      }\n\n      if ('mag' in options) {\n        var magFilter = options.mag;\n        check$1.parameter(magFilter, magFilters);\n        info.magFilter = magFilters[magFilter];\n      }\n\n      var wrapS = info.wrapS;\n      var wrapT = info.wrapT;\n\n      if ('wrap' in options) {\n        var wrap = options.wrap;\n\n        if (typeof wrap === 'string') {\n          check$1.parameter(wrap, wrapModes);\n          wrapS = wrapT = wrapModes[wrap];\n        } else if (Array.isArray(wrap)) {\n          check$1.parameter(wrap[0], wrapModes);\n          check$1.parameter(wrap[1], wrapModes);\n          wrapS = wrapModes[wrap[0]];\n          wrapT = wrapModes[wrap[1]];\n        }\n      } else {\n        if ('wrapS' in options) {\n          var optWrapS = options.wrapS;\n          check$1.parameter(optWrapS, wrapModes);\n          wrapS = wrapModes[optWrapS];\n        }\n\n        if ('wrapT' in options) {\n          var optWrapT = options.wrapT;\n          check$1.parameter(optWrapT, wrapModes);\n          wrapT = wrapModes[optWrapT];\n        }\n      }\n\n      info.wrapS = wrapS;\n      info.wrapT = wrapT;\n\n      if ('anisotropic' in options) {\n        var anisotropic = options.anisotropic;\n        check$1(typeof anisotropic === 'number' && anisotropic >= 1 && anisotropic <= limits.maxAnisotropic, 'aniso samples must be between 1 and ');\n        info.anisotropic = options.anisotropic;\n      }\n\n      if ('mipmap' in options) {\n        var hasMipMap = false;\n\n        switch (typeof options.mipmap) {\n          case 'string':\n            check$1.parameter(options.mipmap, mipmapHint, 'invalid mipmap hint');\n            info.mipmapHint = mipmapHint[options.mipmap];\n            info.genMipmaps = true;\n            hasMipMap = true;\n            break;\n\n          case 'boolean':\n            hasMipMap = info.genMipmaps = options.mipmap;\n            break;\n\n          case 'object':\n            check$1(Array.isArray(options.mipmap), 'invalid mipmap type');\n            info.genMipmaps = false;\n            hasMipMap = true;\n            break;\n\n          default:\n            check$1.raise('invalid mipmap type');\n        }\n\n        if (hasMipMap && !('min' in options)) {\n          info.minFilter = GL_NEAREST_MIPMAP_NEAREST$1;\n        }\n      }\n    }\n\n    function setTexInfo(info, target) {\n      gl.texParameteri(target, GL_TEXTURE_MIN_FILTER, info.minFilter);\n      gl.texParameteri(target, GL_TEXTURE_MAG_FILTER, info.magFilter);\n      gl.texParameteri(target, GL_TEXTURE_WRAP_S, info.wrapS);\n      gl.texParameteri(target, GL_TEXTURE_WRAP_T, info.wrapT);\n\n      if (extensions.ext_texture_filter_anisotropic) {\n        gl.texParameteri(target, GL_TEXTURE_MAX_ANISOTROPY_EXT, info.anisotropic);\n      }\n\n      if (info.genMipmaps) {\n        gl.hint(GL_GENERATE_MIPMAP_HINT, info.mipmapHint);\n        gl.generateMipmap(target);\n      }\n    } // -------------------------------------------------------\n    // Full texture object\n    // -------------------------------------------------------\n\n\n    var textureCount = 0;\n    var textureSet = {};\n    var numTexUnits = limits.maxTextureUnits;\n    var textureUnits = Array(numTexUnits).map(function () {\n      return null;\n    });\n\n    function REGLTexture(target) {\n      TexFlags.call(this);\n      this.mipmask = 0;\n      this.internalformat = GL_RGBA$1;\n      this.id = textureCount++;\n      this.refCount = 1;\n      this.target = target;\n      this.texture = gl.createTexture();\n      this.unit = -1;\n      this.bindCount = 0;\n      this.texInfo = new TexInfo();\n\n      if (config.profile) {\n        this.stats = {\n          size: 0\n        };\n      }\n    }\n\n    function tempBind(texture) {\n      gl.activeTexture(GL_TEXTURE0$1);\n      gl.bindTexture(texture.target, texture.texture);\n    }\n\n    function tempRestore() {\n      var prev = textureUnits[0];\n\n      if (prev) {\n        gl.bindTexture(prev.target, prev.texture);\n      } else {\n        gl.bindTexture(GL_TEXTURE_2D$1, null);\n      }\n    }\n\n    function destroy(texture) {\n      var handle = texture.texture;\n      check$1(handle, 'must not double destroy texture');\n      var unit = texture.unit;\n      var target = texture.target;\n\n      if (unit >= 0) {\n        gl.activeTexture(GL_TEXTURE0$1 + unit);\n        gl.bindTexture(target, null);\n        textureUnits[unit] = null;\n      }\n\n      gl.deleteTexture(handle);\n      texture.texture = null;\n      texture.params = null;\n      texture.pixels = null;\n      texture.refCount = 0;\n      delete textureSet[texture.id];\n      stats.textureCount--;\n    }\n\n    extend(REGLTexture.prototype, {\n      bind: function bind() {\n        var texture = this;\n        texture.bindCount += 1;\n        var unit = texture.unit;\n\n        if (unit < 0) {\n          for (var i = 0; i < numTexUnits; ++i) {\n            var other = textureUnits[i];\n\n            if (other) {\n              if (other.bindCount > 0) {\n                continue;\n              }\n\n              other.unit = -1;\n            }\n\n            textureUnits[i] = texture;\n            unit = i;\n            break;\n          }\n\n          if (unit >= numTexUnits) {\n            check$1.raise('insufficient number of texture units');\n          }\n\n          if (config.profile && stats.maxTextureUnits < unit + 1) {\n            stats.maxTextureUnits = unit + 1; // +1, since the units are zero-based\n          }\n\n          texture.unit = unit;\n          gl.activeTexture(GL_TEXTURE0$1 + unit);\n          gl.bindTexture(texture.target, texture.texture);\n        }\n\n        return unit;\n      },\n      unbind: function unbind() {\n        this.bindCount -= 1;\n      },\n      decRef: function decRef() {\n        if (--this.refCount <= 0) {\n          destroy(this);\n        }\n      }\n    });\n\n    function createTexture2D(a, b) {\n      var texture = new REGLTexture(GL_TEXTURE_2D$1);\n      textureSet[texture.id] = texture;\n      stats.textureCount++;\n\n      function reglTexture2D(a, b) {\n        var texInfo = texture.texInfo;\n        TexInfo.call(texInfo);\n        var mipData = allocMipMap();\n\n        if (typeof a === 'number') {\n          if (typeof b === 'number') {\n            parseMipMapFromShape(mipData, a | 0, b | 0);\n          } else {\n            parseMipMapFromShape(mipData, a | 0, a | 0);\n          }\n        } else if (a) {\n          check$1.type(a, 'object', 'invalid arguments to regl.texture');\n          parseTexInfo(texInfo, a);\n          parseMipMapFromObject(mipData, a);\n        } else {\n          // empty textures get assigned a default shape of 1x1\n          parseMipMapFromShape(mipData, 1, 1);\n        }\n\n        if (texInfo.genMipmaps) {\n          mipData.mipmask = (mipData.width << 1) - 1;\n        }\n\n        texture.mipmask = mipData.mipmask;\n        copyFlags(texture, mipData);\n        check$1.texture2D(texInfo, mipData, limits);\n        texture.internalformat = mipData.internalformat;\n        reglTexture2D.width = mipData.width;\n        reglTexture2D.height = mipData.height;\n        tempBind(texture);\n        setMipMap(mipData, GL_TEXTURE_2D$1);\n        setTexInfo(texInfo, GL_TEXTURE_2D$1);\n        tempRestore();\n        freeMipMap(mipData);\n\n        if (config.profile) {\n          texture.stats.size = getTextureSize(texture.internalformat, texture.type, mipData.width, mipData.height, texInfo.genMipmaps, false);\n        }\n\n        reglTexture2D.format = textureFormatsInvert[texture.internalformat];\n        reglTexture2D.type = textureTypesInvert[texture.type];\n        reglTexture2D.mag = magFiltersInvert[texInfo.magFilter];\n        reglTexture2D.min = minFiltersInvert[texInfo.minFilter];\n        reglTexture2D.wrapS = wrapModesInvert[texInfo.wrapS];\n        reglTexture2D.wrapT = wrapModesInvert[texInfo.wrapT];\n        return reglTexture2D;\n      }\n\n      function subimage(image, x_, y_, level_) {\n        check$1(!!image, 'must specify image data');\n        var x = x_ | 0;\n        var y = y_ | 0;\n        var level = level_ | 0;\n        var imageData = allocImage();\n        copyFlags(imageData, texture);\n        imageData.width = 0;\n        imageData.height = 0;\n        parseImage(imageData, image);\n        imageData.width = imageData.width || (texture.width >> level) - x;\n        imageData.height = imageData.height || (texture.height >> level) - y;\n        check$1(texture.type === imageData.type && texture.format === imageData.format && texture.internalformat === imageData.internalformat, 'incompatible format for texture.subimage');\n        check$1(x >= 0 && y >= 0 && x + imageData.width <= texture.width && y + imageData.height <= texture.height, 'texture.subimage write out of bounds');\n        check$1(texture.mipmask & 1 << level, 'missing mipmap data');\n        check$1(imageData.data || imageData.element || imageData.needsCopy, 'missing image data');\n        tempBind(texture);\n        setSubImage(imageData, GL_TEXTURE_2D$1, x, y, level);\n        tempRestore();\n        freeImage(imageData);\n        return reglTexture2D;\n      }\n\n      function resize(w_, h_) {\n        var w = w_ | 0;\n        var h = h_ | 0 || w;\n\n        if (w === texture.width && h === texture.height) {\n          return reglTexture2D;\n        }\n\n        reglTexture2D.width = texture.width = w;\n        reglTexture2D.height = texture.height = h;\n        tempBind(texture);\n        var data;\n        var channels = texture.channels;\n        var type = texture.type;\n\n        for (var i = 0; texture.mipmask >> i; ++i) {\n          var _w = w >> i;\n\n          var _h = h >> i;\n\n          if (!_w || !_h) break;\n          data = pool.zero.allocType(type, _w * _h * channels);\n          gl.texImage2D(GL_TEXTURE_2D$1, i, texture.format, _w, _h, 0, texture.format, texture.type, data);\n          if (data) pool.zero.freeType(data);\n        }\n\n        tempRestore(); // also, recompute the texture size.\n\n        if (config.profile) {\n          texture.stats.size = getTextureSize(texture.internalformat, texture.type, w, h, false, false);\n        }\n\n        return reglTexture2D;\n      }\n\n      reglTexture2D(a, b);\n      reglTexture2D.subimage = subimage;\n      reglTexture2D.resize = resize;\n      reglTexture2D._reglType = 'texture2d';\n      reglTexture2D._texture = texture;\n\n      if (config.profile) {\n        reglTexture2D.stats = texture.stats;\n      }\n\n      reglTexture2D.destroy = function () {\n        texture.decRef();\n      };\n\n      return reglTexture2D;\n    }\n\n    function createTextureCube(a0, a1, a2, a3, a4, a5) {\n      var texture = new REGLTexture(GL_TEXTURE_CUBE_MAP$1);\n      textureSet[texture.id] = texture;\n      stats.cubeCount++;\n      var faces = new Array(6);\n\n      function reglTextureCube(a0, a1, a2, a3, a4, a5) {\n        var i;\n        var texInfo = texture.texInfo;\n        TexInfo.call(texInfo);\n\n        for (i = 0; i < 6; ++i) {\n          faces[i] = allocMipMap();\n        }\n\n        if (typeof a0 === 'number' || !a0) {\n          var s = a0 | 0 || 1;\n\n          for (i = 0; i < 6; ++i) {\n            parseMipMapFromShape(faces[i], s, s);\n          }\n        } else if (typeof a0 === 'object') {\n          if (a1) {\n            parseMipMapFromObject(faces[0], a0);\n            parseMipMapFromObject(faces[1], a1);\n            parseMipMapFromObject(faces[2], a2);\n            parseMipMapFromObject(faces[3], a3);\n            parseMipMapFromObject(faces[4], a4);\n            parseMipMapFromObject(faces[5], a5);\n          } else {\n            parseTexInfo(texInfo, a0);\n            parseFlags(texture, a0);\n\n            if ('faces' in a0) {\n              var face_input = a0.faces;\n              check$1(Array.isArray(face_input) && face_input.length === 6, 'cube faces must be a length 6 array');\n\n              for (i = 0; i < 6; ++i) {\n                check$1(typeof face_input[i] === 'object' && !!face_input[i], 'invalid input for cube map face');\n                copyFlags(faces[i], texture);\n                parseMipMapFromObject(faces[i], face_input[i]);\n              }\n            } else {\n              for (i = 0; i < 6; ++i) {\n                parseMipMapFromObject(faces[i], a0);\n              }\n            }\n          }\n        } else {\n          check$1.raise('invalid arguments to cube map');\n        }\n\n        copyFlags(texture, faces[0]);\n\n        if (!limits.npotTextureCube) {\n          check$1(isPow2$1(texture.width) && isPow2$1(texture.height), 'your browser does not support non power or two texture dimensions');\n        }\n\n        if (texInfo.genMipmaps) {\n          texture.mipmask = (faces[0].width << 1) - 1;\n        } else {\n          texture.mipmask = faces[0].mipmask;\n        }\n\n        check$1.textureCube(texture, texInfo, faces, limits);\n        texture.internalformat = faces[0].internalformat;\n        reglTextureCube.width = faces[0].width;\n        reglTextureCube.height = faces[0].height;\n        tempBind(texture);\n\n        for (i = 0; i < 6; ++i) {\n          setMipMap(faces[i], GL_TEXTURE_CUBE_MAP_POSITIVE_X$1 + i);\n        }\n\n        setTexInfo(texInfo, GL_TEXTURE_CUBE_MAP$1);\n        tempRestore();\n\n        if (config.profile) {\n          texture.stats.size = getTextureSize(texture.internalformat, texture.type, reglTextureCube.width, reglTextureCube.height, texInfo.genMipmaps, true);\n        }\n\n        reglTextureCube.format = textureFormatsInvert[texture.internalformat];\n        reglTextureCube.type = textureTypesInvert[texture.type];\n        reglTextureCube.mag = magFiltersInvert[texInfo.magFilter];\n        reglTextureCube.min = minFiltersInvert[texInfo.minFilter];\n        reglTextureCube.wrapS = wrapModesInvert[texInfo.wrapS];\n        reglTextureCube.wrapT = wrapModesInvert[texInfo.wrapT];\n\n        for (i = 0; i < 6; ++i) {\n          freeMipMap(faces[i]);\n        }\n\n        return reglTextureCube;\n      }\n\n      function subimage(face, image, x_, y_, level_) {\n        check$1(!!image, 'must specify image data');\n        check$1(typeof face === 'number' && face === (face | 0) && face >= 0 && face < 6, 'invalid face');\n        var x = x_ | 0;\n        var y = y_ | 0;\n        var level = level_ | 0;\n        var imageData = allocImage();\n        copyFlags(imageData, texture);\n        imageData.width = 0;\n        imageData.height = 0;\n        parseImage(imageData, image);\n        imageData.width = imageData.width || (texture.width >> level) - x;\n        imageData.height = imageData.height || (texture.height >> level) - y;\n        check$1(texture.type === imageData.type && texture.format === imageData.format && texture.internalformat === imageData.internalformat, 'incompatible format for texture.subimage');\n        check$1(x >= 0 && y >= 0 && x + imageData.width <= texture.width && y + imageData.height <= texture.height, 'texture.subimage write out of bounds');\n        check$1(texture.mipmask & 1 << level, 'missing mipmap data');\n        check$1(imageData.data || imageData.element || imageData.needsCopy, 'missing image data');\n        tempBind(texture);\n        setSubImage(imageData, GL_TEXTURE_CUBE_MAP_POSITIVE_X$1 + face, x, y, level);\n        tempRestore();\n        freeImage(imageData);\n        return reglTextureCube;\n      }\n\n      function resize(radius_) {\n        var radius = radius_ | 0;\n\n        if (radius === texture.width) {\n          return;\n        }\n\n        reglTextureCube.width = texture.width = radius;\n        reglTextureCube.height = texture.height = radius;\n        tempBind(texture);\n\n        for (var i = 0; i < 6; ++i) {\n          for (var j = 0; texture.mipmask >> j; ++j) {\n            gl.texImage2D(GL_TEXTURE_CUBE_MAP_POSITIVE_X$1 + i, j, texture.format, radius >> j, radius >> j, 0, texture.format, texture.type, null);\n          }\n        }\n\n        tempRestore();\n\n        if (config.profile) {\n          texture.stats.size = getTextureSize(texture.internalformat, texture.type, reglTextureCube.width, reglTextureCube.height, false, true);\n        }\n\n        return reglTextureCube;\n      }\n\n      reglTextureCube(a0, a1, a2, a3, a4, a5);\n      reglTextureCube.subimage = subimage;\n      reglTextureCube.resize = resize;\n      reglTextureCube._reglType = 'textureCube';\n      reglTextureCube._texture = texture;\n\n      if (config.profile) {\n        reglTextureCube.stats = texture.stats;\n      }\n\n      reglTextureCube.destroy = function () {\n        texture.decRef();\n      };\n\n      return reglTextureCube;\n    } // Called when regl is destroyed\n\n\n    function destroyTextures() {\n      for (var i = 0; i < numTexUnits; ++i) {\n        gl.activeTexture(GL_TEXTURE0$1 + i);\n        gl.bindTexture(GL_TEXTURE_2D$1, null);\n        textureUnits[i] = null;\n      }\n\n      values(textureSet).forEach(destroy);\n      stats.cubeCount = 0;\n      stats.textureCount = 0;\n    }\n\n    if (config.profile) {\n      stats.getTotalTextureSize = function () {\n        var total = 0;\n        Object.keys(textureSet).forEach(function (key) {\n          total += textureSet[key].stats.size;\n        });\n        return total;\n      };\n    }\n\n    function restoreTextures() {\n      for (var i = 0; i < numTexUnits; ++i) {\n        var tex = textureUnits[i];\n\n        if (tex) {\n          tex.bindCount = 0;\n          tex.unit = -1;\n          textureUnits[i] = null;\n        }\n      }\n\n      values(textureSet).forEach(function (texture) {\n        texture.texture = gl.createTexture();\n        gl.bindTexture(texture.target, texture.texture);\n\n        for (var i = 0; i < 32; ++i) {\n          if ((texture.mipmask & 1 << i) === 0) {\n            continue;\n          }\n\n          if (texture.target === GL_TEXTURE_2D$1) {\n            gl.texImage2D(GL_TEXTURE_2D$1, i, texture.internalformat, texture.width >> i, texture.height >> i, 0, texture.internalformat, texture.type, null);\n          } else {\n            for (var j = 0; j < 6; ++j) {\n              gl.texImage2D(GL_TEXTURE_CUBE_MAP_POSITIVE_X$1 + j, i, texture.internalformat, texture.width >> i, texture.height >> i, 0, texture.internalformat, texture.type, null);\n            }\n          }\n        }\n\n        setTexInfo(texture.texInfo, texture.target);\n      });\n    }\n\n    return {\n      create2D: createTexture2D,\n      createCube: createTextureCube,\n      clear: destroyTextures,\n      getTexture: function getTexture(wrapper) {\n        return null;\n      },\n      restore: restoreTextures\n    };\n  }\n\n  var GL_RENDERBUFFER = 0x8D41;\n  var GL_RGBA4$1 = 0x8056;\n  var GL_RGB5_A1$1 = 0x8057;\n  var GL_RGB565$1 = 0x8D62;\n  var GL_DEPTH_COMPONENT16 = 0x81A5;\n  var GL_STENCIL_INDEX8 = 0x8D48;\n  var GL_DEPTH_STENCIL$1 = 0x84F9;\n  var GL_SRGB8_ALPHA8_EXT = 0x8C43;\n  var GL_RGBA32F_EXT = 0x8814;\n  var GL_RGBA16F_EXT = 0x881A;\n  var GL_RGB16F_EXT = 0x881B;\n  var FORMAT_SIZES = [];\n  FORMAT_SIZES[GL_RGBA4$1] = 2;\n  FORMAT_SIZES[GL_RGB5_A1$1] = 2;\n  FORMAT_SIZES[GL_RGB565$1] = 2;\n  FORMAT_SIZES[GL_DEPTH_COMPONENT16] = 2;\n  FORMAT_SIZES[GL_STENCIL_INDEX8] = 1;\n  FORMAT_SIZES[GL_DEPTH_STENCIL$1] = 4;\n  FORMAT_SIZES[GL_SRGB8_ALPHA8_EXT] = 4;\n  FORMAT_SIZES[GL_RGBA32F_EXT] = 16;\n  FORMAT_SIZES[GL_RGBA16F_EXT] = 8;\n  FORMAT_SIZES[GL_RGB16F_EXT] = 6;\n\n  function getRenderbufferSize(format, width, height) {\n    return FORMAT_SIZES[format] * width * height;\n  }\n\n  var wrapRenderbuffers = function wrapRenderbuffers(gl, extensions, limits, stats, config) {\n    var formatTypes = {\n      'rgba4': GL_RGBA4$1,\n      'rgb565': GL_RGB565$1,\n      'rgb5 a1': GL_RGB5_A1$1,\n      'depth': GL_DEPTH_COMPONENT16,\n      'stencil': GL_STENCIL_INDEX8,\n      'depth stencil': GL_DEPTH_STENCIL$1\n    };\n\n    if (extensions.ext_srgb) {\n      formatTypes['srgba'] = GL_SRGB8_ALPHA8_EXT;\n    }\n\n    if (extensions.ext_color_buffer_half_float) {\n      formatTypes['rgba16f'] = GL_RGBA16F_EXT;\n      formatTypes['rgb16f'] = GL_RGB16F_EXT;\n    }\n\n    if (extensions.webgl_color_buffer_float) {\n      formatTypes['rgba32f'] = GL_RGBA32F_EXT;\n    }\n\n    var formatTypesInvert = [];\n    Object.keys(formatTypes).forEach(function (key) {\n      var val = formatTypes[key];\n      formatTypesInvert[val] = key;\n    });\n    var renderbufferCount = 0;\n    var renderbufferSet = {};\n\n    function REGLRenderbuffer(renderbuffer) {\n      this.id = renderbufferCount++;\n      this.refCount = 1;\n      this.renderbuffer = renderbuffer;\n      this.format = GL_RGBA4$1;\n      this.width = 0;\n      this.height = 0;\n\n      if (config.profile) {\n        this.stats = {\n          size: 0\n        };\n      }\n    }\n\n    REGLRenderbuffer.prototype.decRef = function () {\n      if (--this.refCount <= 0) {\n        destroy(this);\n      }\n    };\n\n    function destroy(rb) {\n      var handle = rb.renderbuffer;\n      check$1(handle, 'must not double destroy renderbuffer');\n      gl.bindRenderbuffer(GL_RENDERBUFFER, null);\n      gl.deleteRenderbuffer(handle);\n      rb.renderbuffer = null;\n      rb.refCount = 0;\n      delete renderbufferSet[rb.id];\n      stats.renderbufferCount--;\n    }\n\n    function createRenderbuffer(a, b) {\n      var renderbuffer = new REGLRenderbuffer(gl.createRenderbuffer());\n      renderbufferSet[renderbuffer.id] = renderbuffer;\n      stats.renderbufferCount++;\n\n      function reglRenderbuffer(a, b) {\n        var w = 0;\n        var h = 0;\n        var format = GL_RGBA4$1;\n\n        if (typeof a === 'object' && a) {\n          var options = a;\n\n          if ('shape' in options) {\n            var shape = options.shape;\n            check$1(Array.isArray(shape) && shape.length >= 2, 'invalid renderbuffer shape');\n            w = shape[0] | 0;\n            h = shape[1] | 0;\n          } else {\n            if ('radius' in options) {\n              w = h = options.radius | 0;\n            }\n\n            if ('width' in options) {\n              w = options.width | 0;\n            }\n\n            if ('height' in options) {\n              h = options.height | 0;\n            }\n          }\n\n          if ('format' in options) {\n            check$1.parameter(options.format, formatTypes, 'invalid renderbuffer format');\n            format = formatTypes[options.format];\n          }\n        } else if (typeof a === 'number') {\n          w = a | 0;\n\n          if (typeof b === 'number') {\n            h = b | 0;\n          } else {\n            h = w;\n          }\n        } else if (!a) {\n          w = h = 1;\n        } else {\n          check$1.raise('invalid arguments to renderbuffer constructor');\n        } // check shape\n\n\n        check$1(w > 0 && h > 0 && w <= limits.maxRenderbufferSize && h <= limits.maxRenderbufferSize, 'invalid renderbuffer size');\n\n        if (w === renderbuffer.width && h === renderbuffer.height && format === renderbuffer.format) {\n          return;\n        }\n\n        reglRenderbuffer.width = renderbuffer.width = w;\n        reglRenderbuffer.height = renderbuffer.height = h;\n        renderbuffer.format = format;\n        gl.bindRenderbuffer(GL_RENDERBUFFER, renderbuffer.renderbuffer);\n        gl.renderbufferStorage(GL_RENDERBUFFER, format, w, h);\n        check$1(gl.getError() === 0, 'invalid render buffer format');\n\n        if (config.profile) {\n          renderbuffer.stats.size = getRenderbufferSize(renderbuffer.format, renderbuffer.width, renderbuffer.height);\n        }\n\n        reglRenderbuffer.format = formatTypesInvert[renderbuffer.format];\n        return reglRenderbuffer;\n      }\n\n      function resize(w_, h_) {\n        var w = w_ | 0;\n        var h = h_ | 0 || w;\n\n        if (w === renderbuffer.width && h === renderbuffer.height) {\n          return reglRenderbuffer;\n        } // check shape\n\n\n        check$1(w > 0 && h > 0 && w <= limits.maxRenderbufferSize && h <= limits.maxRenderbufferSize, 'invalid renderbuffer size');\n        reglRenderbuffer.width = renderbuffer.width = w;\n        reglRenderbuffer.height = renderbuffer.height = h;\n        gl.bindRenderbuffer(GL_RENDERBUFFER, renderbuffer.renderbuffer);\n        gl.renderbufferStorage(GL_RENDERBUFFER, renderbuffer.format, w, h);\n        check$1(gl.getError() === 0, 'invalid render buffer format'); // also, recompute size.\n\n        if (config.profile) {\n          renderbuffer.stats.size = getRenderbufferSize(renderbuffer.format, renderbuffer.width, renderbuffer.height);\n        }\n\n        return reglRenderbuffer;\n      }\n\n      reglRenderbuffer(a, b);\n      reglRenderbuffer.resize = resize;\n      reglRenderbuffer._reglType = 'renderbuffer';\n      reglRenderbuffer._renderbuffer = renderbuffer;\n\n      if (config.profile) {\n        reglRenderbuffer.stats = renderbuffer.stats;\n      }\n\n      reglRenderbuffer.destroy = function () {\n        renderbuffer.decRef();\n      };\n\n      return reglRenderbuffer;\n    }\n\n    if (config.profile) {\n      stats.getTotalRenderbufferSize = function () {\n        var total = 0;\n        Object.keys(renderbufferSet).forEach(function (key) {\n          total += renderbufferSet[key].stats.size;\n        });\n        return total;\n      };\n    }\n\n    function restoreRenderbuffers() {\n      values(renderbufferSet).forEach(function (rb) {\n        rb.renderbuffer = gl.createRenderbuffer();\n        gl.bindRenderbuffer(GL_RENDERBUFFER, rb.renderbuffer);\n        gl.renderbufferStorage(GL_RENDERBUFFER, rb.format, rb.width, rb.height);\n      });\n      gl.bindRenderbuffer(GL_RENDERBUFFER, null);\n    }\n\n    return {\n      create: createRenderbuffer,\n      clear: function clear() {\n        values(renderbufferSet).forEach(destroy);\n      },\n      restore: restoreRenderbuffers\n    };\n  }; // We store these constants so that the minifier can inline them\n\n\n  var GL_FRAMEBUFFER$1 = 0x8D40;\n  var GL_RENDERBUFFER$1 = 0x8D41;\n  var GL_TEXTURE_2D$2 = 0x0DE1;\n  var GL_TEXTURE_CUBE_MAP_POSITIVE_X$2 = 0x8515;\n  var GL_COLOR_ATTACHMENT0$1 = 0x8CE0;\n  var GL_DEPTH_ATTACHMENT = 0x8D00;\n  var GL_STENCIL_ATTACHMENT = 0x8D20;\n  var GL_DEPTH_STENCIL_ATTACHMENT = 0x821A;\n  var GL_FRAMEBUFFER_COMPLETE$1 = 0x8CD5;\n  var GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT = 0x8CD6;\n  var GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT = 0x8CD7;\n  var GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS = 0x8CD9;\n  var GL_FRAMEBUFFER_UNSUPPORTED = 0x8CDD;\n  var GL_HALF_FLOAT_OES$2 = 0x8D61;\n  var GL_UNSIGNED_BYTE$6 = 0x1401;\n  var GL_FLOAT$5 = 0x1406;\n  var GL_RGB$1 = 0x1907;\n  var GL_RGBA$2 = 0x1908;\n  var GL_DEPTH_COMPONENT$1 = 0x1902;\n  var colorTextureFormatEnums = [GL_RGB$1, GL_RGBA$2]; // for every texture format, store\n  // the number of channels\n\n  var textureFormatChannels = [];\n  textureFormatChannels[GL_RGBA$2] = 4;\n  textureFormatChannels[GL_RGB$1] = 3; // for every texture type, store\n  // the size in bytes.\n\n  var textureTypeSizes = [];\n  textureTypeSizes[GL_UNSIGNED_BYTE$6] = 1;\n  textureTypeSizes[GL_FLOAT$5] = 4;\n  textureTypeSizes[GL_HALF_FLOAT_OES$2] = 2;\n  var GL_RGBA4$2 = 0x8056;\n  var GL_RGB5_A1$2 = 0x8057;\n  var GL_RGB565$2 = 0x8D62;\n  var GL_DEPTH_COMPONENT16$1 = 0x81A5;\n  var GL_STENCIL_INDEX8$1 = 0x8D48;\n  var GL_DEPTH_STENCIL$2 = 0x84F9;\n  var GL_SRGB8_ALPHA8_EXT$1 = 0x8C43;\n  var GL_RGBA32F_EXT$1 = 0x8814;\n  var GL_RGBA16F_EXT$1 = 0x881A;\n  var GL_RGB16F_EXT$1 = 0x881B;\n  var colorRenderbufferFormatEnums = [GL_RGBA4$2, GL_RGB5_A1$2, GL_RGB565$2, GL_SRGB8_ALPHA8_EXT$1, GL_RGBA16F_EXT$1, GL_RGB16F_EXT$1, GL_RGBA32F_EXT$1];\n  var statusCode = {};\n  statusCode[GL_FRAMEBUFFER_COMPLETE$1] = 'complete';\n  statusCode[GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT] = 'incomplete attachment';\n  statusCode[GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS] = 'incomplete dimensions';\n  statusCode[GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT] = 'incomplete, missing attachment';\n  statusCode[GL_FRAMEBUFFER_UNSUPPORTED] = 'unsupported';\n\n  function wrapFBOState(gl, extensions, limits, textureState, renderbufferState, stats) {\n    var framebufferState = {\n      cur: null,\n      next: null,\n      dirty: false,\n      setFBO: null\n    };\n    var colorTextureFormats = ['rgba'];\n    var colorRenderbufferFormats = ['rgba4', 'rgb565', 'rgb5 a1'];\n\n    if (extensions.ext_srgb) {\n      colorRenderbufferFormats.push('srgba');\n    }\n\n    if (extensions.ext_color_buffer_half_float) {\n      colorRenderbufferFormats.push('rgba16f', 'rgb16f');\n    }\n\n    if (extensions.webgl_color_buffer_float) {\n      colorRenderbufferFormats.push('rgba32f');\n    }\n\n    var colorTypes = ['uint8'];\n\n    if (extensions.oes_texture_half_float) {\n      colorTypes.push('half float', 'float16');\n    }\n\n    if (extensions.oes_texture_float) {\n      colorTypes.push('float', 'float32');\n    }\n\n    function FramebufferAttachment(target, texture, renderbuffer) {\n      this.target = target;\n      this.texture = texture;\n      this.renderbuffer = renderbuffer;\n      var w = 0;\n      var h = 0;\n\n      if (texture) {\n        w = texture.width;\n        h = texture.height;\n      } else if (renderbuffer) {\n        w = renderbuffer.width;\n        h = renderbuffer.height;\n      }\n\n      this.width = w;\n      this.height = h;\n    }\n\n    function decRef(attachment) {\n      if (attachment) {\n        if (attachment.texture) {\n          attachment.texture._texture.decRef();\n        }\n\n        if (attachment.renderbuffer) {\n          attachment.renderbuffer._renderbuffer.decRef();\n        }\n      }\n    }\n\n    function incRefAndCheckShape(attachment, width, height) {\n      if (!attachment) {\n        return;\n      }\n\n      if (attachment.texture) {\n        var texture = attachment.texture._texture;\n        var tw = Math.max(1, texture.width);\n        var th = Math.max(1, texture.height);\n        check$1(tw === width && th === height, 'inconsistent width/height for supplied texture');\n        texture.refCount += 1;\n      } else {\n        var renderbuffer = attachment.renderbuffer._renderbuffer;\n        check$1(renderbuffer.width === width && renderbuffer.height === height, 'inconsistent width/height for renderbuffer');\n        renderbuffer.refCount += 1;\n      }\n    }\n\n    function attach(location, attachment) {\n      if (attachment) {\n        if (attachment.texture) {\n          gl.framebufferTexture2D(GL_FRAMEBUFFER$1, location, attachment.target, attachment.texture._texture.texture, 0);\n        } else {\n          gl.framebufferRenderbuffer(GL_FRAMEBUFFER$1, location, GL_RENDERBUFFER$1, attachment.renderbuffer._renderbuffer.renderbuffer);\n        }\n      }\n    }\n\n    function parseAttachment(attachment) {\n      var target = GL_TEXTURE_2D$2;\n      var texture = null;\n      var renderbuffer = null;\n      var data = attachment;\n\n      if (typeof attachment === 'object') {\n        data = attachment.data;\n\n        if ('target' in attachment) {\n          target = attachment.target | 0;\n        }\n      }\n\n      check$1.type(data, 'function', 'invalid attachment data');\n      var type = data._reglType;\n\n      if (type === 'texture2d') {\n        texture = data;\n        check$1(target === GL_TEXTURE_2D$2);\n      } else if (type === 'textureCube') {\n        texture = data;\n        check$1(target >= GL_TEXTURE_CUBE_MAP_POSITIVE_X$2 && target < GL_TEXTURE_CUBE_MAP_POSITIVE_X$2 + 6, 'invalid cube map target');\n      } else if (type === 'renderbuffer') {\n        renderbuffer = data;\n        target = GL_RENDERBUFFER$1;\n      } else {\n        check$1.raise('invalid regl object for attachment');\n      }\n\n      return new FramebufferAttachment(target, texture, renderbuffer);\n    }\n\n    function allocAttachment(width, height, isTexture, format, type) {\n      if (isTexture) {\n        var texture = textureState.create2D({\n          width: width,\n          height: height,\n          format: format,\n          type: type\n        });\n        texture._texture.refCount = 0;\n        return new FramebufferAttachment(GL_TEXTURE_2D$2, texture, null);\n      } else {\n        var rb = renderbufferState.create({\n          width: width,\n          height: height,\n          format: format\n        });\n        rb._renderbuffer.refCount = 0;\n        return new FramebufferAttachment(GL_RENDERBUFFER$1, null, rb);\n      }\n    }\n\n    function unwrapAttachment(attachment) {\n      return attachment && (attachment.texture || attachment.renderbuffer);\n    }\n\n    function resizeAttachment(attachment, w, h) {\n      if (attachment) {\n        if (attachment.texture) {\n          attachment.texture.resize(w, h);\n        } else if (attachment.renderbuffer) {\n          attachment.renderbuffer.resize(w, h);\n        }\n\n        attachment.width = w;\n        attachment.height = h;\n      }\n    }\n\n    var framebufferCount = 0;\n    var framebufferSet = {};\n\n    function REGLFramebuffer() {\n      this.id = framebufferCount++;\n      framebufferSet[this.id] = this;\n      this.framebuffer = gl.createFramebuffer();\n      this.width = 0;\n      this.height = 0;\n      this.colorAttachments = [];\n      this.depthAttachment = null;\n      this.stencilAttachment = null;\n      this.depthStencilAttachment = null;\n    }\n\n    function decFBORefs(framebuffer) {\n      framebuffer.colorAttachments.forEach(decRef);\n      decRef(framebuffer.depthAttachment);\n      decRef(framebuffer.stencilAttachment);\n      decRef(framebuffer.depthStencilAttachment);\n    }\n\n    function _destroy(framebuffer) {\n      var handle = framebuffer.framebuffer;\n      check$1(handle, 'must not double destroy framebuffer');\n      gl.deleteFramebuffer(handle);\n      framebuffer.framebuffer = null;\n      stats.framebufferCount--;\n      delete framebufferSet[framebuffer.id];\n    }\n\n    function updateFramebuffer(framebuffer) {\n      var i;\n      gl.bindFramebuffer(GL_FRAMEBUFFER$1, framebuffer.framebuffer);\n      var colorAttachments = framebuffer.colorAttachments;\n\n      for (i = 0; i < colorAttachments.length; ++i) {\n        attach(GL_COLOR_ATTACHMENT0$1 + i, colorAttachments[i]);\n      }\n\n      for (i = colorAttachments.length; i < limits.maxColorAttachments; ++i) {\n        gl.framebufferTexture2D(GL_FRAMEBUFFER$1, GL_COLOR_ATTACHMENT0$1 + i, GL_TEXTURE_2D$2, null, 0);\n      }\n\n      gl.framebufferTexture2D(GL_FRAMEBUFFER$1, GL_DEPTH_STENCIL_ATTACHMENT, GL_TEXTURE_2D$2, null, 0);\n      gl.framebufferTexture2D(GL_FRAMEBUFFER$1, GL_DEPTH_ATTACHMENT, GL_TEXTURE_2D$2, null, 0);\n      gl.framebufferTexture2D(GL_FRAMEBUFFER$1, GL_STENCIL_ATTACHMENT, GL_TEXTURE_2D$2, null, 0);\n      attach(GL_DEPTH_ATTACHMENT, framebuffer.depthAttachment);\n      attach(GL_STENCIL_ATTACHMENT, framebuffer.stencilAttachment);\n      attach(GL_DEPTH_STENCIL_ATTACHMENT, framebuffer.depthStencilAttachment); // Check status code\n\n      var status = gl.checkFramebufferStatus(GL_FRAMEBUFFER$1);\n\n      if (!gl.isContextLost() && status !== GL_FRAMEBUFFER_COMPLETE$1) {\n        check$1.raise('framebuffer configuration not supported, status = ' + statusCode[status]);\n      }\n\n      gl.bindFramebuffer(GL_FRAMEBUFFER$1, framebufferState.next ? framebufferState.next.framebuffer : null);\n      framebufferState.cur = framebufferState.next; // FIXME: Clear error code here.  This is a work around for a bug in\n      // headless-gl\n\n      gl.getError();\n    }\n\n    function createFBO(a0, a1) {\n      var framebuffer = new REGLFramebuffer();\n      stats.framebufferCount++;\n\n      function reglFramebuffer(a, b) {\n        var i;\n        check$1(framebufferState.next !== framebuffer, 'can not update framebuffer which is currently in use');\n        var width = 0;\n        var height = 0;\n        var needsDepth = true;\n        var needsStencil = true;\n        var colorBuffer = null;\n        var colorTexture = true;\n        var colorFormat = 'rgba';\n        var colorType = 'uint8';\n        var colorCount = 1;\n        var depthBuffer = null;\n        var stencilBuffer = null;\n        var depthStencilBuffer = null;\n        var depthStencilTexture = false;\n\n        if (typeof a === 'number') {\n          width = a | 0;\n          height = b | 0 || width;\n        } else if (!a) {\n          width = height = 1;\n        } else {\n          check$1.type(a, 'object', 'invalid arguments for framebuffer');\n          var options = a;\n\n          if ('shape' in options) {\n            var shape = options.shape;\n            check$1(Array.isArray(shape) && shape.length >= 2, 'invalid shape for framebuffer');\n            width = shape[0];\n            height = shape[1];\n          } else {\n            if ('radius' in options) {\n              width = height = options.radius;\n            }\n\n            if ('width' in options) {\n              width = options.width;\n            }\n\n            if ('height' in options) {\n              height = options.height;\n            }\n          }\n\n          if ('color' in options || 'colors' in options) {\n            colorBuffer = options.color || options.colors;\n\n            if (Array.isArray(colorBuffer)) {\n              check$1(colorBuffer.length === 1 || extensions.webgl_draw_buffers, 'multiple render targets not supported');\n            }\n          }\n\n          if (!colorBuffer) {\n            if ('colorCount' in options) {\n              colorCount = options.colorCount | 0;\n              check$1(colorCount > 0, 'invalid color buffer count');\n            }\n\n            if ('colorTexture' in options) {\n              colorTexture = !!options.colorTexture;\n              colorFormat = 'rgba4';\n            }\n\n            if ('colorType' in options) {\n              colorType = options.colorType;\n\n              if (!colorTexture) {\n                if (colorType === 'half float' || colorType === 'float16') {\n                  check$1(extensions.ext_color_buffer_half_float, 'you must enable EXT_color_buffer_half_float to use 16-bit render buffers');\n                  colorFormat = 'rgba16f';\n                } else if (colorType === 'float' || colorType === 'float32') {\n                  check$1(extensions.webgl_color_buffer_float, 'you must enable WEBGL_color_buffer_float in order to use 32-bit floating point renderbuffers');\n                  colorFormat = 'rgba32f';\n                }\n              } else {\n                check$1(extensions.oes_texture_float || !(colorType === 'float' || colorType === 'float32'), 'you must enable OES_texture_float in order to use floating point framebuffer objects');\n                check$1(extensions.oes_texture_half_float || !(colorType === 'half float' || colorType === 'float16'), 'you must enable OES_texture_half_float in order to use 16-bit floating point framebuffer objects');\n              }\n\n              check$1.oneOf(colorType, colorTypes, 'invalid color type');\n            }\n\n            if ('colorFormat' in options) {\n              colorFormat = options.colorFormat;\n\n              if (colorTextureFormats.indexOf(colorFormat) >= 0) {\n                colorTexture = true;\n              } else if (colorRenderbufferFormats.indexOf(colorFormat) >= 0) {\n                colorTexture = false;\n              } else {\n                if (colorTexture) {\n                  check$1.oneOf(options.colorFormat, colorTextureFormats, 'invalid color format for texture');\n                } else {\n                  check$1.oneOf(options.colorFormat, colorRenderbufferFormats, 'invalid color format for renderbuffer');\n                }\n              }\n            }\n          }\n\n          if ('depthTexture' in options || 'depthStencilTexture' in options) {\n            depthStencilTexture = !!(options.depthTexture || options.depthStencilTexture);\n            check$1(!depthStencilTexture || extensions.webgl_depth_texture, 'webgl_depth_texture extension not supported');\n          }\n\n          if ('depth' in options) {\n            if (typeof options.depth === 'boolean') {\n              needsDepth = options.depth;\n            } else {\n              depthBuffer = options.depth;\n              needsStencil = false;\n            }\n          }\n\n          if ('stencil' in options) {\n            if (typeof options.stencil === 'boolean') {\n              needsStencil = options.stencil;\n            } else {\n              stencilBuffer = options.stencil;\n              needsDepth = false;\n            }\n          }\n\n          if ('depthStencil' in options) {\n            if (typeof options.depthStencil === 'boolean') {\n              needsDepth = needsStencil = options.depthStencil;\n            } else {\n              depthStencilBuffer = options.depthStencil;\n              needsDepth = false;\n              needsStencil = false;\n            }\n          }\n        } // parse attachments\n\n\n        var colorAttachments = null;\n        var depthAttachment = null;\n        var stencilAttachment = null;\n        var depthStencilAttachment = null; // Set up color attachments\n\n        if (Array.isArray(colorBuffer)) {\n          colorAttachments = colorBuffer.map(parseAttachment);\n        } else if (colorBuffer) {\n          colorAttachments = [parseAttachment(colorBuffer)];\n        } else {\n          colorAttachments = new Array(colorCount);\n\n          for (i = 0; i < colorCount; ++i) {\n            colorAttachments[i] = allocAttachment(width, height, colorTexture, colorFormat, colorType);\n          }\n        }\n\n        check$1(extensions.webgl_draw_buffers || colorAttachments.length <= 1, 'you must enable the WEBGL_draw_buffers extension in order to use multiple color buffers.');\n        check$1(colorAttachments.length <= limits.maxColorAttachments, 'too many color attachments, not supported');\n        width = width || colorAttachments[0].width;\n        height = height || colorAttachments[0].height;\n\n        if (depthBuffer) {\n          depthAttachment = parseAttachment(depthBuffer);\n        } else if (needsDepth && !needsStencil) {\n          depthAttachment = allocAttachment(width, height, depthStencilTexture, 'depth', 'uint32');\n        }\n\n        if (stencilBuffer) {\n          stencilAttachment = parseAttachment(stencilBuffer);\n        } else if (needsStencil && !needsDepth) {\n          stencilAttachment = allocAttachment(width, height, false, 'stencil', 'uint8');\n        }\n\n        if (depthStencilBuffer) {\n          depthStencilAttachment = parseAttachment(depthStencilBuffer);\n        } else if (!depthBuffer && !stencilBuffer && needsStencil && needsDepth) {\n          depthStencilAttachment = allocAttachment(width, height, depthStencilTexture, 'depth stencil', 'depth stencil');\n        }\n\n        check$1(!!depthBuffer + !!stencilBuffer + !!depthStencilBuffer <= 1, 'invalid framebuffer configuration, can specify exactly one depth/stencil attachment');\n        var commonColorAttachmentSize = null;\n\n        for (i = 0; i < colorAttachments.length; ++i) {\n          incRefAndCheckShape(colorAttachments[i], width, height);\n          check$1(!colorAttachments[i] || colorAttachments[i].texture && colorTextureFormatEnums.indexOf(colorAttachments[i].texture._texture.format) >= 0 || colorAttachments[i].renderbuffer && colorRenderbufferFormatEnums.indexOf(colorAttachments[i].renderbuffer._renderbuffer.format) >= 0, 'framebuffer color attachment ' + i + ' is invalid');\n\n          if (colorAttachments[i] && colorAttachments[i].texture) {\n            var colorAttachmentSize = textureFormatChannels[colorAttachments[i].texture._texture.format] * textureTypeSizes[colorAttachments[i].texture._texture.type];\n\n            if (commonColorAttachmentSize === null) {\n              commonColorAttachmentSize = colorAttachmentSize;\n            } else {\n              // We need to make sure that all color attachments have the same number of bitplanes\n              // (that is, the same numer of bits per pixel)\n              // This is required by the GLES2.0 standard. See the beginning of Chapter 4 in that document.\n              check$1(commonColorAttachmentSize === colorAttachmentSize, 'all color attachments much have the same number of bits per pixel.');\n            }\n          }\n        }\n\n        incRefAndCheckShape(depthAttachment, width, height);\n        check$1(!depthAttachment || depthAttachment.texture && depthAttachment.texture._texture.format === GL_DEPTH_COMPONENT$1 || depthAttachment.renderbuffer && depthAttachment.renderbuffer._renderbuffer.format === GL_DEPTH_COMPONENT16$1, 'invalid depth attachment for framebuffer object');\n        incRefAndCheckShape(stencilAttachment, width, height);\n        check$1(!stencilAttachment || stencilAttachment.renderbuffer && stencilAttachment.renderbuffer._renderbuffer.format === GL_STENCIL_INDEX8$1, 'invalid stencil attachment for framebuffer object');\n        incRefAndCheckShape(depthStencilAttachment, width, height);\n        check$1(!depthStencilAttachment || depthStencilAttachment.texture && depthStencilAttachment.texture._texture.format === GL_DEPTH_STENCIL$2 || depthStencilAttachment.renderbuffer && depthStencilAttachment.renderbuffer._renderbuffer.format === GL_DEPTH_STENCIL$2, 'invalid depth-stencil attachment for framebuffer object'); // decrement references\n\n        decFBORefs(framebuffer);\n        framebuffer.width = width;\n        framebuffer.height = height;\n        framebuffer.colorAttachments = colorAttachments;\n        framebuffer.depthAttachment = depthAttachment;\n        framebuffer.stencilAttachment = stencilAttachment;\n        framebuffer.depthStencilAttachment = depthStencilAttachment;\n        reglFramebuffer.color = colorAttachments.map(unwrapAttachment);\n        reglFramebuffer.depth = unwrapAttachment(depthAttachment);\n        reglFramebuffer.stencil = unwrapAttachment(stencilAttachment);\n        reglFramebuffer.depthStencil = unwrapAttachment(depthStencilAttachment);\n        reglFramebuffer.width = framebuffer.width;\n        reglFramebuffer.height = framebuffer.height;\n        updateFramebuffer(framebuffer);\n        return reglFramebuffer;\n      }\n\n      function resize(w_, h_) {\n        check$1(framebufferState.next !== framebuffer, 'can not resize a framebuffer which is currently in use');\n        var w = Math.max(w_ | 0, 1);\n        var h = Math.max(h_ | 0 || w, 1);\n\n        if (w === framebuffer.width && h === framebuffer.height) {\n          return reglFramebuffer;\n        } // resize all buffers\n\n\n        var colorAttachments = framebuffer.colorAttachments;\n\n        for (var i = 0; i < colorAttachments.length; ++i) {\n          resizeAttachment(colorAttachments[i], w, h);\n        }\n\n        resizeAttachment(framebuffer.depthAttachment, w, h);\n        resizeAttachment(framebuffer.stencilAttachment, w, h);\n        resizeAttachment(framebuffer.depthStencilAttachment, w, h);\n        framebuffer.width = reglFramebuffer.width = w;\n        framebuffer.height = reglFramebuffer.height = h;\n        updateFramebuffer(framebuffer);\n        return reglFramebuffer;\n      }\n\n      reglFramebuffer(a0, a1);\n      return extend(reglFramebuffer, {\n        resize: resize,\n        _reglType: 'framebuffer',\n        _framebuffer: framebuffer,\n        destroy: function destroy() {\n          _destroy(framebuffer);\n\n          decFBORefs(framebuffer);\n        },\n        use: function use(block) {\n          framebufferState.setFBO({\n            framebuffer: reglFramebuffer\n          }, block);\n        }\n      });\n    }\n\n    function createCubeFBO(options) {\n      var faces = Array(6);\n\n      function reglFramebufferCube(a) {\n        var i;\n        check$1(faces.indexOf(framebufferState.next) < 0, 'can not update framebuffer which is currently in use');\n        var params = {\n          color: null\n        };\n        var radius = 0;\n        var colorBuffer = null;\n        var colorFormat = 'rgba';\n        var colorType = 'uint8';\n        var colorCount = 1;\n\n        if (typeof a === 'number') {\n          radius = a | 0;\n        } else if (!a) {\n          radius = 1;\n        } else {\n          check$1.type(a, 'object', 'invalid arguments for framebuffer');\n          var options = a;\n\n          if ('shape' in options) {\n            var shape = options.shape;\n            check$1(Array.isArray(shape) && shape.length >= 2, 'invalid shape for framebuffer');\n            check$1(shape[0] === shape[1], 'cube framebuffer must be square');\n            radius = shape[0];\n          } else {\n            if ('radius' in options) {\n              radius = options.radius | 0;\n            }\n\n            if ('width' in options) {\n              radius = options.width | 0;\n\n              if ('height' in options) {\n                check$1(options.height === radius, 'must be square');\n              }\n            } else if ('height' in options) {\n              radius = options.height | 0;\n            }\n          }\n\n          if ('color' in options || 'colors' in options) {\n            colorBuffer = options.color || options.colors;\n\n            if (Array.isArray(colorBuffer)) {\n              check$1(colorBuffer.length === 1 || extensions.webgl_draw_buffers, 'multiple render targets not supported');\n            }\n          }\n\n          if (!colorBuffer) {\n            if ('colorCount' in options) {\n              colorCount = options.colorCount | 0;\n              check$1(colorCount > 0, 'invalid color buffer count');\n            }\n\n            if ('colorType' in options) {\n              check$1.oneOf(options.colorType, colorTypes, 'invalid color type');\n              colorType = options.colorType;\n            }\n\n            if ('colorFormat' in options) {\n              colorFormat = options.colorFormat;\n              check$1.oneOf(options.colorFormat, colorTextureFormats, 'invalid color format for texture');\n            }\n          }\n\n          if ('depth' in options) {\n            params.depth = options.depth;\n          }\n\n          if ('stencil' in options) {\n            params.stencil = options.stencil;\n          }\n\n          if ('depthStencil' in options) {\n            params.depthStencil = options.depthStencil;\n          }\n        }\n\n        var colorCubes;\n\n        if (colorBuffer) {\n          if (Array.isArray(colorBuffer)) {\n            colorCubes = [];\n\n            for (i = 0; i < colorBuffer.length; ++i) {\n              colorCubes[i] = colorBuffer[i];\n            }\n          } else {\n            colorCubes = [colorBuffer];\n          }\n        } else {\n          colorCubes = Array(colorCount);\n          var cubeMapParams = {\n            radius: radius,\n            format: colorFormat,\n            type: colorType\n          };\n\n          for (i = 0; i < colorCount; ++i) {\n            colorCubes[i] = textureState.createCube(cubeMapParams);\n          }\n        } // Check color cubes\n\n\n        params.color = Array(colorCubes.length);\n\n        for (i = 0; i < colorCubes.length; ++i) {\n          var cube = colorCubes[i];\n          check$1(typeof cube === 'function' && cube._reglType === 'textureCube', 'invalid cube map');\n          radius = radius || cube.width;\n          check$1(cube.width === radius && cube.height === radius, 'invalid cube map shape');\n          params.color[i] = {\n            target: GL_TEXTURE_CUBE_MAP_POSITIVE_X$2,\n            data: colorCubes[i]\n          };\n        }\n\n        for (i = 0; i < 6; ++i) {\n          for (var j = 0; j < colorCubes.length; ++j) {\n            params.color[j].target = GL_TEXTURE_CUBE_MAP_POSITIVE_X$2 + i;\n          } // reuse depth-stencil attachments across all cube maps\n\n\n          if (i > 0) {\n            params.depth = faces[0].depth;\n            params.stencil = faces[0].stencil;\n            params.depthStencil = faces[0].depthStencil;\n          }\n\n          if (faces[i]) {\n            faces[i](params);\n          } else {\n            faces[i] = createFBO(params);\n          }\n        }\n\n        return extend(reglFramebufferCube, {\n          width: radius,\n          height: radius,\n          color: colorCubes\n        });\n      }\n\n      function resize(radius_) {\n        var i;\n        var radius = radius_ | 0;\n        check$1(radius > 0 && radius <= limits.maxCubeMapSize, 'invalid radius for cube fbo');\n\n        if (radius === reglFramebufferCube.width) {\n          return reglFramebufferCube;\n        }\n\n        var colors = reglFramebufferCube.color;\n\n        for (i = 0; i < colors.length; ++i) {\n          colors[i].resize(radius);\n        }\n\n        for (i = 0; i < 6; ++i) {\n          faces[i].resize(radius);\n        }\n\n        reglFramebufferCube.width = reglFramebufferCube.height = radius;\n        return reglFramebufferCube;\n      }\n\n      reglFramebufferCube(options);\n      return extend(reglFramebufferCube, {\n        faces: faces,\n        resize: resize,\n        _reglType: 'framebufferCube',\n        destroy: function destroy() {\n          faces.forEach(function (f) {\n            f.destroy();\n          });\n        }\n      });\n    }\n\n    function restoreFramebuffers() {\n      framebufferState.cur = null;\n      framebufferState.next = null;\n      framebufferState.dirty = true;\n      values(framebufferSet).forEach(function (fb) {\n        fb.framebuffer = gl.createFramebuffer();\n        updateFramebuffer(fb);\n      });\n    }\n\n    return extend(framebufferState, {\n      getFramebuffer: function getFramebuffer(object) {\n        if (typeof object === 'function' && object._reglType === 'framebuffer') {\n          var fbo = object._framebuffer;\n\n          if (fbo instanceof REGLFramebuffer) {\n            return fbo;\n          }\n        }\n\n        return null;\n      },\n      create: createFBO,\n      createCube: createCubeFBO,\n      clear: function clear() {\n        values(framebufferSet).forEach(_destroy);\n      },\n      restore: restoreFramebuffers\n    });\n  }\n\n  var GL_FLOAT$6 = 5126;\n\n  function AttributeRecord() {\n    this.state = 0;\n    this.x = 0.0;\n    this.y = 0.0;\n    this.z = 0.0;\n    this.w = 0.0;\n    this.buffer = null;\n    this.size = 0;\n    this.normalized = false;\n    this.type = GL_FLOAT$6;\n    this.offset = 0;\n    this.stride = 0;\n    this.divisor = 0;\n  }\n\n  function wrapAttributeState(gl, extensions, limits, stringStore) {\n    var NUM_ATTRIBUTES = limits.maxAttributes;\n    var attributeBindings = new Array(NUM_ATTRIBUTES);\n\n    for (var i = 0; i < NUM_ATTRIBUTES; ++i) {\n      attributeBindings[i] = new AttributeRecord();\n    }\n\n    return {\n      Record: AttributeRecord,\n      scope: {},\n      state: attributeBindings\n    };\n  }\n\n  var GL_FRAGMENT_SHADER = 35632;\n  var GL_VERTEX_SHADER = 35633;\n  var GL_ACTIVE_UNIFORMS = 0x8B86;\n  var GL_ACTIVE_ATTRIBUTES = 0x8B89;\n\n  function wrapShaderState(gl, stringStore, stats, config) {\n    // ===================================================\n    // glsl compilation and linking\n    // ===================================================\n    var fragShaders = {};\n    var vertShaders = {};\n\n    function ActiveInfo(name, id, location, info) {\n      this.name = name;\n      this.id = id;\n      this.location = location;\n      this.info = info;\n    }\n\n    function insertActiveInfo(list, info) {\n      for (var i = 0; i < list.length; ++i) {\n        if (list[i].id === info.id) {\n          list[i].location = info.location;\n          return;\n        }\n      }\n\n      list.push(info);\n    }\n\n    function getShader(type, id, command) {\n      var cache = type === GL_FRAGMENT_SHADER ? fragShaders : vertShaders;\n      var shader = cache[id];\n\n      if (!shader) {\n        var source = stringStore.str(id);\n        shader = gl.createShader(type);\n        gl.shaderSource(shader, source);\n        gl.compileShader(shader);\n        check$1.shaderError(gl, shader, source, type, command);\n        cache[id] = shader;\n      }\n\n      return shader;\n    } // ===================================================\n    // program linking\n    // ===================================================\n\n\n    var programCache = {};\n    var programList = [];\n    var PROGRAM_COUNTER = 0;\n\n    function REGLProgram(fragId, vertId) {\n      this.id = PROGRAM_COUNTER++;\n      this.fragId = fragId;\n      this.vertId = vertId;\n      this.program = null;\n      this.uniforms = [];\n      this.attributes = [];\n\n      if (config.profile) {\n        this.stats = {\n          uniformsCount: 0,\n          attributesCount: 0\n        };\n      }\n    }\n\n    function linkProgram(desc, command) {\n      var i, info; // -------------------------------\n      // compile & link\n      // -------------------------------\n\n      var fragShader = getShader(GL_FRAGMENT_SHADER, desc.fragId);\n      var vertShader = getShader(GL_VERTEX_SHADER, desc.vertId);\n      var program = desc.program = gl.createProgram();\n      gl.attachShader(program, fragShader);\n      gl.attachShader(program, vertShader);\n      gl.linkProgram(program);\n      check$1.linkError(gl, program, stringStore.str(desc.fragId), stringStore.str(desc.vertId), command); // -------------------------------\n      // grab uniforms\n      // -------------------------------\n\n      var numUniforms = gl.getProgramParameter(program, GL_ACTIVE_UNIFORMS);\n\n      if (config.profile) {\n        desc.stats.uniformsCount = numUniforms;\n      }\n\n      var uniforms = desc.uniforms;\n\n      for (i = 0; i < numUniforms; ++i) {\n        info = gl.getActiveUniform(program, i);\n\n        if (info) {\n          if (info.size > 1) {\n            for (var j = 0; j < info.size; ++j) {\n              var name = info.name.replace('[0]', '[' + j + ']');\n              insertActiveInfo(uniforms, new ActiveInfo(name, stringStore.id(name), gl.getUniformLocation(program, name), info));\n            }\n          } else {\n            insertActiveInfo(uniforms, new ActiveInfo(info.name, stringStore.id(info.name), gl.getUniformLocation(program, info.name), info));\n          }\n        }\n      } // -------------------------------\n      // grab attributes\n      // -------------------------------\n\n\n      var numAttributes = gl.getProgramParameter(program, GL_ACTIVE_ATTRIBUTES);\n\n      if (config.profile) {\n        desc.stats.attributesCount = numAttributes;\n      }\n\n      var attributes = desc.attributes;\n\n      for (i = 0; i < numAttributes; ++i) {\n        info = gl.getActiveAttrib(program, i);\n\n        if (info) {\n          insertActiveInfo(attributes, new ActiveInfo(info.name, stringStore.id(info.name), gl.getAttribLocation(program, info.name), info));\n        }\n      }\n    }\n\n    if (config.profile) {\n      stats.getMaxUniformsCount = function () {\n        var m = 0;\n        programList.forEach(function (desc) {\n          if (desc.stats.uniformsCount > m) {\n            m = desc.stats.uniformsCount;\n          }\n        });\n        return m;\n      };\n\n      stats.getMaxAttributesCount = function () {\n        var m = 0;\n        programList.forEach(function (desc) {\n          if (desc.stats.attributesCount > m) {\n            m = desc.stats.attributesCount;\n          }\n        });\n        return m;\n      };\n    }\n\n    function restoreShaders() {\n      fragShaders = {};\n      vertShaders = {};\n\n      for (var i = 0; i < programList.length; ++i) {\n        linkProgram(programList[i]);\n      }\n    }\n\n    return {\n      clear: function clear() {\n        var deleteShader = gl.deleteShader.bind(gl);\n        values(fragShaders).forEach(deleteShader);\n        fragShaders = {};\n        values(vertShaders).forEach(deleteShader);\n        vertShaders = {};\n        programList.forEach(function (desc) {\n          gl.deleteProgram(desc.program);\n        });\n        programList.length = 0;\n        programCache = {};\n        stats.shaderCount = 0;\n      },\n      program: function program(vertId, fragId, command) {\n        check$1.command(vertId >= 0, 'missing vertex shader', command);\n        check$1.command(fragId >= 0, 'missing fragment shader', command);\n        var cache = programCache[fragId];\n\n        if (!cache) {\n          cache = programCache[fragId] = {};\n        }\n\n        var program = cache[vertId];\n\n        if (!program) {\n          program = new REGLProgram(fragId, vertId);\n          stats.shaderCount++;\n          linkProgram(program, command);\n          cache[vertId] = program;\n          programList.push(program);\n        }\n\n        return program;\n      },\n      restore: restoreShaders,\n      shader: getShader,\n      frag: -1,\n      vert: -1\n    };\n  }\n\n  var GL_RGBA$3 = 6408;\n  var GL_UNSIGNED_BYTE$7 = 5121;\n  var GL_PACK_ALIGNMENT = 0x0D05;\n  var GL_FLOAT$7 = 0x1406; // 5126\n\n  function wrapReadPixels(gl, framebufferState, reglPoll, context, glAttributes, extensions, limits) {\n    function readPixelsImpl(input) {\n      var type;\n\n      if (framebufferState.next === null) {\n        check$1(glAttributes.preserveDrawingBuffer, 'you must create a webgl context with \"preserveDrawingBuffer\":true in order to read pixels from the drawing buffer');\n        type = GL_UNSIGNED_BYTE$7;\n      } else {\n        check$1(framebufferState.next.colorAttachments[0].texture !== null, 'You cannot read from a renderbuffer');\n        type = framebufferState.next.colorAttachments[0].texture._texture.type;\n\n        if (extensions.oes_texture_float) {\n          check$1(type === GL_UNSIGNED_BYTE$7 || type === GL_FLOAT$7, 'Reading from a framebuffer is only allowed for the types \\'uint8\\' and \\'float\\'');\n\n          if (type === GL_FLOAT$7) {\n            check$1(limits.readFloat, 'Reading \\'float\\' values is not permitted in your browser. For a fallback, please see: https://www.npmjs.com/package/glsl-read-float');\n          }\n        } else {\n          check$1(type === GL_UNSIGNED_BYTE$7, 'Reading from a framebuffer is only allowed for the type \\'uint8\\'');\n        }\n      }\n\n      var x = 0;\n      var y = 0;\n      var width = context.framebufferWidth;\n      var height = context.framebufferHeight;\n      var data = null;\n\n      if (isTypedArray(input)) {\n        data = input;\n      } else if (input) {\n        check$1.type(input, 'object', 'invalid arguments to regl.read()');\n        x = input.x | 0;\n        y = input.y | 0;\n        check$1(x >= 0 && x < context.framebufferWidth, 'invalid x offset for regl.read');\n        check$1(y >= 0 && y < context.framebufferHeight, 'invalid y offset for regl.read');\n        width = (input.width || context.framebufferWidth - x) | 0;\n        height = (input.height || context.framebufferHeight - y) | 0;\n        data = input.data || null;\n      } // sanity check input.data\n\n\n      if (data) {\n        if (type === GL_UNSIGNED_BYTE$7) {\n          check$1(data instanceof Uint8Array, 'buffer must be \\'Uint8Array\\' when reading from a framebuffer of type \\'uint8\\'');\n        } else if (type === GL_FLOAT$7) {\n          check$1(data instanceof Float32Array, 'buffer must be \\'Float32Array\\' when reading from a framebuffer of type \\'float\\'');\n        }\n      }\n\n      check$1(width > 0 && width + x <= context.framebufferWidth, 'invalid width for read pixels');\n      check$1(height > 0 && height + y <= context.framebufferHeight, 'invalid height for read pixels'); // Update WebGL state\n\n      reglPoll(); // Compute size\n\n      var size = width * height * 4; // Allocate data\n\n      if (!data) {\n        if (type === GL_UNSIGNED_BYTE$7) {\n          data = new Uint8Array(size);\n        } else if (type === GL_FLOAT$7) {\n          data = data || new Float32Array(size);\n        }\n      } // Type check\n\n\n      check$1.isTypedArray(data, 'data buffer for regl.read() must be a typedarray');\n      check$1(data.byteLength >= size, 'data buffer for regl.read() too small'); // Run read pixels\n\n      gl.pixelStorei(GL_PACK_ALIGNMENT, 4);\n      gl.readPixels(x, y, width, height, GL_RGBA$3, type, data);\n      return data;\n    }\n\n    function readPixelsFBO(options) {\n      var result;\n      framebufferState.setFBO({\n        framebuffer: options.framebuffer\n      }, function () {\n        result = readPixelsImpl(options);\n      });\n      return result;\n    }\n\n    function readPixels(options) {\n      if (!options || !('framebuffer' in options)) {\n        return readPixelsImpl(options);\n      } else {\n        return readPixelsFBO(options);\n      }\n    }\n\n    return readPixels;\n  }\n\n  function slice(x) {\n    return Array.prototype.slice.call(x);\n  }\n\n  function join(x) {\n    return slice(x).join('');\n  }\n\n  function createEnvironment() {\n    // Unique variable id counter\n    var varCounter = 0; // Linked values are passed from this scope into the generated code block\n    // Calling link() passes a value into the generated scope and returns\n    // the variable name which it is bound to\n\n    var linkedNames = [];\n    var linkedValues = [];\n\n    function link(value) {\n      for (var i = 0; i < linkedValues.length; ++i) {\n        if (linkedValues[i] === value) {\n          return linkedNames[i];\n        }\n      }\n\n      var name = 'g' + varCounter++;\n      linkedNames.push(name);\n      linkedValues.push(value);\n      return name;\n    } // create a code block\n\n\n    function block() {\n      var code = [];\n\n      function push() {\n        code.push.apply(code, slice(arguments));\n      }\n\n      var vars = [];\n\n      function def() {\n        var name = 'v' + varCounter++;\n        vars.push(name);\n\n        if (arguments.length > 0) {\n          code.push(name, '=');\n          code.push.apply(code, slice(arguments));\n          code.push(';');\n        }\n\n        return name;\n      }\n\n      return extend(push, {\n        def: def,\n        toString: function toString() {\n          return join([vars.length > 0 ? 'var ' + vars + ';' : '', join(code)]);\n        }\n      });\n    }\n\n    function scope() {\n      var entry = block();\n      var exit = block();\n      var entryToString = entry.toString;\n      var exitToString = exit.toString;\n\n      function save(object, prop) {\n        exit(object, prop, '=', entry.def(object, prop), ';');\n      }\n\n      return extend(function () {\n        entry.apply(entry, slice(arguments));\n      }, {\n        def: entry.def,\n        entry: entry,\n        exit: exit,\n        save: save,\n        set: function set(object, prop, value) {\n          save(object, prop);\n          entry(object, prop, '=', value, ';');\n        },\n        toString: function toString() {\n          return entryToString() + exitToString();\n        }\n      });\n    }\n\n    function conditional() {\n      var pred = join(arguments);\n      var thenBlock = scope();\n      var elseBlock = scope();\n      var thenToString = thenBlock.toString;\n      var elseToString = elseBlock.toString;\n      return extend(thenBlock, {\n        then: function then() {\n          thenBlock.apply(thenBlock, slice(arguments));\n          return this;\n        },\n        else: function _else() {\n          elseBlock.apply(elseBlock, slice(arguments));\n          return this;\n        },\n        toString: function toString() {\n          var elseClause = elseToString();\n\n          if (elseClause) {\n            elseClause = 'else{' + elseClause + '}';\n          }\n\n          return join(['if(', pred, '){', thenToString(), '}', elseClause]);\n        }\n      });\n    } // procedure list\n\n\n    var globalBlock = block();\n    var procedures = {};\n\n    function proc(name, count) {\n      var args = [];\n\n      function arg() {\n        var name = 'a' + args.length;\n        args.push(name);\n        return name;\n      }\n\n      count = count || 0;\n\n      for (var i = 0; i < count; ++i) {\n        arg();\n      }\n\n      var body = scope();\n      var bodyToString = body.toString;\n      var result = procedures[name] = extend(body, {\n        arg: arg,\n        toString: function toString() {\n          return join(['function(', args.join(), '){', bodyToString(), '}']);\n        }\n      });\n      return result;\n    }\n\n    function compile() {\n      var code = ['\"use strict\";', globalBlock, 'return {'];\n      Object.keys(procedures).forEach(function (name) {\n        code.push('\"', name, '\":', procedures[name].toString(), ',');\n      });\n      code.push('}');\n      var src = join(code).replace(/;/g, ';\\n').replace(/}/g, '}\\n').replace(/{/g, '{\\n');\n      var proc = Function.apply(null, linkedNames.concat(src));\n      return proc.apply(null, linkedValues);\n    }\n\n    return {\n      global: globalBlock,\n      link: link,\n      block: block,\n      proc: proc,\n      scope: scope,\n      cond: conditional,\n      compile: compile\n    };\n  } // \"cute\" names for vector components\n\n\n  var CUTE_COMPONENTS = 'xyzw'.split('');\n  var GL_UNSIGNED_BYTE$8 = 5121;\n  var ATTRIB_STATE_POINTER = 1;\n  var ATTRIB_STATE_CONSTANT = 2;\n  var DYN_FUNC$1 = 0;\n  var DYN_PROP$1 = 1;\n  var DYN_CONTEXT$1 = 2;\n  var DYN_STATE$1 = 3;\n  var DYN_THUNK = 4;\n  var S_DITHER = 'dither';\n  var S_BLEND_ENABLE = 'blend.enable';\n  var S_BLEND_COLOR = 'blend.color';\n  var S_BLEND_EQUATION = 'blend.equation';\n  var S_BLEND_FUNC = 'blend.func';\n  var S_DEPTH_ENABLE = 'depth.enable';\n  var S_DEPTH_FUNC = 'depth.func';\n  var S_DEPTH_RANGE = 'depth.range';\n  var S_DEPTH_MASK = 'depth.mask';\n  var S_COLOR_MASK = 'colorMask';\n  var S_CULL_ENABLE = 'cull.enable';\n  var S_CULL_FACE = 'cull.face';\n  var S_FRONT_FACE = 'frontFace';\n  var S_LINE_WIDTH = 'lineWidth';\n  var S_POLYGON_OFFSET_ENABLE = 'polygonOffset.enable';\n  var S_POLYGON_OFFSET_OFFSET = 'polygonOffset.offset';\n  var S_SAMPLE_ALPHA = 'sample.alpha';\n  var S_SAMPLE_ENABLE = 'sample.enable';\n  var S_SAMPLE_COVERAGE = 'sample.coverage';\n  var S_STENCIL_ENABLE = 'stencil.enable';\n  var S_STENCIL_MASK = 'stencil.mask';\n  var S_STENCIL_FUNC = 'stencil.func';\n  var S_STENCIL_OPFRONT = 'stencil.opFront';\n  var S_STENCIL_OPBACK = 'stencil.opBack';\n  var S_SCISSOR_ENABLE = 'scissor.enable';\n  var S_SCISSOR_BOX = 'scissor.box';\n  var S_VIEWPORT = 'viewport';\n  var S_PROFILE = 'profile';\n  var S_FRAMEBUFFER = 'framebuffer';\n  var S_VERT = 'vert';\n  var S_FRAG = 'frag';\n  var S_ELEMENTS = 'elements';\n  var S_PRIMITIVE = 'primitive';\n  var S_COUNT = 'count';\n  var S_OFFSET = 'offset';\n  var S_INSTANCES = 'instances';\n  var SUFFIX_WIDTH = 'Width';\n  var SUFFIX_HEIGHT = 'Height';\n  var S_FRAMEBUFFER_WIDTH = S_FRAMEBUFFER + SUFFIX_WIDTH;\n  var S_FRAMEBUFFER_HEIGHT = S_FRAMEBUFFER + SUFFIX_HEIGHT;\n  var S_VIEWPORT_WIDTH = S_VIEWPORT + SUFFIX_WIDTH;\n  var S_VIEWPORT_HEIGHT = S_VIEWPORT + SUFFIX_HEIGHT;\n  var S_DRAWINGBUFFER = 'drawingBuffer';\n  var S_DRAWINGBUFFER_WIDTH = S_DRAWINGBUFFER + SUFFIX_WIDTH;\n  var S_DRAWINGBUFFER_HEIGHT = S_DRAWINGBUFFER + SUFFIX_HEIGHT;\n  var NESTED_OPTIONS = [S_BLEND_FUNC, S_BLEND_EQUATION, S_STENCIL_FUNC, S_STENCIL_OPFRONT, S_STENCIL_OPBACK, S_SAMPLE_COVERAGE, S_VIEWPORT, S_SCISSOR_BOX, S_POLYGON_OFFSET_OFFSET];\n  var GL_ARRAY_BUFFER$1 = 34962;\n  var GL_ELEMENT_ARRAY_BUFFER$1 = 34963;\n  var GL_FRAGMENT_SHADER$1 = 35632;\n  var GL_VERTEX_SHADER$1 = 35633;\n  var GL_TEXTURE_2D$3 = 0x0DE1;\n  var GL_TEXTURE_CUBE_MAP$2 = 0x8513;\n  var GL_CULL_FACE = 0x0B44;\n  var GL_BLEND = 0x0BE2;\n  var GL_DITHER = 0x0BD0;\n  var GL_STENCIL_TEST = 0x0B90;\n  var GL_DEPTH_TEST = 0x0B71;\n  var GL_SCISSOR_TEST = 0x0C11;\n  var GL_POLYGON_OFFSET_FILL = 0x8037;\n  var GL_SAMPLE_ALPHA_TO_COVERAGE = 0x809E;\n  var GL_SAMPLE_COVERAGE = 0x80A0;\n  var GL_FLOAT$8 = 5126;\n  var GL_FLOAT_VEC2 = 35664;\n  var GL_FLOAT_VEC3 = 35665;\n  var GL_FLOAT_VEC4 = 35666;\n  var GL_INT$3 = 5124;\n  var GL_INT_VEC2 = 35667;\n  var GL_INT_VEC3 = 35668;\n  var GL_INT_VEC4 = 35669;\n  var GL_BOOL = 35670;\n  var GL_BOOL_VEC2 = 35671;\n  var GL_BOOL_VEC3 = 35672;\n  var GL_BOOL_VEC4 = 35673;\n  var GL_FLOAT_MAT2 = 35674;\n  var GL_FLOAT_MAT3 = 35675;\n  var GL_FLOAT_MAT4 = 35676;\n  var GL_SAMPLER_2D = 35678;\n  var GL_SAMPLER_CUBE = 35680;\n  var GL_TRIANGLES$1 = 4;\n  var GL_FRONT = 1028;\n  var GL_BACK = 1029;\n  var GL_CW = 0x0900;\n  var GL_CCW = 0x0901;\n  var GL_MIN_EXT = 0x8007;\n  var GL_MAX_EXT = 0x8008;\n  var GL_ALWAYS = 519;\n  var GL_KEEP = 7680;\n  var GL_ZERO = 0;\n  var GL_ONE = 1;\n  var GL_FUNC_ADD = 0x8006;\n  var GL_LESS = 513;\n  var GL_FRAMEBUFFER$2 = 0x8D40;\n  var GL_COLOR_ATTACHMENT0$2 = 0x8CE0;\n  var blendFuncs = {\n    '0': 0,\n    '1': 1,\n    'zero': 0,\n    'one': 1,\n    'src color': 768,\n    'one minus src color': 769,\n    'src alpha': 770,\n    'one minus src alpha': 771,\n    'dst color': 774,\n    'one minus dst color': 775,\n    'dst alpha': 772,\n    'one minus dst alpha': 773,\n    'constant color': 32769,\n    'one minus constant color': 32770,\n    'constant alpha': 32771,\n    'one minus constant alpha': 32772,\n    'src alpha saturate': 776\n  }; // There are invalid values for srcRGB and dstRGB. See:\n  // https://www.khronos.org/registry/webgl/specs/1.0/#6.13\n  // https://github.com/KhronosGroup/WebGL/blob/0d3201f5f7ec3c0060bc1f04077461541f1987b9/conformance-suites/1.0.3/conformance/misc/webgl-specific.html#L56\n\n  var invalidBlendCombinations = ['constant color, constant alpha', 'one minus constant color, constant alpha', 'constant color, one minus constant alpha', 'one minus constant color, one minus constant alpha', 'constant alpha, constant color', 'constant alpha, one minus constant color', 'one minus constant alpha, constant color', 'one minus constant alpha, one minus constant color'];\n  var compareFuncs = {\n    'never': 512,\n    'less': 513,\n    '<': 513,\n    'equal': 514,\n    '=': 514,\n    '==': 514,\n    '===': 514,\n    'lequal': 515,\n    '<=': 515,\n    'greater': 516,\n    '>': 516,\n    'notequal': 517,\n    '!=': 517,\n    '!==': 517,\n    'gequal': 518,\n    '>=': 518,\n    'always': 519\n  };\n  var stencilOps = {\n    '0': 0,\n    'zero': 0,\n    'keep': 7680,\n    'replace': 7681,\n    'increment': 7682,\n    'decrement': 7683,\n    'increment wrap': 34055,\n    'decrement wrap': 34056,\n    'invert': 5386\n  };\n  var shaderType = {\n    'frag': GL_FRAGMENT_SHADER$1,\n    'vert': GL_VERTEX_SHADER$1\n  };\n  var orientationType = {\n    'cw': GL_CW,\n    'ccw': GL_CCW\n  };\n\n  function isBufferArgs(x) {\n    return Array.isArray(x) || isTypedArray(x) || isNDArrayLike(x);\n  } // Make sure viewport is processed first\n\n\n  function sortState(state) {\n    return state.sort(function (a, b) {\n      if (a === S_VIEWPORT) {\n        return -1;\n      } else if (b === S_VIEWPORT) {\n        return 1;\n      }\n\n      return a < b ? -1 : 1;\n    });\n  }\n\n  function Declaration(thisDep, contextDep, propDep, append) {\n    this.thisDep = thisDep;\n    this.contextDep = contextDep;\n    this.propDep = propDep;\n    this.append = append;\n  }\n\n  function isStatic(decl) {\n    return decl && !(decl.thisDep || decl.contextDep || decl.propDep);\n  }\n\n  function createStaticDecl(append) {\n    return new Declaration(false, false, false, append);\n  }\n\n  function createDynamicDecl(dyn, append) {\n    var type = dyn.type;\n\n    if (type === DYN_FUNC$1) {\n      var numArgs = dyn.data.length;\n      return new Declaration(true, numArgs >= 1, numArgs >= 2, append);\n    } else if (type === DYN_THUNK) {\n      var data = dyn.data;\n      return new Declaration(data.thisDep, data.contextDep, data.propDep, append);\n    } else {\n      return new Declaration(type === DYN_STATE$1, type === DYN_CONTEXT$1, type === DYN_PROP$1, append);\n    }\n  }\n\n  var SCOPE_DECL = new Declaration(false, false, false, function () {});\n\n  function reglCore(gl, stringStore, extensions, limits, bufferState, elementState, textureState, framebufferState, uniformState, attributeState, shaderState, drawState, contextState, timer, config) {\n    var AttributeRecord = attributeState.Record;\n    var blendEquations = {\n      'add': 32774,\n      'subtract': 32778,\n      'reverse subtract': 32779\n    };\n\n    if (extensions.ext_blend_minmax) {\n      blendEquations.min = GL_MIN_EXT;\n      blendEquations.max = GL_MAX_EXT;\n    }\n\n    var extInstancing = extensions.angle_instanced_arrays;\n    var extDrawBuffers = extensions.webgl_draw_buffers; // ===================================================\n    // ===================================================\n    // WEBGL STATE\n    // ===================================================\n    // ===================================================\n\n    var currentState = {\n      dirty: true,\n      profile: config.profile\n    };\n    var nextState = {};\n    var GL_STATE_NAMES = [];\n    var GL_FLAGS = {};\n    var GL_VARIABLES = {};\n\n    function propName(name) {\n      return name.replace('.', '_');\n    }\n\n    function stateFlag(sname, cap, init) {\n      var name = propName(sname);\n      GL_STATE_NAMES.push(sname);\n      nextState[name] = currentState[name] = !!init;\n      GL_FLAGS[name] = cap;\n    }\n\n    function stateVariable(sname, func, init) {\n      var name = propName(sname);\n      GL_STATE_NAMES.push(sname);\n\n      if (Array.isArray(init)) {\n        currentState[name] = init.slice();\n        nextState[name] = init.slice();\n      } else {\n        currentState[name] = nextState[name] = init;\n      }\n\n      GL_VARIABLES[name] = func;\n    } // Dithering\n\n\n    stateFlag(S_DITHER, GL_DITHER); // Blending\n\n    stateFlag(S_BLEND_ENABLE, GL_BLEND);\n    stateVariable(S_BLEND_COLOR, 'blendColor', [0, 0, 0, 0]);\n    stateVariable(S_BLEND_EQUATION, 'blendEquationSeparate', [GL_FUNC_ADD, GL_FUNC_ADD]);\n    stateVariable(S_BLEND_FUNC, 'blendFuncSeparate', [GL_ONE, GL_ZERO, GL_ONE, GL_ZERO]); // Depth\n\n    stateFlag(S_DEPTH_ENABLE, GL_DEPTH_TEST, true);\n    stateVariable(S_DEPTH_FUNC, 'depthFunc', GL_LESS);\n    stateVariable(S_DEPTH_RANGE, 'depthRange', [0, 1]);\n    stateVariable(S_DEPTH_MASK, 'depthMask', true); // Color mask\n\n    stateVariable(S_COLOR_MASK, S_COLOR_MASK, [true, true, true, true]); // Face culling\n\n    stateFlag(S_CULL_ENABLE, GL_CULL_FACE);\n    stateVariable(S_CULL_FACE, 'cullFace', GL_BACK); // Front face orientation\n\n    stateVariable(S_FRONT_FACE, S_FRONT_FACE, GL_CCW); // Line width\n\n    stateVariable(S_LINE_WIDTH, S_LINE_WIDTH, 1); // Polygon offset\n\n    stateFlag(S_POLYGON_OFFSET_ENABLE, GL_POLYGON_OFFSET_FILL);\n    stateVariable(S_POLYGON_OFFSET_OFFSET, 'polygonOffset', [0, 0]); // Sample coverage\n\n    stateFlag(S_SAMPLE_ALPHA, GL_SAMPLE_ALPHA_TO_COVERAGE);\n    stateFlag(S_SAMPLE_ENABLE, GL_SAMPLE_COVERAGE);\n    stateVariable(S_SAMPLE_COVERAGE, 'sampleCoverage', [1, false]); // Stencil\n\n    stateFlag(S_STENCIL_ENABLE, GL_STENCIL_TEST);\n    stateVariable(S_STENCIL_MASK, 'stencilMask', -1);\n    stateVariable(S_STENCIL_FUNC, 'stencilFunc', [GL_ALWAYS, 0, -1]);\n    stateVariable(S_STENCIL_OPFRONT, 'stencilOpSeparate', [GL_FRONT, GL_KEEP, GL_KEEP, GL_KEEP]);\n    stateVariable(S_STENCIL_OPBACK, 'stencilOpSeparate', [GL_BACK, GL_KEEP, GL_KEEP, GL_KEEP]); // Scissor\n\n    stateFlag(S_SCISSOR_ENABLE, GL_SCISSOR_TEST);\n    stateVariable(S_SCISSOR_BOX, 'scissor', [0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight]); // Viewport\n\n    stateVariable(S_VIEWPORT, S_VIEWPORT, [0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight]); // ===================================================\n    // ===================================================\n    // ENVIRONMENT\n    // ===================================================\n    // ===================================================\n\n    var sharedState = {\n      gl: gl,\n      context: contextState,\n      strings: stringStore,\n      next: nextState,\n      current: currentState,\n      draw: drawState,\n      elements: elementState,\n      buffer: bufferState,\n      shader: shaderState,\n      attributes: attributeState.state,\n      uniforms: uniformState,\n      framebuffer: framebufferState,\n      extensions: extensions,\n      timer: timer,\n      isBufferArgs: isBufferArgs\n    };\n    var sharedConstants = {\n      primTypes: primTypes,\n      compareFuncs: compareFuncs,\n      blendFuncs: blendFuncs,\n      blendEquations: blendEquations,\n      stencilOps: stencilOps,\n      glTypes: glTypes,\n      orientationType: orientationType\n    };\n    check$1.optional(function () {\n      sharedState.isArrayLike = isArrayLike;\n    });\n\n    if (extDrawBuffers) {\n      sharedConstants.backBuffer = [GL_BACK];\n      sharedConstants.drawBuffer = loop(limits.maxDrawbuffers, function (i) {\n        if (i === 0) {\n          return [0];\n        }\n\n        return loop(i, function (j) {\n          return GL_COLOR_ATTACHMENT0$2 + j;\n        });\n      });\n    }\n\n    var drawCallCounter = 0;\n\n    function createREGLEnvironment() {\n      var env = createEnvironment();\n      var link = env.link;\n      var global = env.global;\n      env.id = drawCallCounter++;\n      env.batchId = '0'; // link shared state\n\n      var SHARED = link(sharedState);\n      var shared = env.shared = {\n        props: 'a0'\n      };\n      Object.keys(sharedState).forEach(function (prop) {\n        shared[prop] = global.def(SHARED, '.', prop);\n      }); // Inject runtime assertion stuff for debug builds\n\n      check$1.optional(function () {\n        env.CHECK = link(check$1);\n        env.commandStr = check$1.guessCommand();\n        env.command = link(env.commandStr);\n\n        env.assert = function (block, pred, message) {\n          block('if(!(', pred, '))', this.CHECK, '.commandRaise(', link(message), ',', this.command, ');');\n        };\n\n        sharedConstants.invalidBlendCombinations = invalidBlendCombinations;\n      }); // Copy GL state variables over\n\n      var nextVars = env.next = {};\n      var currentVars = env.current = {};\n      Object.keys(GL_VARIABLES).forEach(function (variable) {\n        if (Array.isArray(currentState[variable])) {\n          nextVars[variable] = global.def(shared.next, '.', variable);\n          currentVars[variable] = global.def(shared.current, '.', variable);\n        }\n      }); // Initialize shared constants\n\n      var constants = env.constants = {};\n      Object.keys(sharedConstants).forEach(function (name) {\n        constants[name] = global.def(JSON.stringify(sharedConstants[name]));\n      }); // Helper function for calling a block\n\n      env.invoke = function (block, x) {\n        switch (x.type) {\n          case DYN_FUNC$1:\n            var argList = ['this', shared.context, shared.props, env.batchId];\n            return block.def(link(x.data), '.call(', argList.slice(0, Math.max(x.data.length + 1, 4)), ')');\n\n          case DYN_PROP$1:\n            return block.def(shared.props, x.data);\n\n          case DYN_CONTEXT$1:\n            return block.def(shared.context, x.data);\n\n          case DYN_STATE$1:\n            return block.def('this', x.data);\n\n          case DYN_THUNK:\n            x.data.append(env, block);\n            return x.data.ref;\n        }\n      };\n\n      env.attribCache = {};\n      var scopeAttribs = {};\n\n      env.scopeAttrib = function (name) {\n        var id = stringStore.id(name);\n\n        if (id in scopeAttribs) {\n          return scopeAttribs[id];\n        }\n\n        var binding = attributeState.scope[id];\n\n        if (!binding) {\n          binding = attributeState.scope[id] = new AttributeRecord();\n        }\n\n        var result = scopeAttribs[id] = link(binding);\n        return result;\n      };\n\n      return env;\n    } // ===================================================\n    // ===================================================\n    // PARSING\n    // ===================================================\n    // ===================================================\n\n\n    function parseProfile(options) {\n      var staticOptions = options.static;\n      var dynamicOptions = options.dynamic;\n      var profileEnable;\n\n      if (S_PROFILE in staticOptions) {\n        var value = !!staticOptions[S_PROFILE];\n        profileEnable = createStaticDecl(function (env, scope) {\n          return value;\n        });\n        profileEnable.enable = value;\n      } else if (S_PROFILE in dynamicOptions) {\n        var dyn = dynamicOptions[S_PROFILE];\n        profileEnable = createDynamicDecl(dyn, function (env, scope) {\n          return env.invoke(scope, dyn);\n        });\n      }\n\n      return profileEnable;\n    }\n\n    function parseFramebuffer(options, env) {\n      var staticOptions = options.static;\n      var dynamicOptions = options.dynamic;\n\n      if (S_FRAMEBUFFER in staticOptions) {\n        var framebuffer = staticOptions[S_FRAMEBUFFER];\n\n        if (framebuffer) {\n          framebuffer = framebufferState.getFramebuffer(framebuffer);\n          check$1.command(framebuffer, 'invalid framebuffer object');\n          return createStaticDecl(function (env, block) {\n            var FRAMEBUFFER = env.link(framebuffer);\n            var shared = env.shared;\n            block.set(shared.framebuffer, '.next', FRAMEBUFFER);\n            var CONTEXT = shared.context;\n            block.set(CONTEXT, '.' + S_FRAMEBUFFER_WIDTH, FRAMEBUFFER + '.width');\n            block.set(CONTEXT, '.' + S_FRAMEBUFFER_HEIGHT, FRAMEBUFFER + '.height');\n            return FRAMEBUFFER;\n          });\n        } else {\n          return createStaticDecl(function (env, scope) {\n            var shared = env.shared;\n            scope.set(shared.framebuffer, '.next', 'null');\n            var CONTEXT = shared.context;\n            scope.set(CONTEXT, '.' + S_FRAMEBUFFER_WIDTH, CONTEXT + '.' + S_DRAWINGBUFFER_WIDTH);\n            scope.set(CONTEXT, '.' + S_FRAMEBUFFER_HEIGHT, CONTEXT + '.' + S_DRAWINGBUFFER_HEIGHT);\n            return 'null';\n          });\n        }\n      } else if (S_FRAMEBUFFER in dynamicOptions) {\n        var dyn = dynamicOptions[S_FRAMEBUFFER];\n        return createDynamicDecl(dyn, function (env, scope) {\n          var FRAMEBUFFER_FUNC = env.invoke(scope, dyn);\n          var shared = env.shared;\n          var FRAMEBUFFER_STATE = shared.framebuffer;\n          var FRAMEBUFFER = scope.def(FRAMEBUFFER_STATE, '.getFramebuffer(', FRAMEBUFFER_FUNC, ')');\n          check$1.optional(function () {\n            env.assert(scope, '!' + FRAMEBUFFER_FUNC + '||' + FRAMEBUFFER, 'invalid framebuffer object');\n          });\n          scope.set(FRAMEBUFFER_STATE, '.next', FRAMEBUFFER);\n          var CONTEXT = shared.context;\n          scope.set(CONTEXT, '.' + S_FRAMEBUFFER_WIDTH, FRAMEBUFFER + '?' + FRAMEBUFFER + '.width:' + CONTEXT + '.' + S_DRAWINGBUFFER_WIDTH);\n          scope.set(CONTEXT, '.' + S_FRAMEBUFFER_HEIGHT, FRAMEBUFFER + '?' + FRAMEBUFFER + '.height:' + CONTEXT + '.' + S_DRAWINGBUFFER_HEIGHT);\n          return FRAMEBUFFER;\n        });\n      } else {\n        return null;\n      }\n    }\n\n    function parseViewportScissor(options, framebuffer, env) {\n      var staticOptions = options.static;\n      var dynamicOptions = options.dynamic;\n\n      function parseBox(param) {\n        if (param in staticOptions) {\n          var box = staticOptions[param];\n          check$1.commandType(box, 'object', 'invalid ' + param, env.commandStr);\n          var isStatic = true;\n          var x = box.x | 0;\n          var y = box.y | 0;\n          var w, h;\n\n          if ('width' in box) {\n            w = box.width | 0;\n            check$1.command(w >= 0, 'invalid ' + param, env.commandStr);\n          } else {\n            isStatic = false;\n          }\n\n          if ('height' in box) {\n            h = box.height | 0;\n            check$1.command(h >= 0, 'invalid ' + param, env.commandStr);\n          } else {\n            isStatic = false;\n          }\n\n          return new Declaration(!isStatic && framebuffer && framebuffer.thisDep, !isStatic && framebuffer && framebuffer.contextDep, !isStatic && framebuffer && framebuffer.propDep, function (env, scope) {\n            var CONTEXT = env.shared.context;\n            var BOX_W = w;\n\n            if (!('width' in box)) {\n              BOX_W = scope.def(CONTEXT, '.', S_FRAMEBUFFER_WIDTH, '-', x);\n            }\n\n            var BOX_H = h;\n\n            if (!('height' in box)) {\n              BOX_H = scope.def(CONTEXT, '.', S_FRAMEBUFFER_HEIGHT, '-', y);\n            }\n\n            return [x, y, BOX_W, BOX_H];\n          });\n        } else if (param in dynamicOptions) {\n          var dynBox = dynamicOptions[param];\n          var result = createDynamicDecl(dynBox, function (env, scope) {\n            var BOX = env.invoke(scope, dynBox);\n            check$1.optional(function () {\n              env.assert(scope, BOX + '&&typeof ' + BOX + '===\"object\"', 'invalid ' + param);\n            });\n            var CONTEXT = env.shared.context;\n            var BOX_X = scope.def(BOX, '.x|0');\n            var BOX_Y = scope.def(BOX, '.y|0');\n            var BOX_W = scope.def('\"width\" in ', BOX, '?', BOX, '.width|0:', '(', CONTEXT, '.', S_FRAMEBUFFER_WIDTH, '-', BOX_X, ')');\n            var BOX_H = scope.def('\"height\" in ', BOX, '?', BOX, '.height|0:', '(', CONTEXT, '.', S_FRAMEBUFFER_HEIGHT, '-', BOX_Y, ')');\n            check$1.optional(function () {\n              env.assert(scope, BOX_W + '>=0&&' + BOX_H + '>=0', 'invalid ' + param);\n            });\n            return [BOX_X, BOX_Y, BOX_W, BOX_H];\n          });\n\n          if (framebuffer) {\n            result.thisDep = result.thisDep || framebuffer.thisDep;\n            result.contextDep = result.contextDep || framebuffer.contextDep;\n            result.propDep = result.propDep || framebuffer.propDep;\n          }\n\n          return result;\n        } else if (framebuffer) {\n          return new Declaration(framebuffer.thisDep, framebuffer.contextDep, framebuffer.propDep, function (env, scope) {\n            var CONTEXT = env.shared.context;\n            return [0, 0, scope.def(CONTEXT, '.', S_FRAMEBUFFER_WIDTH), scope.def(CONTEXT, '.', S_FRAMEBUFFER_HEIGHT)];\n          });\n        } else {\n          return null;\n        }\n      }\n\n      var viewport = parseBox(S_VIEWPORT);\n\n      if (viewport) {\n        var prevViewport = viewport;\n        viewport = new Declaration(viewport.thisDep, viewport.contextDep, viewport.propDep, function (env, scope) {\n          var VIEWPORT = prevViewport.append(env, scope);\n          var CONTEXT = env.shared.context;\n          scope.set(CONTEXT, '.' + S_VIEWPORT_WIDTH, VIEWPORT[2]);\n          scope.set(CONTEXT, '.' + S_VIEWPORT_HEIGHT, VIEWPORT[3]);\n          return VIEWPORT;\n        });\n      }\n\n      return {\n        viewport: viewport,\n        scissor_box: parseBox(S_SCISSOR_BOX)\n      };\n    }\n\n    function parseProgram(options) {\n      var staticOptions = options.static;\n      var dynamicOptions = options.dynamic;\n\n      function parseShader(name) {\n        if (name in staticOptions) {\n          var id = stringStore.id(staticOptions[name]);\n          check$1.optional(function () {\n            shaderState.shader(shaderType[name], id, check$1.guessCommand());\n          });\n          var result = createStaticDecl(function () {\n            return id;\n          });\n          result.id = id;\n          return result;\n        } else if (name in dynamicOptions) {\n          var dyn = dynamicOptions[name];\n          return createDynamicDecl(dyn, function (env, scope) {\n            var str = env.invoke(scope, dyn);\n            var id = scope.def(env.shared.strings, '.id(', str, ')');\n            check$1.optional(function () {\n              scope(env.shared.shader, '.shader(', shaderType[name], ',', id, ',', env.command, ');');\n            });\n            return id;\n          });\n        }\n\n        return null;\n      }\n\n      var frag = parseShader(S_FRAG);\n      var vert = parseShader(S_VERT);\n      var program = null;\n      var progVar;\n\n      if (isStatic(frag) && isStatic(vert)) {\n        program = shaderState.program(vert.id, frag.id);\n        progVar = createStaticDecl(function (env, scope) {\n          return env.link(program);\n        });\n      } else {\n        progVar = new Declaration(frag && frag.thisDep || vert && vert.thisDep, frag && frag.contextDep || vert && vert.contextDep, frag && frag.propDep || vert && vert.propDep, function (env, scope) {\n          var SHADER_STATE = env.shared.shader;\n          var fragId;\n\n          if (frag) {\n            fragId = frag.append(env, scope);\n          } else {\n            fragId = scope.def(SHADER_STATE, '.', S_FRAG);\n          }\n\n          var vertId;\n\n          if (vert) {\n            vertId = vert.append(env, scope);\n          } else {\n            vertId = scope.def(SHADER_STATE, '.', S_VERT);\n          }\n\n          var progDef = SHADER_STATE + '.program(' + vertId + ',' + fragId;\n          check$1.optional(function () {\n            progDef += ',' + env.command;\n          });\n          return scope.def(progDef + ')');\n        });\n      }\n\n      return {\n        frag: frag,\n        vert: vert,\n        progVar: progVar,\n        program: program\n      };\n    }\n\n    function parseDraw(options, env) {\n      var staticOptions = options.static;\n      var dynamicOptions = options.dynamic;\n\n      function parseElements() {\n        if (S_ELEMENTS in staticOptions) {\n          var elements = staticOptions[S_ELEMENTS];\n\n          if (isBufferArgs(elements)) {\n            elements = elementState.getElements(elementState.create(elements, true));\n          } else if (elements) {\n            elements = elementState.getElements(elements);\n            check$1.command(elements, 'invalid elements', env.commandStr);\n          }\n\n          var result = createStaticDecl(function (env, scope) {\n            if (elements) {\n              var result = env.link(elements);\n              env.ELEMENTS = result;\n              return result;\n            }\n\n            env.ELEMENTS = null;\n            return null;\n          });\n          result.value = elements;\n          return result;\n        } else if (S_ELEMENTS in dynamicOptions) {\n          var dyn = dynamicOptions[S_ELEMENTS];\n          return createDynamicDecl(dyn, function (env, scope) {\n            var shared = env.shared;\n            var IS_BUFFER_ARGS = shared.isBufferArgs;\n            var ELEMENT_STATE = shared.elements;\n            var elementDefn = env.invoke(scope, dyn);\n            var elements = scope.def('null');\n            var elementStream = scope.def(IS_BUFFER_ARGS, '(', elementDefn, ')');\n            var ifte = env.cond(elementStream).then(elements, '=', ELEMENT_STATE, '.createStream(', elementDefn, ');').else(elements, '=', ELEMENT_STATE, '.getElements(', elementDefn, ');');\n            check$1.optional(function () {\n              env.assert(ifte.else, '!' + elementDefn + '||' + elements, 'invalid elements');\n            });\n            scope.entry(ifte);\n            scope.exit(env.cond(elementStream).then(ELEMENT_STATE, '.destroyStream(', elements, ');'));\n            env.ELEMENTS = elements;\n            return elements;\n          });\n        }\n\n        return null;\n      }\n\n      var elements = parseElements();\n\n      function parsePrimitive() {\n        if (S_PRIMITIVE in staticOptions) {\n          var primitive = staticOptions[S_PRIMITIVE];\n          check$1.commandParameter(primitive, primTypes, 'invalid primitve', env.commandStr);\n          return createStaticDecl(function (env, scope) {\n            return primTypes[primitive];\n          });\n        } else if (S_PRIMITIVE in dynamicOptions) {\n          var dynPrimitive = dynamicOptions[S_PRIMITIVE];\n          return createDynamicDecl(dynPrimitive, function (env, scope) {\n            var PRIM_TYPES = env.constants.primTypes;\n            var prim = env.invoke(scope, dynPrimitive);\n            check$1.optional(function () {\n              env.assert(scope, prim + ' in ' + PRIM_TYPES, 'invalid primitive, must be one of ' + Object.keys(primTypes));\n            });\n            return scope.def(PRIM_TYPES, '[', prim, ']');\n          });\n        } else if (elements) {\n          if (isStatic(elements)) {\n            if (elements.value) {\n              return createStaticDecl(function (env, scope) {\n                return scope.def(env.ELEMENTS, '.primType');\n              });\n            } else {\n              return createStaticDecl(function () {\n                return GL_TRIANGLES$1;\n              });\n            }\n          } else {\n            return new Declaration(elements.thisDep, elements.contextDep, elements.propDep, function (env, scope) {\n              var elements = env.ELEMENTS;\n              return scope.def(elements, '?', elements, '.primType:', GL_TRIANGLES$1);\n            });\n          }\n        }\n\n        return null;\n      }\n\n      function parseParam(param, isOffset) {\n        if (param in staticOptions) {\n          var value = staticOptions[param] | 0;\n          check$1.command(!isOffset || value >= 0, 'invalid ' + param, env.commandStr);\n          return createStaticDecl(function (env, scope) {\n            if (isOffset) {\n              env.OFFSET = value;\n            }\n\n            return value;\n          });\n        } else if (param in dynamicOptions) {\n          var dynValue = dynamicOptions[param];\n          return createDynamicDecl(dynValue, function (env, scope) {\n            var result = env.invoke(scope, dynValue);\n\n            if (isOffset) {\n              env.OFFSET = result;\n              check$1.optional(function () {\n                env.assert(scope, result + '>=0', 'invalid ' + param);\n              });\n            }\n\n            return result;\n          });\n        } else if (isOffset && elements) {\n          return createStaticDecl(function (env, scope) {\n            env.OFFSET = '0';\n            return 0;\n          });\n        }\n\n        return null;\n      }\n\n      var OFFSET = parseParam(S_OFFSET, true);\n\n      function parseVertCount() {\n        if (S_COUNT in staticOptions) {\n          var count = staticOptions[S_COUNT] | 0;\n          check$1.command(typeof count === 'number' && count >= 0, 'invalid vertex count', env.commandStr);\n          return createStaticDecl(function () {\n            return count;\n          });\n        } else if (S_COUNT in dynamicOptions) {\n          var dynCount = dynamicOptions[S_COUNT];\n          return createDynamicDecl(dynCount, function (env, scope) {\n            var result = env.invoke(scope, dynCount);\n            check$1.optional(function () {\n              env.assert(scope, 'typeof ' + result + '===\"number\"&&' + result + '>=0&&' + result + '===(' + result + '|0)', 'invalid vertex count');\n            });\n            return result;\n          });\n        } else if (elements) {\n          if (isStatic(elements)) {\n            if (elements) {\n              if (OFFSET) {\n                return new Declaration(OFFSET.thisDep, OFFSET.contextDep, OFFSET.propDep, function (env, scope) {\n                  var result = scope.def(env.ELEMENTS, '.vertCount-', env.OFFSET);\n                  check$1.optional(function () {\n                    env.assert(scope, result + '>=0', 'invalid vertex offset/element buffer too small');\n                  });\n                  return result;\n                });\n              } else {\n                return createStaticDecl(function (env, scope) {\n                  return scope.def(env.ELEMENTS, '.vertCount');\n                });\n              }\n            } else {\n              var result = createStaticDecl(function () {\n                return -1;\n              });\n              check$1.optional(function () {\n                result.MISSING = true;\n              });\n              return result;\n            }\n          } else {\n            var variable = new Declaration(elements.thisDep || OFFSET.thisDep, elements.contextDep || OFFSET.contextDep, elements.propDep || OFFSET.propDep, function (env, scope) {\n              var elements = env.ELEMENTS;\n\n              if (env.OFFSET) {\n                return scope.def(elements, '?', elements, '.vertCount-', env.OFFSET, ':-1');\n              }\n\n              return scope.def(elements, '?', elements, '.vertCount:-1');\n            });\n            check$1.optional(function () {\n              variable.DYNAMIC = true;\n            });\n            return variable;\n          }\n        }\n\n        return null;\n      }\n\n      return {\n        elements: elements,\n        primitive: parsePrimitive(),\n        count: parseVertCount(),\n        instances: parseParam(S_INSTANCES, false),\n        offset: OFFSET\n      };\n    }\n\n    function parseGLState(options, env) {\n      var staticOptions = options.static;\n      var dynamicOptions = options.dynamic;\n      var STATE = {};\n      GL_STATE_NAMES.forEach(function (prop) {\n        var param = propName(prop);\n\n        function parseParam(parseStatic, parseDynamic) {\n          if (prop in staticOptions) {\n            var value = parseStatic(staticOptions[prop]);\n            STATE[param] = createStaticDecl(function () {\n              return value;\n            });\n          } else if (prop in dynamicOptions) {\n            var dyn = dynamicOptions[prop];\n            STATE[param] = createDynamicDecl(dyn, function (env, scope) {\n              return parseDynamic(env, scope, env.invoke(scope, dyn));\n            });\n          }\n        }\n\n        switch (prop) {\n          case S_CULL_ENABLE:\n          case S_BLEND_ENABLE:\n          case S_DITHER:\n          case S_STENCIL_ENABLE:\n          case S_DEPTH_ENABLE:\n          case S_SCISSOR_ENABLE:\n          case S_POLYGON_OFFSET_ENABLE:\n          case S_SAMPLE_ALPHA:\n          case S_SAMPLE_ENABLE:\n          case S_DEPTH_MASK:\n            return parseParam(function (value) {\n              check$1.commandType(value, 'boolean', prop, env.commandStr);\n              return value;\n            }, function (env, scope, value) {\n              check$1.optional(function () {\n                env.assert(scope, 'typeof ' + value + '===\"boolean\"', 'invalid flag ' + prop, env.commandStr);\n              });\n              return value;\n            });\n\n          case S_DEPTH_FUNC:\n            return parseParam(function (value) {\n              check$1.commandParameter(value, compareFuncs, 'invalid ' + prop, env.commandStr);\n              return compareFuncs[value];\n            }, function (env, scope, value) {\n              var COMPARE_FUNCS = env.constants.compareFuncs;\n              check$1.optional(function () {\n                env.assert(scope, value + ' in ' + COMPARE_FUNCS, 'invalid ' + prop + ', must be one of ' + Object.keys(compareFuncs));\n              });\n              return scope.def(COMPARE_FUNCS, '[', value, ']');\n            });\n\n          case S_DEPTH_RANGE:\n            return parseParam(function (value) {\n              check$1.command(isArrayLike(value) && value.length === 2 && typeof value[0] === 'number' && typeof value[1] === 'number' && value[0] <= value[1], 'depth range is 2d array', env.commandStr);\n              return value;\n            }, function (env, scope, value) {\n              check$1.optional(function () {\n                env.assert(scope, env.shared.isArrayLike + '(' + value + ')&&' + value + '.length===2&&' + 'typeof ' + value + '[0]===\"number\"&&' + 'typeof ' + value + '[1]===\"number\"&&' + value + '[0]<=' + value + '[1]', 'depth range must be a 2d array');\n              });\n              var Z_NEAR = scope.def('+', value, '[0]');\n              var Z_FAR = scope.def('+', value, '[1]');\n              return [Z_NEAR, Z_FAR];\n            });\n\n          case S_BLEND_FUNC:\n            return parseParam(function (value) {\n              check$1.commandType(value, 'object', 'blend.func', env.commandStr);\n              var srcRGB = 'srcRGB' in value ? value.srcRGB : value.src;\n              var srcAlpha = 'srcAlpha' in value ? value.srcAlpha : value.src;\n              var dstRGB = 'dstRGB' in value ? value.dstRGB : value.dst;\n              var dstAlpha = 'dstAlpha' in value ? value.dstAlpha : value.dst;\n              check$1.commandParameter(srcRGB, blendFuncs, param + '.srcRGB', env.commandStr);\n              check$1.commandParameter(srcAlpha, blendFuncs, param + '.srcAlpha', env.commandStr);\n              check$1.commandParameter(dstRGB, blendFuncs, param + '.dstRGB', env.commandStr);\n              check$1.commandParameter(dstAlpha, blendFuncs, param + '.dstAlpha', env.commandStr);\n              check$1.command(invalidBlendCombinations.indexOf(srcRGB + ', ' + dstRGB) === -1, 'unallowed blending combination (srcRGB, dstRGB) = (' + srcRGB + ', ' + dstRGB + ')', env.commandStr);\n              return [blendFuncs[srcRGB], blendFuncs[dstRGB], blendFuncs[srcAlpha], blendFuncs[dstAlpha]];\n            }, function (env, scope, value) {\n              var BLEND_FUNCS = env.constants.blendFuncs;\n              check$1.optional(function () {\n                env.assert(scope, value + '&&typeof ' + value + '===\"object\"', 'invalid blend func, must be an object');\n              });\n\n              function read(prefix, suffix) {\n                var func = scope.def('\"', prefix, suffix, '\" in ', value, '?', value, '.', prefix, suffix, ':', value, '.', prefix);\n                check$1.optional(function () {\n                  env.assert(scope, func + ' in ' + BLEND_FUNCS, 'invalid ' + prop + '.' + prefix + suffix + ', must be one of ' + Object.keys(blendFuncs));\n                });\n                return func;\n              }\n\n              var srcRGB = read('src', 'RGB');\n              var dstRGB = read('dst', 'RGB');\n              check$1.optional(function () {\n                var INVALID_BLEND_COMBINATIONS = env.constants.invalidBlendCombinations;\n                env.assert(scope, INVALID_BLEND_COMBINATIONS + '.indexOf(' + srcRGB + '+\", \"+' + dstRGB + ') === -1 ', 'unallowed blending combination for (srcRGB, dstRGB)');\n              });\n              var SRC_RGB = scope.def(BLEND_FUNCS, '[', srcRGB, ']');\n              var SRC_ALPHA = scope.def(BLEND_FUNCS, '[', read('src', 'Alpha'), ']');\n              var DST_RGB = scope.def(BLEND_FUNCS, '[', dstRGB, ']');\n              var DST_ALPHA = scope.def(BLEND_FUNCS, '[', read('dst', 'Alpha'), ']');\n              return [SRC_RGB, DST_RGB, SRC_ALPHA, DST_ALPHA];\n            });\n\n          case S_BLEND_EQUATION:\n            return parseParam(function (value) {\n              if (typeof value === 'string') {\n                check$1.commandParameter(value, blendEquations, 'invalid ' + prop, env.commandStr);\n                return [blendEquations[value], blendEquations[value]];\n              } else if (typeof value === 'object') {\n                check$1.commandParameter(value.rgb, blendEquations, prop + '.rgb', env.commandStr);\n                check$1.commandParameter(value.alpha, blendEquations, prop + '.alpha', env.commandStr);\n                return [blendEquations[value.rgb], blendEquations[value.alpha]];\n              } else {\n                check$1.commandRaise('invalid blend.equation', env.commandStr);\n              }\n            }, function (env, scope, value) {\n              var BLEND_EQUATIONS = env.constants.blendEquations;\n              var RGB = scope.def();\n              var ALPHA = scope.def();\n              var ifte = env.cond('typeof ', value, '===\"string\"');\n              check$1.optional(function () {\n                function checkProp(block, name, value) {\n                  env.assert(block, value + ' in ' + BLEND_EQUATIONS, 'invalid ' + name + ', must be one of ' + Object.keys(blendEquations));\n                }\n\n                checkProp(ifte.then, prop, value);\n                env.assert(ifte.else, value + '&&typeof ' + value + '===\"object\"', 'invalid ' + prop);\n                checkProp(ifte.else, prop + '.rgb', value + '.rgb');\n                checkProp(ifte.else, prop + '.alpha', value + '.alpha');\n              });\n              ifte.then(RGB, '=', ALPHA, '=', BLEND_EQUATIONS, '[', value, '];');\n              ifte.else(RGB, '=', BLEND_EQUATIONS, '[', value, '.rgb];', ALPHA, '=', BLEND_EQUATIONS, '[', value, '.alpha];');\n              scope(ifte);\n              return [RGB, ALPHA];\n            });\n\n          case S_BLEND_COLOR:\n            return parseParam(function (value) {\n              check$1.command(isArrayLike(value) && value.length === 4, 'blend.color must be a 4d array', env.commandStr);\n              return loop(4, function (i) {\n                return +value[i];\n              });\n            }, function (env, scope, value) {\n              check$1.optional(function () {\n                env.assert(scope, env.shared.isArrayLike + '(' + value + ')&&' + value + '.length===4', 'blend.color must be a 4d array');\n              });\n              return loop(4, function (i) {\n                return scope.def('+', value, '[', i, ']');\n              });\n            });\n\n          case S_STENCIL_MASK:\n            return parseParam(function (value) {\n              check$1.commandType(value, 'number', param, env.commandStr);\n              return value | 0;\n            }, function (env, scope, value) {\n              check$1.optional(function () {\n                env.assert(scope, 'typeof ' + value + '===\"number\"', 'invalid stencil.mask');\n              });\n              return scope.def(value, '|0');\n            });\n\n          case S_STENCIL_FUNC:\n            return parseParam(function (value) {\n              check$1.commandType(value, 'object', param, env.commandStr);\n              var cmp = value.cmp || 'keep';\n              var ref = value.ref || 0;\n              var mask = 'mask' in value ? value.mask : -1;\n              check$1.commandParameter(cmp, compareFuncs, prop + '.cmp', env.commandStr);\n              check$1.commandType(ref, 'number', prop + '.ref', env.commandStr);\n              check$1.commandType(mask, 'number', prop + '.mask', env.commandStr);\n              return [compareFuncs[cmp], ref, mask];\n            }, function (env, scope, value) {\n              var COMPARE_FUNCS = env.constants.compareFuncs;\n              check$1.optional(function () {\n                function assert() {\n                  env.assert(scope, Array.prototype.join.call(arguments, ''), 'invalid stencil.func');\n                }\n\n                assert(value + '&&typeof ', value, '===\"object\"');\n                assert('!(\"cmp\" in ', value, ')||(', value, '.cmp in ', COMPARE_FUNCS, ')');\n              });\n              var cmp = scope.def('\"cmp\" in ', value, '?', COMPARE_FUNCS, '[', value, '.cmp]', ':', GL_KEEP);\n              var ref = scope.def(value, '.ref|0');\n              var mask = scope.def('\"mask\" in ', value, '?', value, '.mask|0:-1');\n              return [cmp, ref, mask];\n            });\n\n          case S_STENCIL_OPFRONT:\n          case S_STENCIL_OPBACK:\n            return parseParam(function (value) {\n              check$1.commandType(value, 'object', param, env.commandStr);\n              var fail = value.fail || 'keep';\n              var zfail = value.zfail || 'keep';\n              var zpass = value.zpass || 'keep';\n              check$1.commandParameter(fail, stencilOps, prop + '.fail', env.commandStr);\n              check$1.commandParameter(zfail, stencilOps, prop + '.zfail', env.commandStr);\n              check$1.commandParameter(zpass, stencilOps, prop + '.zpass', env.commandStr);\n              return [prop === S_STENCIL_OPBACK ? GL_BACK : GL_FRONT, stencilOps[fail], stencilOps[zfail], stencilOps[zpass]];\n            }, function (env, scope, value) {\n              var STENCIL_OPS = env.constants.stencilOps;\n              check$1.optional(function () {\n                env.assert(scope, value + '&&typeof ' + value + '===\"object\"', 'invalid ' + prop);\n              });\n\n              function read(name) {\n                check$1.optional(function () {\n                  env.assert(scope, '!(\"' + name + '\" in ' + value + ')||' + '(' + value + '.' + name + ' in ' + STENCIL_OPS + ')', 'invalid ' + prop + '.' + name + ', must be one of ' + Object.keys(stencilOps));\n                });\n                return scope.def('\"', name, '\" in ', value, '?', STENCIL_OPS, '[', value, '.', name, ']:', GL_KEEP);\n              }\n\n              return [prop === S_STENCIL_OPBACK ? GL_BACK : GL_FRONT, read('fail'), read('zfail'), read('zpass')];\n            });\n\n          case S_POLYGON_OFFSET_OFFSET:\n            return parseParam(function (value) {\n              check$1.commandType(value, 'object', param, env.commandStr);\n              var factor = value.factor | 0;\n              var units = value.units | 0;\n              check$1.commandType(factor, 'number', param + '.factor', env.commandStr);\n              check$1.commandType(units, 'number', param + '.units', env.commandStr);\n              return [factor, units];\n            }, function (env, scope, value) {\n              check$1.optional(function () {\n                env.assert(scope, value + '&&typeof ' + value + '===\"object\"', 'invalid ' + prop);\n              });\n              var FACTOR = scope.def(value, '.factor|0');\n              var UNITS = scope.def(value, '.units|0');\n              return [FACTOR, UNITS];\n            });\n\n          case S_CULL_FACE:\n            return parseParam(function (value) {\n              var face = 0;\n\n              if (value === 'front') {\n                face = GL_FRONT;\n              } else if (value === 'back') {\n                face = GL_BACK;\n              }\n\n              check$1.command(!!face, param, env.commandStr);\n              return face;\n            }, function (env, scope, value) {\n              check$1.optional(function () {\n                env.assert(scope, value + '===\"front\"||' + value + '===\"back\"', 'invalid cull.face');\n              });\n              return scope.def(value, '===\"front\"?', GL_FRONT, ':', GL_BACK);\n            });\n\n          case S_LINE_WIDTH:\n            return parseParam(function (value) {\n              check$1.command(typeof value === 'number' && value >= limits.lineWidthDims[0] && value <= limits.lineWidthDims[1], 'invalid line width, must be a positive number between ' + limits.lineWidthDims[0] + ' and ' + limits.lineWidthDims[1], env.commandStr);\n              return value;\n            }, function (env, scope, value) {\n              check$1.optional(function () {\n                env.assert(scope, 'typeof ' + value + '===\"number\"&&' + value + '>=' + limits.lineWidthDims[0] + '&&' + value + '<=' + limits.lineWidthDims[1], 'invalid line width');\n              });\n              return value;\n            });\n\n          case S_FRONT_FACE:\n            return parseParam(function (value) {\n              check$1.commandParameter(value, orientationType, param, env.commandStr);\n              return orientationType[value];\n            }, function (env, scope, value) {\n              check$1.optional(function () {\n                env.assert(scope, value + '===\"cw\"||' + value + '===\"ccw\"', 'invalid frontFace, must be one of cw,ccw');\n              });\n              return scope.def(value + '===\"cw\"?' + GL_CW + ':' + GL_CCW);\n            });\n\n          case S_COLOR_MASK:\n            return parseParam(function (value) {\n              check$1.command(isArrayLike(value) && value.length === 4, 'color.mask must be length 4 array', env.commandStr);\n              return value.map(function (v) {\n                return !!v;\n              });\n            }, function (env, scope, value) {\n              check$1.optional(function () {\n                env.assert(scope, env.shared.isArrayLike + '(' + value + ')&&' + value + '.length===4', 'invalid color.mask');\n              });\n              return loop(4, function (i) {\n                return '!!' + value + '[' + i + ']';\n              });\n            });\n\n          case S_SAMPLE_COVERAGE:\n            return parseParam(function (value) {\n              check$1.command(typeof value === 'object' && value, param, env.commandStr);\n              var sampleValue = 'value' in value ? value.value : 1;\n              var sampleInvert = !!value.invert;\n              check$1.command(typeof sampleValue === 'number' && sampleValue >= 0 && sampleValue <= 1, 'sample.coverage.value must be a number between 0 and 1', env.commandStr);\n              return [sampleValue, sampleInvert];\n            }, function (env, scope, value) {\n              check$1.optional(function () {\n                env.assert(scope, value + '&&typeof ' + value + '===\"object\"', 'invalid sample.coverage');\n              });\n              var VALUE = scope.def('\"value\" in ', value, '?+', value, '.value:1');\n              var INVERT = scope.def('!!', value, '.invert');\n              return [VALUE, INVERT];\n            });\n        }\n      });\n      return STATE;\n    }\n\n    function parseUniforms(uniforms, env) {\n      var staticUniforms = uniforms.static;\n      var dynamicUniforms = uniforms.dynamic;\n      var UNIFORMS = {};\n      Object.keys(staticUniforms).forEach(function (name) {\n        var value = staticUniforms[name];\n        var result;\n\n        if (typeof value === 'number' || typeof value === 'boolean') {\n          result = createStaticDecl(function () {\n            return value;\n          });\n        } else if (typeof value === 'function') {\n          var reglType = value._reglType;\n\n          if (reglType === 'texture2d' || reglType === 'textureCube') {\n            result = createStaticDecl(function (env) {\n              return env.link(value);\n            });\n          } else if (reglType === 'framebuffer' || reglType === 'framebufferCube') {\n            check$1.command(value.color.length > 0, 'missing color attachment for framebuffer sent to uniform \"' + name + '\"', env.commandStr);\n            result = createStaticDecl(function (env) {\n              return env.link(value.color[0]);\n            });\n          } else {\n            check$1.commandRaise('invalid data for uniform \"' + name + '\"', env.commandStr);\n          }\n        } else if (isArrayLike(value)) {\n          result = createStaticDecl(function (env) {\n            var ITEM = env.global.def('[', loop(value.length, function (i) {\n              check$1.command(typeof value[i] === 'number' || typeof value[i] === 'boolean', 'invalid uniform ' + name, env.commandStr);\n              return value[i];\n            }), ']');\n            return ITEM;\n          });\n        } else {\n          check$1.commandRaise('invalid or missing data for uniform \"' + name + '\"', env.commandStr);\n        }\n\n        result.value = value;\n        UNIFORMS[name] = result;\n      });\n      Object.keys(dynamicUniforms).forEach(function (key) {\n        var dyn = dynamicUniforms[key];\n        UNIFORMS[key] = createDynamicDecl(dyn, function (env, scope) {\n          return env.invoke(scope, dyn);\n        });\n      });\n      return UNIFORMS;\n    }\n\n    function parseAttributes(attributes, env) {\n      var staticAttributes = attributes.static;\n      var dynamicAttributes = attributes.dynamic;\n      var attributeDefs = {};\n      Object.keys(staticAttributes).forEach(function (attribute) {\n        var value = staticAttributes[attribute];\n        var id = stringStore.id(attribute);\n        var record = new AttributeRecord();\n\n        if (isBufferArgs(value)) {\n          record.state = ATTRIB_STATE_POINTER;\n          record.buffer = bufferState.getBuffer(bufferState.create(value, GL_ARRAY_BUFFER$1, false, true));\n          record.type = 0;\n        } else {\n          var buffer = bufferState.getBuffer(value);\n\n          if (buffer) {\n            record.state = ATTRIB_STATE_POINTER;\n            record.buffer = buffer;\n            record.type = 0;\n          } else {\n            check$1.command(typeof value === 'object' && value, 'invalid data for attribute ' + attribute, env.commandStr);\n\n            if ('constant' in value) {\n              var constant = value.constant;\n              record.buffer = 'null';\n              record.state = ATTRIB_STATE_CONSTANT;\n\n              if (typeof constant === 'number') {\n                record.x = constant;\n              } else {\n                check$1.command(isArrayLike(constant) && constant.length > 0 && constant.length <= 4, 'invalid constant for attribute ' + attribute, env.commandStr);\n                CUTE_COMPONENTS.forEach(function (c, i) {\n                  if (i < constant.length) {\n                    record[c] = constant[i];\n                  }\n                });\n              }\n            } else {\n              if (isBufferArgs(value.buffer)) {\n                buffer = bufferState.getBuffer(bufferState.create(value.buffer, GL_ARRAY_BUFFER$1, false, true));\n              } else {\n                buffer = bufferState.getBuffer(value.buffer);\n              }\n\n              check$1.command(!!buffer, 'missing buffer for attribute \"' + attribute + '\"', env.commandStr);\n              var offset = value.offset | 0;\n              check$1.command(offset >= 0, 'invalid offset for attribute \"' + attribute + '\"', env.commandStr);\n              var stride = value.stride | 0;\n              check$1.command(stride >= 0 && stride < 256, 'invalid stride for attribute \"' + attribute + '\", must be integer betweeen [0, 255]', env.commandStr);\n              var size = value.size | 0;\n              check$1.command(!('size' in value) || size > 0 && size <= 4, 'invalid size for attribute \"' + attribute + '\", must be 1,2,3,4', env.commandStr);\n              var normalized = !!value.normalized;\n              var type = 0;\n\n              if ('type' in value) {\n                check$1.commandParameter(value.type, glTypes, 'invalid type for attribute ' + attribute, env.commandStr);\n                type = glTypes[value.type];\n              }\n\n              var divisor = value.divisor | 0;\n\n              if ('divisor' in value) {\n                check$1.command(divisor === 0 || extInstancing, 'cannot specify divisor for attribute \"' + attribute + '\", instancing not supported', env.commandStr);\n                check$1.command(divisor >= 0, 'invalid divisor for attribute \"' + attribute + '\"', env.commandStr);\n              }\n\n              check$1.optional(function () {\n                var command = env.commandStr;\n                var VALID_KEYS = ['buffer', 'offset', 'divisor', 'normalized', 'type', 'size', 'stride'];\n                Object.keys(value).forEach(function (prop) {\n                  check$1.command(VALID_KEYS.indexOf(prop) >= 0, 'unknown parameter \"' + prop + '\" for attribute pointer \"' + attribute + '\" (valid parameters are ' + VALID_KEYS + ')', command);\n                });\n              });\n              record.buffer = buffer;\n              record.state = ATTRIB_STATE_POINTER;\n              record.size = size;\n              record.normalized = normalized;\n              record.type = type || buffer.dtype;\n              record.offset = offset;\n              record.stride = stride;\n              record.divisor = divisor;\n            }\n          }\n        }\n\n        attributeDefs[attribute] = createStaticDecl(function (env, scope) {\n          var cache = env.attribCache;\n\n          if (id in cache) {\n            return cache[id];\n          }\n\n          var result = {\n            isStream: false\n          };\n          Object.keys(record).forEach(function (key) {\n            result[key] = record[key];\n          });\n\n          if (record.buffer) {\n            result.buffer = env.link(record.buffer);\n            result.type = result.type || result.buffer + '.dtype';\n          }\n\n          cache[id] = result;\n          return result;\n        });\n      });\n      Object.keys(dynamicAttributes).forEach(function (attribute) {\n        var dyn = dynamicAttributes[attribute];\n\n        function appendAttributeCode(env, block) {\n          var VALUE = env.invoke(block, dyn);\n          var shared = env.shared;\n          var IS_BUFFER_ARGS = shared.isBufferArgs;\n          var BUFFER_STATE = shared.buffer; // Perform validation on attribute\n\n          check$1.optional(function () {\n            env.assert(block, VALUE + '&&(typeof ' + VALUE + '===\"object\"||typeof ' + VALUE + '===\"function\")&&(' + IS_BUFFER_ARGS + '(' + VALUE + ')||' + BUFFER_STATE + '.getBuffer(' + VALUE + ')||' + BUFFER_STATE + '.getBuffer(' + VALUE + '.buffer)||' + IS_BUFFER_ARGS + '(' + VALUE + '.buffer)||' + '(\"constant\" in ' + VALUE + '&&(typeof ' + VALUE + '.constant===\"number\"||' + shared.isArrayLike + '(' + VALUE + '.constant))))', 'invalid dynamic attribute \"' + attribute + '\"');\n          }); // allocate names for result\n\n          var result = {\n            isStream: block.def(false)\n          };\n          var defaultRecord = new AttributeRecord();\n          defaultRecord.state = ATTRIB_STATE_POINTER;\n          Object.keys(defaultRecord).forEach(function (key) {\n            result[key] = block.def('' + defaultRecord[key]);\n          });\n          var BUFFER = result.buffer;\n          var TYPE = result.type;\n          block('if(', IS_BUFFER_ARGS, '(', VALUE, ')){', result.isStream, '=true;', BUFFER, '=', BUFFER_STATE, '.createStream(', GL_ARRAY_BUFFER$1, ',', VALUE, ');', TYPE, '=', BUFFER, '.dtype;', '}else{', BUFFER, '=', BUFFER_STATE, '.getBuffer(', VALUE, ');', 'if(', BUFFER, '){', TYPE, '=', BUFFER, '.dtype;', '}else if(\"constant\" in ', VALUE, '){', result.state, '=', ATTRIB_STATE_CONSTANT, ';', 'if(typeof ' + VALUE + '.constant === \"number\"){', result[CUTE_COMPONENTS[0]], '=', VALUE, '.constant;', CUTE_COMPONENTS.slice(1).map(function (n) {\n            return result[n];\n          }).join('='), '=0;', '}else{', CUTE_COMPONENTS.map(function (name, i) {\n            return result[name] + '=' + VALUE + '.constant.length>' + i + '?' + VALUE + '.constant[' + i + ']:0;';\n          }).join(''), '}}else{', 'if(', IS_BUFFER_ARGS, '(', VALUE, '.buffer)){', BUFFER, '=', BUFFER_STATE, '.createStream(', GL_ARRAY_BUFFER$1, ',', VALUE, '.buffer);', '}else{', BUFFER, '=', BUFFER_STATE, '.getBuffer(', VALUE, '.buffer);', '}', TYPE, '=\"type\" in ', VALUE, '?', shared.glTypes, '[', VALUE, '.type]:', BUFFER, '.dtype;', result.normalized, '=!!', VALUE, '.normalized;');\n\n          function emitReadRecord(name) {\n            block(result[name], '=', VALUE, '.', name, '|0;');\n          }\n\n          emitReadRecord('size');\n          emitReadRecord('offset');\n          emitReadRecord('stride');\n          emitReadRecord('divisor');\n          block('}}');\n          block.exit('if(', result.isStream, '){', BUFFER_STATE, '.destroyStream(', BUFFER, ');', '}');\n          return result;\n        }\n\n        attributeDefs[attribute] = createDynamicDecl(dyn, appendAttributeCode);\n      });\n      return attributeDefs;\n    }\n\n    function parseContext(context) {\n      var staticContext = context.static;\n      var dynamicContext = context.dynamic;\n      var result = {};\n      Object.keys(staticContext).forEach(function (name) {\n        var value = staticContext[name];\n        result[name] = createStaticDecl(function (env, scope) {\n          if (typeof value === 'number' || typeof value === 'boolean') {\n            return '' + value;\n          } else {\n            return env.link(value);\n          }\n        });\n      });\n      Object.keys(dynamicContext).forEach(function (name) {\n        var dyn = dynamicContext[name];\n        result[name] = createDynamicDecl(dyn, function (env, scope) {\n          return env.invoke(scope, dyn);\n        });\n      });\n      return result;\n    }\n\n    function parseArguments(options, attributes, uniforms, context, env) {\n      var staticOptions = options.static;\n      var dynamicOptions = options.dynamic;\n      check$1.optional(function () {\n        var KEY_NAMES = [S_FRAMEBUFFER, S_VERT, S_FRAG, S_ELEMENTS, S_PRIMITIVE, S_OFFSET, S_COUNT, S_INSTANCES, S_PROFILE].concat(GL_STATE_NAMES);\n\n        function checkKeys(dict) {\n          Object.keys(dict).forEach(function (key) {\n            check$1.command(KEY_NAMES.indexOf(key) >= 0, 'unknown parameter \"' + key + '\"', env.commandStr);\n          });\n        }\n\n        checkKeys(staticOptions);\n        checkKeys(dynamicOptions);\n      });\n      var framebuffer = parseFramebuffer(options, env);\n      var viewportAndScissor = parseViewportScissor(options, framebuffer, env);\n      var draw = parseDraw(options, env);\n      var state = parseGLState(options, env);\n      var shader = parseProgram(options, env);\n\n      function copyBox(name) {\n        var defn = viewportAndScissor[name];\n\n        if (defn) {\n          state[name] = defn;\n        }\n      }\n\n      copyBox(S_VIEWPORT);\n      copyBox(propName(S_SCISSOR_BOX));\n      var dirty = Object.keys(state).length > 0;\n      var result = {\n        framebuffer: framebuffer,\n        draw: draw,\n        shader: shader,\n        state: state,\n        dirty: dirty\n      };\n      result.profile = parseProfile(options, env);\n      result.uniforms = parseUniforms(uniforms, env);\n      result.attributes = parseAttributes(attributes, env);\n      result.context = parseContext(context, env);\n      return result;\n    } // ===================================================\n    // ===================================================\n    // COMMON UPDATE FUNCTIONS\n    // ===================================================\n    // ===================================================\n\n\n    function emitContext(env, scope, context) {\n      var shared = env.shared;\n      var CONTEXT = shared.context;\n      var contextEnter = env.scope();\n      Object.keys(context).forEach(function (name) {\n        scope.save(CONTEXT, '.' + name);\n        var defn = context[name];\n        contextEnter(CONTEXT, '.', name, '=', defn.append(env, scope), ';');\n      });\n      scope(contextEnter);\n    } // ===================================================\n    // ===================================================\n    // COMMON DRAWING FUNCTIONS\n    // ===================================================\n    // ===================================================\n\n\n    function emitPollFramebuffer(env, scope, framebuffer, skipCheck) {\n      var shared = env.shared;\n      var GL = shared.gl;\n      var FRAMEBUFFER_STATE = shared.framebuffer;\n      var EXT_DRAW_BUFFERS;\n\n      if (extDrawBuffers) {\n        EXT_DRAW_BUFFERS = scope.def(shared.extensions, '.webgl_draw_buffers');\n      }\n\n      var constants = env.constants;\n      var DRAW_BUFFERS = constants.drawBuffer;\n      var BACK_BUFFER = constants.backBuffer;\n      var NEXT;\n\n      if (framebuffer) {\n        NEXT = framebuffer.append(env, scope);\n      } else {\n        NEXT = scope.def(FRAMEBUFFER_STATE, '.next');\n      }\n\n      if (!skipCheck) {\n        scope('if(', NEXT, '!==', FRAMEBUFFER_STATE, '.cur){');\n      }\n\n      scope('if(', NEXT, '){', GL, '.bindFramebuffer(', GL_FRAMEBUFFER$2, ',', NEXT, '.framebuffer);');\n\n      if (extDrawBuffers) {\n        scope(EXT_DRAW_BUFFERS, '.drawBuffersWEBGL(', DRAW_BUFFERS, '[', NEXT, '.colorAttachments.length]);');\n      }\n\n      scope('}else{', GL, '.bindFramebuffer(', GL_FRAMEBUFFER$2, ',null);');\n\n      if (extDrawBuffers) {\n        scope(EXT_DRAW_BUFFERS, '.drawBuffersWEBGL(', BACK_BUFFER, ');');\n      }\n\n      scope('}', FRAMEBUFFER_STATE, '.cur=', NEXT, ';');\n\n      if (!skipCheck) {\n        scope('}');\n      }\n    }\n\n    function emitPollState(env, scope, args) {\n      var shared = env.shared;\n      var GL = shared.gl;\n      var CURRENT_VARS = env.current;\n      var NEXT_VARS = env.next;\n      var CURRENT_STATE = shared.current;\n      var NEXT_STATE = shared.next;\n      var block = env.cond(CURRENT_STATE, '.dirty');\n      GL_STATE_NAMES.forEach(function (prop) {\n        var param = propName(prop);\n\n        if (param in args.state) {\n          return;\n        }\n\n        var NEXT, CURRENT;\n\n        if (param in NEXT_VARS) {\n          NEXT = NEXT_VARS[param];\n          CURRENT = CURRENT_VARS[param];\n          var parts = loop(currentState[param].length, function (i) {\n            return block.def(NEXT, '[', i, ']');\n          });\n          block(env.cond(parts.map(function (p, i) {\n            return p + '!==' + CURRENT + '[' + i + ']';\n          }).join('||')).then(GL, '.', GL_VARIABLES[param], '(', parts, ');', parts.map(function (p, i) {\n            return CURRENT + '[' + i + ']=' + p;\n          }).join(';'), ';'));\n        } else {\n          NEXT = block.def(NEXT_STATE, '.', param);\n          var ifte = env.cond(NEXT, '!==', CURRENT_STATE, '.', param);\n          block(ifte);\n\n          if (param in GL_FLAGS) {\n            ifte(env.cond(NEXT).then(GL, '.enable(', GL_FLAGS[param], ');').else(GL, '.disable(', GL_FLAGS[param], ');'), CURRENT_STATE, '.', param, '=', NEXT, ';');\n          } else {\n            ifte(GL, '.', GL_VARIABLES[param], '(', NEXT, ');', CURRENT_STATE, '.', param, '=', NEXT, ';');\n          }\n        }\n      });\n\n      if (Object.keys(args.state).length === 0) {\n        block(CURRENT_STATE, '.dirty=false;');\n      }\n\n      scope(block);\n    }\n\n    function emitSetOptions(env, scope, options, filter) {\n      var shared = env.shared;\n      var CURRENT_VARS = env.current;\n      var CURRENT_STATE = shared.current;\n      var GL = shared.gl;\n      sortState(Object.keys(options)).forEach(function (param) {\n        var defn = options[param];\n\n        if (filter && !filter(defn)) {\n          return;\n        }\n\n        var variable = defn.append(env, scope);\n\n        if (GL_FLAGS[param]) {\n          var flag = GL_FLAGS[param];\n\n          if (isStatic(defn)) {\n            if (variable) {\n              scope(GL, '.enable(', flag, ');');\n            } else {\n              scope(GL, '.disable(', flag, ');');\n            }\n          } else {\n            scope(env.cond(variable).then(GL, '.enable(', flag, ');').else(GL, '.disable(', flag, ');'));\n          }\n\n          scope(CURRENT_STATE, '.', param, '=', variable, ';');\n        } else if (isArrayLike(variable)) {\n          var CURRENT = CURRENT_VARS[param];\n          scope(GL, '.', GL_VARIABLES[param], '(', variable, ');', variable.map(function (v, i) {\n            return CURRENT + '[' + i + ']=' + v;\n          }).join(';'), ';');\n        } else {\n          scope(GL, '.', GL_VARIABLES[param], '(', variable, ');', CURRENT_STATE, '.', param, '=', variable, ';');\n        }\n      });\n    }\n\n    function injectExtensions(env, scope) {\n      if (extInstancing) {\n        env.instancing = scope.def(env.shared.extensions, '.angle_instanced_arrays');\n      }\n    }\n\n    function emitProfile(env, scope, args, useScope, incrementCounter) {\n      var shared = env.shared;\n      var STATS = env.stats;\n      var CURRENT_STATE = shared.current;\n      var TIMER = shared.timer;\n      var profileArg = args.profile;\n\n      function perfCounter() {\n        if (typeof performance === 'undefined') {\n          return 'Date.now()';\n        } else {\n          return 'performance.now()';\n        }\n      }\n\n      var CPU_START, QUERY_COUNTER;\n\n      function emitProfileStart(block) {\n        CPU_START = scope.def();\n        block(CPU_START, '=', perfCounter(), ';');\n\n        if (typeof incrementCounter === 'string') {\n          block(STATS, '.count+=', incrementCounter, ';');\n        } else {\n          block(STATS, '.count++;');\n        }\n\n        if (timer) {\n          if (useScope) {\n            QUERY_COUNTER = scope.def();\n            block(QUERY_COUNTER, '=', TIMER, '.getNumPendingQueries();');\n          } else {\n            block(TIMER, '.beginQuery(', STATS, ');');\n          }\n        }\n      }\n\n      function emitProfileEnd(block) {\n        block(STATS, '.cpuTime+=', perfCounter(), '-', CPU_START, ';');\n\n        if (timer) {\n          if (useScope) {\n            block(TIMER, '.pushScopeStats(', QUERY_COUNTER, ',', TIMER, '.getNumPendingQueries(),', STATS, ');');\n          } else {\n            block(TIMER, '.endQuery();');\n          }\n        }\n      }\n\n      function scopeProfile(value) {\n        var prev = scope.def(CURRENT_STATE, '.profile');\n        scope(CURRENT_STATE, '.profile=', value, ';');\n        scope.exit(CURRENT_STATE, '.profile=', prev, ';');\n      }\n\n      var USE_PROFILE;\n\n      if (profileArg) {\n        if (isStatic(profileArg)) {\n          if (profileArg.enable) {\n            emitProfileStart(scope);\n            emitProfileEnd(scope.exit);\n            scopeProfile('true');\n          } else {\n            scopeProfile('false');\n          }\n\n          return;\n        }\n\n        USE_PROFILE = profileArg.append(env, scope);\n        scopeProfile(USE_PROFILE);\n      } else {\n        USE_PROFILE = scope.def(CURRENT_STATE, '.profile');\n      }\n\n      var start = env.block();\n      emitProfileStart(start);\n      scope('if(', USE_PROFILE, '){', start, '}');\n      var end = env.block();\n      emitProfileEnd(end);\n      scope.exit('if(', USE_PROFILE, '){', end, '}');\n    }\n\n    function emitAttributes(env, scope, args, attributes, filter) {\n      var shared = env.shared;\n\n      function typeLength(x) {\n        switch (x) {\n          case GL_FLOAT_VEC2:\n          case GL_INT_VEC2:\n          case GL_BOOL_VEC2:\n            return 2;\n\n          case GL_FLOAT_VEC3:\n          case GL_INT_VEC3:\n          case GL_BOOL_VEC3:\n            return 3;\n\n          case GL_FLOAT_VEC4:\n          case GL_INT_VEC4:\n          case GL_BOOL_VEC4:\n            return 4;\n\n          default:\n            return 1;\n        }\n      }\n\n      function emitBindAttribute(ATTRIBUTE, size, record) {\n        var GL = shared.gl;\n        var LOCATION = scope.def(ATTRIBUTE, '.location');\n        var BINDING = scope.def(shared.attributes, '[', LOCATION, ']');\n        var STATE = record.state;\n        var BUFFER = record.buffer;\n        var CONST_COMPONENTS = [record.x, record.y, record.z, record.w];\n        var COMMON_KEYS = ['buffer', 'normalized', 'offset', 'stride'];\n\n        function emitBuffer() {\n          scope('if(!', BINDING, '.buffer){', GL, '.enableVertexAttribArray(', LOCATION, ');}');\n          var TYPE = record.type;\n          var SIZE;\n\n          if (!record.size) {\n            SIZE = size;\n          } else {\n            SIZE = scope.def(record.size, '||', size);\n          }\n\n          scope('if(', BINDING, '.type!==', TYPE, '||', BINDING, '.size!==', SIZE, '||', COMMON_KEYS.map(function (key) {\n            return BINDING + '.' + key + '!==' + record[key];\n          }).join('||'), '){', GL, '.bindBuffer(', GL_ARRAY_BUFFER$1, ',', BUFFER, '.buffer);', GL, '.vertexAttribPointer(', [LOCATION, SIZE, TYPE, record.normalized, record.stride, record.offset], ');', BINDING, '.type=', TYPE, ';', BINDING, '.size=', SIZE, ';', COMMON_KEYS.map(function (key) {\n            return BINDING + '.' + key + '=' + record[key] + ';';\n          }).join(''), '}');\n\n          if (extInstancing) {\n            var DIVISOR = record.divisor;\n            scope('if(', BINDING, '.divisor!==', DIVISOR, '){', env.instancing, '.vertexAttribDivisorANGLE(', [LOCATION, DIVISOR], ');', BINDING, '.divisor=', DIVISOR, ';}');\n          }\n        }\n\n        function emitConstant() {\n          scope('if(', BINDING, '.buffer){', GL, '.disableVertexAttribArray(', LOCATION, ');', '}if(', CUTE_COMPONENTS.map(function (c, i) {\n            return BINDING + '.' + c + '!==' + CONST_COMPONENTS[i];\n          }).join('||'), '){', GL, '.vertexAttrib4f(', LOCATION, ',', CONST_COMPONENTS, ');', CUTE_COMPONENTS.map(function (c, i) {\n            return BINDING + '.' + c + '=' + CONST_COMPONENTS[i] + ';';\n          }).join(''), '}');\n        }\n\n        if (STATE === ATTRIB_STATE_POINTER) {\n          emitBuffer();\n        } else if (STATE === ATTRIB_STATE_CONSTANT) {\n          emitConstant();\n        } else {\n          scope('if(', STATE, '===', ATTRIB_STATE_POINTER, '){');\n          emitBuffer();\n          scope('}else{');\n          emitConstant();\n          scope('}');\n        }\n      }\n\n      attributes.forEach(function (attribute) {\n        var name = attribute.name;\n        var arg = args.attributes[name];\n        var record;\n\n        if (arg) {\n          if (!filter(arg)) {\n            return;\n          }\n\n          record = arg.append(env, scope);\n        } else {\n          if (!filter(SCOPE_DECL)) {\n            return;\n          }\n\n          var scopeAttrib = env.scopeAttrib(name);\n          check$1.optional(function () {\n            env.assert(scope, scopeAttrib + '.state', 'missing attribute ' + name);\n          });\n          record = {};\n          Object.keys(new AttributeRecord()).forEach(function (key) {\n            record[key] = scope.def(scopeAttrib, '.', key);\n          });\n        }\n\n        emitBindAttribute(env.link(attribute), typeLength(attribute.info.type), record);\n      });\n    }\n\n    function emitUniforms(env, scope, args, uniforms, filter) {\n      var shared = env.shared;\n      var GL = shared.gl;\n      var infix;\n\n      for (var i = 0; i < uniforms.length; ++i) {\n        var uniform = uniforms[i];\n        var name = uniform.name;\n        var type = uniform.info.type;\n        var arg = args.uniforms[name];\n        var UNIFORM = env.link(uniform);\n        var LOCATION = UNIFORM + '.location';\n        var VALUE;\n\n        if (arg) {\n          if (!filter(arg)) {\n            continue;\n          }\n\n          if (isStatic(arg)) {\n            var value = arg.value;\n            check$1.command(value !== null && typeof value !== 'undefined', 'missing uniform \"' + name + '\"', env.commandStr);\n\n            if (type === GL_SAMPLER_2D || type === GL_SAMPLER_CUBE) {\n              check$1.command(typeof value === 'function' && (type === GL_SAMPLER_2D && (value._reglType === 'texture2d' || value._reglType === 'framebuffer') || type === GL_SAMPLER_CUBE && (value._reglType === 'textureCube' || value._reglType === 'framebufferCube')), 'invalid texture for uniform ' + name, env.commandStr);\n              var TEX_VALUE = env.link(value._texture || value.color[0]._texture);\n              scope(GL, '.uniform1i(', LOCATION, ',', TEX_VALUE + '.bind());');\n              scope.exit(TEX_VALUE, '.unbind();');\n            } else if (type === GL_FLOAT_MAT2 || type === GL_FLOAT_MAT3 || type === GL_FLOAT_MAT4) {\n              check$1.optional(function () {\n                check$1.command(isArrayLike(value), 'invalid matrix for uniform ' + name, env.commandStr);\n                check$1.command(type === GL_FLOAT_MAT2 && value.length === 4 || type === GL_FLOAT_MAT3 && value.length === 9 || type === GL_FLOAT_MAT4 && value.length === 16, 'invalid length for matrix uniform ' + name, env.commandStr);\n              });\n              var MAT_VALUE = env.global.def('new Float32Array([' + Array.prototype.slice.call(value) + '])');\n              var dim = 2;\n\n              if (type === GL_FLOAT_MAT3) {\n                dim = 3;\n              } else if (type === GL_FLOAT_MAT4) {\n                dim = 4;\n              }\n\n              scope(GL, '.uniformMatrix', dim, 'fv(', LOCATION, ',false,', MAT_VALUE, ');');\n            } else {\n              switch (type) {\n                case GL_FLOAT$8:\n                  check$1.commandType(value, 'number', 'uniform ' + name, env.commandStr);\n                  infix = '1f';\n                  break;\n\n                case GL_FLOAT_VEC2:\n                  check$1.command(isArrayLike(value) && value.length === 2, 'uniform ' + name, env.commandStr);\n                  infix = '2f';\n                  break;\n\n                case GL_FLOAT_VEC3:\n                  check$1.command(isArrayLike(value) && value.length === 3, 'uniform ' + name, env.commandStr);\n                  infix = '3f';\n                  break;\n\n                case GL_FLOAT_VEC4:\n                  check$1.command(isArrayLike(value) && value.length === 4, 'uniform ' + name, env.commandStr);\n                  infix = '4f';\n                  break;\n\n                case GL_BOOL:\n                  check$1.commandType(value, 'boolean', 'uniform ' + name, env.commandStr);\n                  infix = '1i';\n                  break;\n\n                case GL_INT$3:\n                  check$1.commandType(value, 'number', 'uniform ' + name, env.commandStr);\n                  infix = '1i';\n                  break;\n\n                case GL_BOOL_VEC2:\n                  check$1.command(isArrayLike(value) && value.length === 2, 'uniform ' + name, env.commandStr);\n                  infix = '2i';\n                  break;\n\n                case GL_INT_VEC2:\n                  check$1.command(isArrayLike(value) && value.length === 2, 'uniform ' + name, env.commandStr);\n                  infix = '2i';\n                  break;\n\n                case GL_BOOL_VEC3:\n                  check$1.command(isArrayLike(value) && value.length === 3, 'uniform ' + name, env.commandStr);\n                  infix = '3i';\n                  break;\n\n                case GL_INT_VEC3:\n                  check$1.command(isArrayLike(value) && value.length === 3, 'uniform ' + name, env.commandStr);\n                  infix = '3i';\n                  break;\n\n                case GL_BOOL_VEC4:\n                  check$1.command(isArrayLike(value) && value.length === 4, 'uniform ' + name, env.commandStr);\n                  infix = '4i';\n                  break;\n\n                case GL_INT_VEC4:\n                  check$1.command(isArrayLike(value) && value.length === 4, 'uniform ' + name, env.commandStr);\n                  infix = '4i';\n                  break;\n              }\n\n              scope(GL, '.uniform', infix, '(', LOCATION, ',', isArrayLike(value) ? Array.prototype.slice.call(value) : value, ');');\n            }\n\n            continue;\n          } else {\n            VALUE = arg.append(env, scope);\n          }\n        } else {\n          if (!filter(SCOPE_DECL)) {\n            continue;\n          }\n\n          VALUE = scope.def(shared.uniforms, '[', stringStore.id(name), ']');\n        }\n\n        if (type === GL_SAMPLER_2D) {\n          scope('if(', VALUE, '&&', VALUE, '._reglType===\"framebuffer\"){', VALUE, '=', VALUE, '.color[0];', '}');\n        } else if (type === GL_SAMPLER_CUBE) {\n          scope('if(', VALUE, '&&', VALUE, '._reglType===\"framebufferCube\"){', VALUE, '=', VALUE, '.color[0];', '}');\n        } // perform type validation\n\n\n        check$1.optional(function () {\n          function check(pred, message) {\n            env.assert(scope, pred, 'bad data or missing for uniform \"' + name + '\".  ' + message);\n          }\n\n          function checkType(type) {\n            check('typeof ' + VALUE + '===\"' + type + '\"', 'invalid type, expected ' + type);\n          }\n\n          function checkVector(n, type) {\n            check(shared.isArrayLike + '(' + VALUE + ')&&' + VALUE + '.length===' + n, 'invalid vector, should have length ' + n, env.commandStr);\n          }\n\n          function checkTexture(target) {\n            check('typeof ' + VALUE + '===\"function\"&&' + VALUE + '._reglType===\"texture' + (target === GL_TEXTURE_2D$3 ? '2d' : 'Cube') + '\"', 'invalid texture type', env.commandStr);\n          }\n\n          switch (type) {\n            case GL_INT$3:\n              checkType('number');\n              break;\n\n            case GL_INT_VEC2:\n              checkVector(2, 'number');\n              break;\n\n            case GL_INT_VEC3:\n              checkVector(3, 'number');\n              break;\n\n            case GL_INT_VEC4:\n              checkVector(4, 'number');\n              break;\n\n            case GL_FLOAT$8:\n              checkType('number');\n              break;\n\n            case GL_FLOAT_VEC2:\n              checkVector(2, 'number');\n              break;\n\n            case GL_FLOAT_VEC3:\n              checkVector(3, 'number');\n              break;\n\n            case GL_FLOAT_VEC4:\n              checkVector(4, 'number');\n              break;\n\n            case GL_BOOL:\n              checkType('boolean');\n              break;\n\n            case GL_BOOL_VEC2:\n              checkVector(2, 'boolean');\n              break;\n\n            case GL_BOOL_VEC3:\n              checkVector(3, 'boolean');\n              break;\n\n            case GL_BOOL_VEC4:\n              checkVector(4, 'boolean');\n              break;\n\n            case GL_FLOAT_MAT2:\n              checkVector(4, 'number');\n              break;\n\n            case GL_FLOAT_MAT3:\n              checkVector(9, 'number');\n              break;\n\n            case GL_FLOAT_MAT4:\n              checkVector(16, 'number');\n              break;\n\n            case GL_SAMPLER_2D:\n              checkTexture(GL_TEXTURE_2D$3);\n              break;\n\n            case GL_SAMPLER_CUBE:\n              checkTexture(GL_TEXTURE_CUBE_MAP$2);\n              break;\n          }\n        });\n        var unroll = 1;\n\n        switch (type) {\n          case GL_SAMPLER_2D:\n          case GL_SAMPLER_CUBE:\n            var TEX = scope.def(VALUE, '._texture');\n            scope(GL, '.uniform1i(', LOCATION, ',', TEX, '.bind());');\n            scope.exit(TEX, '.unbind();');\n            continue;\n\n          case GL_INT$3:\n          case GL_BOOL:\n            infix = '1i';\n            break;\n\n          case GL_INT_VEC2:\n          case GL_BOOL_VEC2:\n            infix = '2i';\n            unroll = 2;\n            break;\n\n          case GL_INT_VEC3:\n          case GL_BOOL_VEC3:\n            infix = '3i';\n            unroll = 3;\n            break;\n\n          case GL_INT_VEC4:\n          case GL_BOOL_VEC4:\n            infix = '4i';\n            unroll = 4;\n            break;\n\n          case GL_FLOAT$8:\n            infix = '1f';\n            break;\n\n          case GL_FLOAT_VEC2:\n            infix = '2f';\n            unroll = 2;\n            break;\n\n          case GL_FLOAT_VEC3:\n            infix = '3f';\n            unroll = 3;\n            break;\n\n          case GL_FLOAT_VEC4:\n            infix = '4f';\n            unroll = 4;\n            break;\n\n          case GL_FLOAT_MAT2:\n            infix = 'Matrix2fv';\n            break;\n\n          case GL_FLOAT_MAT3:\n            infix = 'Matrix3fv';\n            break;\n\n          case GL_FLOAT_MAT4:\n            infix = 'Matrix4fv';\n            break;\n        }\n\n        scope(GL, '.uniform', infix, '(', LOCATION, ',');\n\n        if (infix.charAt(0) === 'M') {\n          var matSize = Math.pow(type - GL_FLOAT_MAT2 + 2, 2);\n          var STORAGE = env.global.def('new Float32Array(', matSize, ')');\n          scope('false,(Array.isArray(', VALUE, ')||', VALUE, ' instanceof Float32Array)?', VALUE, ':(', loop(matSize, function (i) {\n            return STORAGE + '[' + i + ']=' + VALUE + '[' + i + ']';\n          }), ',', STORAGE, ')');\n        } else if (unroll > 1) {\n          scope(loop(unroll, function (i) {\n            return VALUE + '[' + i + ']';\n          }));\n        } else {\n          scope(VALUE);\n        }\n\n        scope(');');\n      }\n    }\n\n    function emitDraw(env, outer, inner, args) {\n      var shared = env.shared;\n      var GL = shared.gl;\n      var DRAW_STATE = shared.draw;\n      var drawOptions = args.draw;\n\n      function emitElements() {\n        var defn = drawOptions.elements;\n        var ELEMENTS;\n        var scope = outer;\n\n        if (defn) {\n          if (defn.contextDep && args.contextDynamic || defn.propDep) {\n            scope = inner;\n          }\n\n          ELEMENTS = defn.append(env, scope);\n        } else {\n          ELEMENTS = scope.def(DRAW_STATE, '.', S_ELEMENTS);\n        }\n\n        if (ELEMENTS) {\n          scope('if(' + ELEMENTS + ')' + GL + '.bindBuffer(' + GL_ELEMENT_ARRAY_BUFFER$1 + ',' + ELEMENTS + '.buffer.buffer);');\n        }\n\n        return ELEMENTS;\n      }\n\n      function emitCount() {\n        var defn = drawOptions.count;\n        var COUNT;\n        var scope = outer;\n\n        if (defn) {\n          if (defn.contextDep && args.contextDynamic || defn.propDep) {\n            scope = inner;\n          }\n\n          COUNT = defn.append(env, scope);\n          check$1.optional(function () {\n            if (defn.MISSING) {\n              env.assert(outer, 'false', 'missing vertex count');\n            }\n\n            if (defn.DYNAMIC) {\n              env.assert(scope, COUNT + '>=0', 'missing vertex count');\n            }\n          });\n        } else {\n          COUNT = scope.def(DRAW_STATE, '.', S_COUNT);\n          check$1.optional(function () {\n            env.assert(scope, COUNT + '>=0', 'missing vertex count');\n          });\n        }\n\n        return COUNT;\n      }\n\n      var ELEMENTS = emitElements();\n\n      function emitValue(name) {\n        var defn = drawOptions[name];\n\n        if (defn) {\n          if (defn.contextDep && args.contextDynamic || defn.propDep) {\n            return defn.append(env, inner);\n          } else {\n            return defn.append(env, outer);\n          }\n        } else {\n          return outer.def(DRAW_STATE, '.', name);\n        }\n      }\n\n      var PRIMITIVE = emitValue(S_PRIMITIVE);\n      var OFFSET = emitValue(S_OFFSET);\n      var COUNT = emitCount();\n\n      if (typeof COUNT === 'number') {\n        if (COUNT === 0) {\n          return;\n        }\n      } else {\n        inner('if(', COUNT, '){');\n        inner.exit('}');\n      }\n\n      var INSTANCES, EXT_INSTANCING;\n\n      if (extInstancing) {\n        INSTANCES = emitValue(S_INSTANCES);\n        EXT_INSTANCING = env.instancing;\n      }\n\n      var ELEMENT_TYPE = ELEMENTS + '.type';\n      var elementsStatic = drawOptions.elements && isStatic(drawOptions.elements);\n\n      function emitInstancing() {\n        function drawElements() {\n          inner(EXT_INSTANCING, '.drawElementsInstancedANGLE(', [PRIMITIVE, COUNT, ELEMENT_TYPE, OFFSET + '<<((' + ELEMENT_TYPE + '-' + GL_UNSIGNED_BYTE$8 + ')>>1)', INSTANCES], ');');\n        }\n\n        function drawArrays() {\n          inner(EXT_INSTANCING, '.drawArraysInstancedANGLE(', [PRIMITIVE, OFFSET, COUNT, INSTANCES], ');');\n        }\n\n        if (ELEMENTS) {\n          if (!elementsStatic) {\n            inner('if(', ELEMENTS, '){');\n            drawElements();\n            inner('}else{');\n            drawArrays();\n            inner('}');\n          } else {\n            drawElements();\n          }\n        } else {\n          drawArrays();\n        }\n      }\n\n      function emitRegular() {\n        function drawElements() {\n          inner(GL + '.drawElements(' + [PRIMITIVE, COUNT, ELEMENT_TYPE, OFFSET + '<<((' + ELEMENT_TYPE + '-' + GL_UNSIGNED_BYTE$8 + ')>>1)'] + ');');\n        }\n\n        function drawArrays() {\n          inner(GL + '.drawArrays(' + [PRIMITIVE, OFFSET, COUNT] + ');');\n        }\n\n        if (ELEMENTS) {\n          if (!elementsStatic) {\n            inner('if(', ELEMENTS, '){');\n            drawElements();\n            inner('}else{');\n            drawArrays();\n            inner('}');\n          } else {\n            drawElements();\n          }\n        } else {\n          drawArrays();\n        }\n      }\n\n      if (extInstancing && (typeof INSTANCES !== 'number' || INSTANCES >= 0)) {\n        if (typeof INSTANCES === 'string') {\n          inner('if(', INSTANCES, '>0){');\n          emitInstancing();\n          inner('}else if(', INSTANCES, '<0){');\n          emitRegular();\n          inner('}');\n        } else {\n          emitInstancing();\n        }\n      } else {\n        emitRegular();\n      }\n    }\n\n    function createBody(emitBody, parentEnv, args, program, count) {\n      var env = createREGLEnvironment();\n      var scope = env.proc('body', count);\n      check$1.optional(function () {\n        env.commandStr = parentEnv.commandStr;\n        env.command = env.link(parentEnv.commandStr);\n      });\n\n      if (extInstancing) {\n        env.instancing = scope.def(env.shared.extensions, '.angle_instanced_arrays');\n      }\n\n      emitBody(env, scope, args, program);\n      return env.compile().body;\n    } // ===================================================\n    // ===================================================\n    // DRAW PROC\n    // ===================================================\n    // ===================================================\n\n\n    function emitDrawBody(env, draw, args, program) {\n      injectExtensions(env, draw);\n      emitAttributes(env, draw, args, program.attributes, function () {\n        return true;\n      });\n      emitUniforms(env, draw, args, program.uniforms, function () {\n        return true;\n      });\n      emitDraw(env, draw, draw, args);\n    }\n\n    function emitDrawProc(env, args) {\n      var draw = env.proc('draw', 1);\n      injectExtensions(env, draw);\n      emitContext(env, draw, args.context);\n      emitPollFramebuffer(env, draw, args.framebuffer);\n      emitPollState(env, draw, args);\n      emitSetOptions(env, draw, args.state);\n      emitProfile(env, draw, args, false, true);\n      var program = args.shader.progVar.append(env, draw);\n      draw(env.shared.gl, '.useProgram(', program, '.program);');\n\n      if (args.shader.program) {\n        emitDrawBody(env, draw, args, args.shader.program);\n      } else {\n        var drawCache = env.global.def('{}');\n        var PROG_ID = draw.def(program, '.id');\n        var CACHED_PROC = draw.def(drawCache, '[', PROG_ID, ']');\n        draw(env.cond(CACHED_PROC).then(CACHED_PROC, '.call(this,a0);').else(CACHED_PROC, '=', drawCache, '[', PROG_ID, ']=', env.link(function (program) {\n          return createBody(emitDrawBody, env, args, program, 1);\n        }), '(', program, ');', CACHED_PROC, '.call(this,a0);'));\n      }\n\n      if (Object.keys(args.state).length > 0) {\n        draw(env.shared.current, '.dirty=true;');\n      }\n    } // ===================================================\n    // ===================================================\n    // BATCH PROC\n    // ===================================================\n    // ===================================================\n\n\n    function emitBatchDynamicShaderBody(env, scope, args, program) {\n      env.batchId = 'a1';\n      injectExtensions(env, scope);\n\n      function all() {\n        return true;\n      }\n\n      emitAttributes(env, scope, args, program.attributes, all);\n      emitUniforms(env, scope, args, program.uniforms, all);\n      emitDraw(env, scope, scope, args);\n    }\n\n    function emitBatchBody(env, scope, args, program) {\n      injectExtensions(env, scope);\n      var contextDynamic = args.contextDep;\n      var BATCH_ID = scope.def();\n      var PROP_LIST = 'a0';\n      var NUM_PROPS = 'a1';\n      var PROPS = scope.def();\n      env.shared.props = PROPS;\n      env.batchId = BATCH_ID;\n      var outer = env.scope();\n      var inner = env.scope();\n      scope(outer.entry, 'for(', BATCH_ID, '=0;', BATCH_ID, '<', NUM_PROPS, ';++', BATCH_ID, '){', PROPS, '=', PROP_LIST, '[', BATCH_ID, '];', inner, '}', outer.exit);\n\n      function isInnerDefn(defn) {\n        return defn.contextDep && contextDynamic || defn.propDep;\n      }\n\n      function isOuterDefn(defn) {\n        return !isInnerDefn(defn);\n      }\n\n      if (args.needsContext) {\n        emitContext(env, inner, args.context);\n      }\n\n      if (args.needsFramebuffer) {\n        emitPollFramebuffer(env, inner, args.framebuffer);\n      }\n\n      emitSetOptions(env, inner, args.state, isInnerDefn);\n\n      if (args.profile && isInnerDefn(args.profile)) {\n        emitProfile(env, inner, args, false, true);\n      }\n\n      if (!program) {\n        var progCache = env.global.def('{}');\n        var PROGRAM = args.shader.progVar.append(env, inner);\n        var PROG_ID = inner.def(PROGRAM, '.id');\n        var CACHED_PROC = inner.def(progCache, '[', PROG_ID, ']');\n        inner(env.shared.gl, '.useProgram(', PROGRAM, '.program);', 'if(!', CACHED_PROC, '){', CACHED_PROC, '=', progCache, '[', PROG_ID, ']=', env.link(function (program) {\n          return createBody(emitBatchDynamicShaderBody, env, args, program, 2);\n        }), '(', PROGRAM, ');}', CACHED_PROC, '.call(this,a0[', BATCH_ID, '],', BATCH_ID, ');');\n      } else {\n        emitAttributes(env, outer, args, program.attributes, isOuterDefn);\n        emitAttributes(env, inner, args, program.attributes, isInnerDefn);\n        emitUniforms(env, outer, args, program.uniforms, isOuterDefn);\n        emitUniforms(env, inner, args, program.uniforms, isInnerDefn);\n        emitDraw(env, outer, inner, args);\n      }\n    }\n\n    function emitBatchProc(env, args) {\n      var batch = env.proc('batch', 2);\n      env.batchId = '0';\n      injectExtensions(env, batch); // Check if any context variables depend on props\n\n      var contextDynamic = false;\n      var needsContext = true;\n      Object.keys(args.context).forEach(function (name) {\n        contextDynamic = contextDynamic || args.context[name].propDep;\n      });\n\n      if (!contextDynamic) {\n        emitContext(env, batch, args.context);\n        needsContext = false;\n      } // framebuffer state affects framebufferWidth/height context vars\n\n\n      var framebuffer = args.framebuffer;\n      var needsFramebuffer = false;\n\n      if (framebuffer) {\n        if (framebuffer.propDep) {\n          contextDynamic = needsFramebuffer = true;\n        } else if (framebuffer.contextDep && contextDynamic) {\n          needsFramebuffer = true;\n        }\n\n        if (!needsFramebuffer) {\n          emitPollFramebuffer(env, batch, framebuffer);\n        }\n      } else {\n        emitPollFramebuffer(env, batch, null);\n      } // viewport is weird because it can affect context vars\n\n\n      if (args.state.viewport && args.state.viewport.propDep) {\n        contextDynamic = true;\n      }\n\n      function isInnerDefn(defn) {\n        return defn.contextDep && contextDynamic || defn.propDep;\n      } // set webgl options\n\n\n      emitPollState(env, batch, args);\n      emitSetOptions(env, batch, args.state, function (defn) {\n        return !isInnerDefn(defn);\n      });\n\n      if (!args.profile || !isInnerDefn(args.profile)) {\n        emitProfile(env, batch, args, false, 'a1');\n      } // Save these values to args so that the batch body routine can use them\n\n\n      args.contextDep = contextDynamic;\n      args.needsContext = needsContext;\n      args.needsFramebuffer = needsFramebuffer; // determine if shader is dynamic\n\n      var progDefn = args.shader.progVar;\n\n      if (progDefn.contextDep && contextDynamic || progDefn.propDep) {\n        emitBatchBody(env, batch, args, null);\n      } else {\n        var PROGRAM = progDefn.append(env, batch);\n        batch(env.shared.gl, '.useProgram(', PROGRAM, '.program);');\n\n        if (args.shader.program) {\n          emitBatchBody(env, batch, args, args.shader.program);\n        } else {\n          var batchCache = env.global.def('{}');\n          var PROG_ID = batch.def(PROGRAM, '.id');\n          var CACHED_PROC = batch.def(batchCache, '[', PROG_ID, ']');\n          batch(env.cond(CACHED_PROC).then(CACHED_PROC, '.call(this,a0,a1);').else(CACHED_PROC, '=', batchCache, '[', PROG_ID, ']=', env.link(function (program) {\n            return createBody(emitBatchBody, env, args, program, 2);\n          }), '(', PROGRAM, ');', CACHED_PROC, '.call(this,a0,a1);'));\n        }\n      }\n\n      if (Object.keys(args.state).length > 0) {\n        batch(env.shared.current, '.dirty=true;');\n      }\n    } // ===================================================\n    // ===================================================\n    // SCOPE COMMAND\n    // ===================================================\n    // ===================================================\n\n\n    function emitScopeProc(env, args) {\n      var scope = env.proc('scope', 3);\n      env.batchId = 'a2';\n      var shared = env.shared;\n      var CURRENT_STATE = shared.current;\n      emitContext(env, scope, args.context);\n\n      if (args.framebuffer) {\n        args.framebuffer.append(env, scope);\n      }\n\n      sortState(Object.keys(args.state)).forEach(function (name) {\n        var defn = args.state[name];\n        var value = defn.append(env, scope);\n\n        if (isArrayLike(value)) {\n          value.forEach(function (v, i) {\n            scope.set(env.next[name], '[' + i + ']', v);\n          });\n        } else {\n          scope.set(shared.next, '.' + name, value);\n        }\n      });\n      emitProfile(env, scope, args, true, true);\n      [S_ELEMENTS, S_OFFSET, S_COUNT, S_INSTANCES, S_PRIMITIVE].forEach(function (opt) {\n        var variable = args.draw[opt];\n\n        if (!variable) {\n          return;\n        }\n\n        scope.set(shared.draw, '.' + opt, '' + variable.append(env, scope));\n      });\n      Object.keys(args.uniforms).forEach(function (opt) {\n        scope.set(shared.uniforms, '[' + stringStore.id(opt) + ']', args.uniforms[opt].append(env, scope));\n      });\n      Object.keys(args.attributes).forEach(function (name) {\n        var record = args.attributes[name].append(env, scope);\n        var scopeAttrib = env.scopeAttrib(name);\n        Object.keys(new AttributeRecord()).forEach(function (prop) {\n          scope.set(scopeAttrib, '.' + prop, record[prop]);\n        });\n      });\n\n      function saveShader(name) {\n        var shader = args.shader[name];\n\n        if (shader) {\n          scope.set(shared.shader, '.' + name, shader.append(env, scope));\n        }\n      }\n\n      saveShader(S_VERT);\n      saveShader(S_FRAG);\n\n      if (Object.keys(args.state).length > 0) {\n        scope(CURRENT_STATE, '.dirty=true;');\n        scope.exit(CURRENT_STATE, '.dirty=true;');\n      }\n\n      scope('a1(', env.shared.context, ',a0,', env.batchId, ');');\n    }\n\n    function isDynamicObject(object) {\n      if (typeof object !== 'object' || isArrayLike(object)) {\n        return;\n      }\n\n      var props = Object.keys(object);\n\n      for (var i = 0; i < props.length; ++i) {\n        if (dynamic.isDynamic(object[props[i]])) {\n          return true;\n        }\n      }\n\n      return false;\n    }\n\n    function splatObject(env, options, name) {\n      var object = options.static[name];\n\n      if (!object || !isDynamicObject(object)) {\n        return;\n      }\n\n      var globals = env.global;\n      var keys = Object.keys(object);\n      var thisDep = false;\n      var contextDep = false;\n      var propDep = false;\n      var objectRef = env.global.def('{}');\n      keys.forEach(function (key) {\n        var value = object[key];\n\n        if (dynamic.isDynamic(value)) {\n          if (typeof value === 'function') {\n            value = object[key] = dynamic.unbox(value);\n          }\n\n          var deps = createDynamicDecl(value, null);\n          thisDep = thisDep || deps.thisDep;\n          propDep = propDep || deps.propDep;\n          contextDep = contextDep || deps.contextDep;\n        } else {\n          globals(objectRef, '.', key, '=');\n\n          switch (typeof value) {\n            case 'number':\n              globals(value);\n              break;\n\n            case 'string':\n              globals('\"', value, '\"');\n              break;\n\n            case 'object':\n              if (Array.isArray(value)) {\n                globals('[', value.join(), ']');\n              }\n\n              break;\n\n            default:\n              globals(env.link(value));\n              break;\n          }\n\n          globals(';');\n        }\n      });\n\n      function appendBlock(env, block) {\n        keys.forEach(function (key) {\n          var value = object[key];\n\n          if (!dynamic.isDynamic(value)) {\n            return;\n          }\n\n          var ref = env.invoke(block, value);\n          block(objectRef, '.', key, '=', ref, ';');\n        });\n      }\n\n      options.dynamic[name] = new dynamic.DynamicVariable(DYN_THUNK, {\n        thisDep: thisDep,\n        contextDep: contextDep,\n        propDep: propDep,\n        ref: objectRef,\n        append: appendBlock\n      });\n      delete options.static[name];\n    } // ===========================================================================\n    // ===========================================================================\n    // MAIN DRAW COMMAND\n    // ===========================================================================\n    // ===========================================================================\n\n\n    function compileCommand(options, attributes, uniforms, context, stats) {\n      var env = createREGLEnvironment(); // link stats, so that we can easily access it in the program.\n\n      env.stats = env.link(stats); // splat options and attributes to allow for dynamic nested properties\n\n      Object.keys(attributes.static).forEach(function (key) {\n        splatObject(env, attributes, key);\n      });\n      NESTED_OPTIONS.forEach(function (name) {\n        splatObject(env, options, name);\n      });\n      var args = parseArguments(options, attributes, uniforms, context, env);\n      emitDrawProc(env, args);\n      emitScopeProc(env, args);\n      emitBatchProc(env, args);\n      return env.compile();\n    } // ===========================================================================\n    // ===========================================================================\n    // POLL / REFRESH\n    // ===========================================================================\n    // ===========================================================================\n\n\n    return {\n      next: nextState,\n      current: currentState,\n      procs: function () {\n        var env = createREGLEnvironment();\n        var poll = env.proc('poll');\n        var refresh = env.proc('refresh');\n        var common = env.block();\n        poll(common);\n        refresh(common);\n        var shared = env.shared;\n        var GL = shared.gl;\n        var NEXT_STATE = shared.next;\n        var CURRENT_STATE = shared.current;\n        common(CURRENT_STATE, '.dirty=false;');\n        emitPollFramebuffer(env, poll);\n        emitPollFramebuffer(env, refresh, null, true); // Refresh updates all attribute state changes\n\n        var INSTANCING;\n\n        if (extInstancing) {\n          INSTANCING = env.link(extInstancing);\n        }\n\n        for (var i = 0; i < limits.maxAttributes; ++i) {\n          var BINDING = refresh.def(shared.attributes, '[', i, ']');\n          var ifte = env.cond(BINDING, '.buffer');\n          ifte.then(GL, '.enableVertexAttribArray(', i, ');', GL, '.bindBuffer(', GL_ARRAY_BUFFER$1, ',', BINDING, '.buffer.buffer);', GL, '.vertexAttribPointer(', i, ',', BINDING, '.size,', BINDING, '.type,', BINDING, '.normalized,', BINDING, '.stride,', BINDING, '.offset);').else(GL, '.disableVertexAttribArray(', i, ');', GL, '.vertexAttrib4f(', i, ',', BINDING, '.x,', BINDING, '.y,', BINDING, '.z,', BINDING, '.w);', BINDING, '.buffer=null;');\n          refresh(ifte);\n\n          if (extInstancing) {\n            refresh(INSTANCING, '.vertexAttribDivisorANGLE(', i, ',', BINDING, '.divisor);');\n          }\n        }\n\n        Object.keys(GL_FLAGS).forEach(function (flag) {\n          var cap = GL_FLAGS[flag];\n          var NEXT = common.def(NEXT_STATE, '.', flag);\n          var block = env.block();\n          block('if(', NEXT, '){', GL, '.enable(', cap, ')}else{', GL, '.disable(', cap, ')}', CURRENT_STATE, '.', flag, '=', NEXT, ';');\n          refresh(block);\n          poll('if(', NEXT, '!==', CURRENT_STATE, '.', flag, '){', block, '}');\n        });\n        Object.keys(GL_VARIABLES).forEach(function (name) {\n          var func = GL_VARIABLES[name];\n          var init = currentState[name];\n          var NEXT, CURRENT;\n          var block = env.block();\n          block(GL, '.', func, '(');\n\n          if (isArrayLike(init)) {\n            var n = init.length;\n            NEXT = env.global.def(NEXT_STATE, '.', name);\n            CURRENT = env.global.def(CURRENT_STATE, '.', name);\n            block(loop(n, function (i) {\n              return NEXT + '[' + i + ']';\n            }), ');', loop(n, function (i) {\n              return CURRENT + '[' + i + ']=' + NEXT + '[' + i + '];';\n            }).join(''));\n            poll('if(', loop(n, function (i) {\n              return NEXT + '[' + i + ']!==' + CURRENT + '[' + i + ']';\n            }).join('||'), '){', block, '}');\n          } else {\n            NEXT = common.def(NEXT_STATE, '.', name);\n            CURRENT = common.def(CURRENT_STATE, '.', name);\n            block(NEXT, ');', CURRENT_STATE, '.', name, '=', NEXT, ';');\n            poll('if(', NEXT, '!==', CURRENT, '){', block, '}');\n          }\n\n          refresh(block);\n        });\n        return env.compile();\n      }(),\n      compile: compileCommand\n    };\n  }\n\n  function stats() {\n    return {\n      bufferCount: 0,\n      elementsCount: 0,\n      framebufferCount: 0,\n      shaderCount: 0,\n      textureCount: 0,\n      cubeCount: 0,\n      renderbufferCount: 0,\n      maxTextureUnits: 0\n    };\n  }\n\n  var GL_QUERY_RESULT_EXT = 0x8866;\n  var GL_QUERY_RESULT_AVAILABLE_EXT = 0x8867;\n  var GL_TIME_ELAPSED_EXT = 0x88BF;\n\n  var createTimer = function createTimer(gl, extensions) {\n    if (!extensions.ext_disjoint_timer_query) {\n      return null;\n    } // QUERY POOL BEGIN\n\n\n    var queryPool = [];\n\n    function allocQuery() {\n      return queryPool.pop() || extensions.ext_disjoint_timer_query.createQueryEXT();\n    }\n\n    function freeQuery(query) {\n      queryPool.push(query);\n    } // QUERY POOL END\n\n\n    var pendingQueries = [];\n\n    function beginQuery(stats) {\n      var query = allocQuery();\n      extensions.ext_disjoint_timer_query.beginQueryEXT(GL_TIME_ELAPSED_EXT, query);\n      pendingQueries.push(query);\n      pushScopeStats(pendingQueries.length - 1, pendingQueries.length, stats);\n    }\n\n    function endQuery() {\n      extensions.ext_disjoint_timer_query.endQueryEXT(GL_TIME_ELAPSED_EXT);\n    } //\n    // Pending stats pool.\n    //\n\n\n    function PendingStats() {\n      this.startQueryIndex = -1;\n      this.endQueryIndex = -1;\n      this.sum = 0;\n      this.stats = null;\n    }\n\n    var pendingStatsPool = [];\n\n    function allocPendingStats() {\n      return pendingStatsPool.pop() || new PendingStats();\n    }\n\n    function freePendingStats(pendingStats) {\n      pendingStatsPool.push(pendingStats);\n    } // Pending stats pool end\n\n\n    var pendingStats = [];\n\n    function pushScopeStats(start, end, stats) {\n      var ps = allocPendingStats();\n      ps.startQueryIndex = start;\n      ps.endQueryIndex = end;\n      ps.sum = 0;\n      ps.stats = stats;\n      pendingStats.push(ps);\n    } // we should call this at the beginning of the frame,\n    // in order to update gpuTime\n\n\n    var timeSum = [];\n    var queryPtr = [];\n\n    function update() {\n      var ptr, i;\n      var n = pendingQueries.length;\n\n      if (n === 0) {\n        return;\n      } // Reserve space\n\n\n      queryPtr.length = Math.max(queryPtr.length, n + 1);\n      timeSum.length = Math.max(timeSum.length, n + 1);\n      timeSum[0] = 0;\n      queryPtr[0] = 0; // Update all pending timer queries\n\n      var queryTime = 0;\n      ptr = 0;\n\n      for (i = 0; i < pendingQueries.length; ++i) {\n        var query = pendingQueries[i];\n\n        if (extensions.ext_disjoint_timer_query.getQueryObjectEXT(query, GL_QUERY_RESULT_AVAILABLE_EXT)) {\n          queryTime += extensions.ext_disjoint_timer_query.getQueryObjectEXT(query, GL_QUERY_RESULT_EXT);\n          freeQuery(query);\n        } else {\n          pendingQueries[ptr++] = query;\n        }\n\n        timeSum[i + 1] = queryTime;\n        queryPtr[i + 1] = ptr;\n      }\n\n      pendingQueries.length = ptr; // Update all pending stat queries\n\n      ptr = 0;\n\n      for (i = 0; i < pendingStats.length; ++i) {\n        var stats = pendingStats[i];\n        var start = stats.startQueryIndex;\n        var end = stats.endQueryIndex;\n        stats.sum += timeSum[end] - timeSum[start];\n        var startPtr = queryPtr[start];\n        var endPtr = queryPtr[end];\n\n        if (endPtr === startPtr) {\n          stats.stats.gpuTime += stats.sum / 1e6;\n          freePendingStats(stats);\n        } else {\n          stats.startQueryIndex = startPtr;\n          stats.endQueryIndex = endPtr;\n          pendingStats[ptr++] = stats;\n        }\n      }\n\n      pendingStats.length = ptr;\n    }\n\n    return {\n      beginQuery: beginQuery,\n      endQuery: endQuery,\n      pushScopeStats: pushScopeStats,\n      update: update,\n      getNumPendingQueries: function getNumPendingQueries() {\n        return pendingQueries.length;\n      },\n      clear: function clear() {\n        queryPool.push.apply(queryPool, pendingQueries);\n\n        for (var i = 0; i < queryPool.length; i++) {\n          extensions.ext_disjoint_timer_query.deleteQueryEXT(queryPool[i]);\n        }\n\n        pendingQueries.length = 0;\n        queryPool.length = 0;\n      },\n      restore: function restore() {\n        pendingQueries.length = 0;\n        queryPool.length = 0;\n      }\n    };\n  };\n\n  var GL_COLOR_BUFFER_BIT = 16384;\n  var GL_DEPTH_BUFFER_BIT = 256;\n  var GL_STENCIL_BUFFER_BIT = 1024;\n  var GL_ARRAY_BUFFER = 34962;\n  var CONTEXT_LOST_EVENT = 'webglcontextlost';\n  var CONTEXT_RESTORED_EVENT = 'webglcontextrestored';\n  var DYN_PROP = 1;\n  var DYN_CONTEXT = 2;\n  var DYN_STATE = 3;\n\n  function find(haystack, needle) {\n    for (var i = 0; i < haystack.length; ++i) {\n      if (haystack[i] === needle) {\n        return i;\n      }\n    }\n\n    return -1;\n  }\n\n  function wrapREGL(args) {\n    var config = parseArgs(args);\n\n    if (!config) {\n      return null;\n    }\n\n    var gl = config.gl;\n    var glAttributes = gl.getContextAttributes();\n    var contextLost = gl.isContextLost();\n    var extensionState = createExtensionCache(gl, config);\n\n    if (!extensionState) {\n      return null;\n    }\n\n    var stringStore = createStringStore();\n    var stats$$1 = stats();\n    var extensions = extensionState.extensions;\n    var timer = createTimer(gl, extensions);\n    var START_TIME = clock();\n    var WIDTH = gl.drawingBufferWidth;\n    var HEIGHT = gl.drawingBufferHeight;\n    var contextState = {\n      tick: 0,\n      time: 0,\n      viewportWidth: WIDTH,\n      viewportHeight: HEIGHT,\n      framebufferWidth: WIDTH,\n      framebufferHeight: HEIGHT,\n      drawingBufferWidth: WIDTH,\n      drawingBufferHeight: HEIGHT,\n      pixelRatio: config.pixelRatio\n    };\n    var uniformState = {};\n    var drawState = {\n      elements: null,\n      primitive: 4,\n      // GL_TRIANGLES\n      count: -1,\n      offset: 0,\n      instances: -1\n    };\n    var limits = wrapLimits(gl, extensions);\n    var attributeState = wrapAttributeState(gl, extensions, limits, stringStore);\n    var bufferState = wrapBufferState(gl, stats$$1, config, attributeState);\n    var elementState = wrapElementsState(gl, extensions, bufferState, stats$$1);\n    var shaderState = wrapShaderState(gl, stringStore, stats$$1, config);\n    var textureState = createTextureSet(gl, extensions, limits, function () {\n      core.procs.poll();\n    }, contextState, stats$$1, config);\n    var renderbufferState = wrapRenderbuffers(gl, extensions, limits, stats$$1, config);\n    var framebufferState = wrapFBOState(gl, extensions, limits, textureState, renderbufferState, stats$$1);\n    var core = reglCore(gl, stringStore, extensions, limits, bufferState, elementState, textureState, framebufferState, uniformState, attributeState, shaderState, drawState, contextState, timer, config);\n    var readPixels = wrapReadPixels(gl, framebufferState, core.procs.poll, contextState, glAttributes, extensions, limits);\n    var nextState = core.next;\n    var canvas = gl.canvas;\n    var rafCallbacks = [];\n    var lossCallbacks = [];\n    var restoreCallbacks = [];\n    var destroyCallbacks = [config.onDestroy];\n    var activeRAF = null;\n\n    function handleRAF() {\n      if (rafCallbacks.length === 0) {\n        if (timer) {\n          timer.update();\n        }\n\n        activeRAF = null;\n        return;\n      } // schedule next animation frame\n\n\n      activeRAF = raf.next(handleRAF); // poll for changes\n\n      _poll(); // fire a callback for all pending rafs\n\n\n      for (var i = rafCallbacks.length - 1; i >= 0; --i) {\n        var cb = rafCallbacks[i];\n\n        if (cb) {\n          cb(contextState, null, 0);\n        }\n      } // flush all pending webgl calls\n\n\n      gl.flush(); // poll GPU timers *after* gl.flush so we don't delay command dispatch\n\n      if (timer) {\n        timer.update();\n      }\n    }\n\n    function startRAF() {\n      if (!activeRAF && rafCallbacks.length > 0) {\n        activeRAF = raf.next(handleRAF);\n      }\n    }\n\n    function stopRAF() {\n      if (activeRAF) {\n        raf.cancel(handleRAF);\n        activeRAF = null;\n      }\n    }\n\n    function handleContextLoss(event) {\n      event.preventDefault(); // set context lost flag\n\n      contextLost = true; // pause request animation frame\n\n      stopRAF(); // lose context\n\n      lossCallbacks.forEach(function (cb) {\n        cb();\n      });\n    }\n\n    function handleContextRestored(event) {\n      // clear error code\n      gl.getError(); // clear context lost flag\n\n      contextLost = false; // refresh state\n\n      extensionState.restore();\n      shaderState.restore();\n      bufferState.restore();\n      textureState.restore();\n      renderbufferState.restore();\n      framebufferState.restore();\n\n      if (timer) {\n        timer.restore();\n      } // refresh state\n\n\n      core.procs.refresh(); // restart RAF\n\n      startRAF(); // restore context\n\n      restoreCallbacks.forEach(function (cb) {\n        cb();\n      });\n    }\n\n    if (canvas) {\n      canvas.addEventListener(CONTEXT_LOST_EVENT, handleContextLoss, false);\n      canvas.addEventListener(CONTEXT_RESTORED_EVENT, handleContextRestored, false);\n    }\n\n    function destroy() {\n      rafCallbacks.length = 0;\n      stopRAF();\n\n      if (canvas) {\n        canvas.removeEventListener(CONTEXT_LOST_EVENT, handleContextLoss);\n        canvas.removeEventListener(CONTEXT_RESTORED_EVENT, handleContextRestored);\n      }\n\n      shaderState.clear();\n      framebufferState.clear();\n      renderbufferState.clear();\n      textureState.clear();\n      elementState.clear();\n      bufferState.clear();\n\n      if (timer) {\n        timer.clear();\n      }\n\n      destroyCallbacks.forEach(function (cb) {\n        cb();\n      });\n    }\n\n    function compileProcedure(options) {\n      check$1(!!options, 'invalid args to regl({...})');\n      check$1.type(options, 'object', 'invalid args to regl({...})');\n\n      function flattenNestedOptions(options) {\n        var result = extend({}, options);\n        delete result.uniforms;\n        delete result.attributes;\n        delete result.context;\n\n        if ('stencil' in result && result.stencil.op) {\n          result.stencil.opBack = result.stencil.opFront = result.stencil.op;\n          delete result.stencil.op;\n        }\n\n        function merge(name) {\n          if (name in result) {\n            var child = result[name];\n            delete result[name];\n            Object.keys(child).forEach(function (prop) {\n              result[name + '.' + prop] = child[prop];\n            });\n          }\n        }\n\n        merge('blend');\n        merge('depth');\n        merge('cull');\n        merge('stencil');\n        merge('polygonOffset');\n        merge('scissor');\n        merge('sample');\n        return result;\n      }\n\n      function separateDynamic(object) {\n        var staticItems = {};\n        var dynamicItems = {};\n        Object.keys(object).forEach(function (option) {\n          var value = object[option];\n\n          if (dynamic.isDynamic(value)) {\n            dynamicItems[option] = dynamic.unbox(value, option);\n          } else {\n            staticItems[option] = value;\n          }\n        });\n        return {\n          dynamic: dynamicItems,\n          static: staticItems\n        };\n      } // Treat context variables separate from other dynamic variables\n\n\n      var context = separateDynamic(options.context || {});\n      var uniforms = separateDynamic(options.uniforms || {});\n      var attributes = separateDynamic(options.attributes || {});\n      var opts = separateDynamic(flattenNestedOptions(options));\n      var stats$$1 = {\n        gpuTime: 0.0,\n        cpuTime: 0.0,\n        count: 0\n      };\n      var compiled = core.compile(opts, attributes, uniforms, context, stats$$1);\n      var draw = compiled.draw;\n      var batch = compiled.batch;\n      var scope = compiled.scope; // FIXME: we should modify code generation for batch commands so this\n      // isn't necessary\n\n      var EMPTY_ARRAY = [];\n\n      function reserve(count) {\n        while (EMPTY_ARRAY.length < count) {\n          EMPTY_ARRAY.push(null);\n        }\n\n        return EMPTY_ARRAY;\n      }\n\n      function REGLCommand(args, body) {\n        var i;\n\n        if (contextLost) {\n          check$1.raise('context lost');\n        }\n\n        if (typeof args === 'function') {\n          return scope.call(this, null, args, 0);\n        } else if (typeof body === 'function') {\n          if (typeof args === 'number') {\n            for (i = 0; i < args; ++i) {\n              scope.call(this, null, body, i);\n            }\n\n            return;\n          } else if (Array.isArray(args)) {\n            for (i = 0; i < args.length; ++i) {\n              scope.call(this, args[i], body, i);\n            }\n\n            return;\n          } else {\n            return scope.call(this, args, body, 0);\n          }\n        } else if (typeof args === 'number') {\n          if (args > 0) {\n            return batch.call(this, reserve(args | 0), args | 0);\n          }\n        } else if (Array.isArray(args)) {\n          if (args.length) {\n            return batch.call(this, args, args.length);\n          }\n        } else {\n          return draw.call(this, args);\n        }\n      }\n\n      return extend(REGLCommand, {\n        stats: stats$$1\n      });\n    }\n\n    var setFBO = framebufferState.setFBO = compileProcedure({\n      framebuffer: dynamic.define.call(null, DYN_PROP, 'framebuffer')\n    });\n\n    function clearImpl(_, options) {\n      var clearFlags = 0;\n      core.procs.poll();\n      var c = options.color;\n\n      if (c) {\n        gl.clearColor(+c[0] || 0, +c[1] || 0, +c[2] || 0, +c[3] || 0);\n        clearFlags |= GL_COLOR_BUFFER_BIT;\n      }\n\n      if ('depth' in options) {\n        gl.clearDepth(+options.depth);\n        clearFlags |= GL_DEPTH_BUFFER_BIT;\n      }\n\n      if ('stencil' in options) {\n        gl.clearStencil(options.stencil | 0);\n        clearFlags |= GL_STENCIL_BUFFER_BIT;\n      }\n\n      check$1(!!clearFlags, 'called regl.clear with no buffer specified');\n      gl.clear(clearFlags);\n    }\n\n    function clear(options) {\n      check$1(typeof options === 'object' && options, 'regl.clear() takes an object as input');\n\n      if ('framebuffer' in options) {\n        if (options.framebuffer && options.framebuffer_reglType === 'framebufferCube') {\n          for (var i = 0; i < 6; ++i) {\n            setFBO(extend({\n              framebuffer: options.framebuffer.faces[i]\n            }, options), clearImpl);\n          }\n        } else {\n          setFBO(options, clearImpl);\n        }\n      } else {\n        clearImpl(null, options);\n      }\n    }\n\n    function frame(cb) {\n      check$1.type(cb, 'function', 'regl.frame() callback must be a function');\n      rafCallbacks.push(cb);\n\n      function cancel() {\n        // FIXME:  should we check something other than equals cb here?\n        // what if a user calls frame twice with the same callback...\n        //\n        var i = find(rafCallbacks, cb);\n        check$1(i >= 0, 'cannot cancel a frame twice');\n\n        function pendingCancel() {\n          var index = find(rafCallbacks, pendingCancel);\n          rafCallbacks[index] = rafCallbacks[rafCallbacks.length - 1];\n          rafCallbacks.length -= 1;\n\n          if (rafCallbacks.length <= 0) {\n            stopRAF();\n          }\n        }\n\n        rafCallbacks[i] = pendingCancel;\n      }\n\n      startRAF();\n      return {\n        cancel: cancel\n      };\n    } // poll viewport\n\n\n    function pollViewport() {\n      var viewport = nextState.viewport;\n      var scissorBox = nextState.scissor_box;\n      viewport[0] = viewport[1] = scissorBox[0] = scissorBox[1] = 0;\n      contextState.viewportWidth = contextState.framebufferWidth = contextState.drawingBufferWidth = viewport[2] = scissorBox[2] = gl.drawingBufferWidth;\n      contextState.viewportHeight = contextState.framebufferHeight = contextState.drawingBufferHeight = viewport[3] = scissorBox[3] = gl.drawingBufferHeight;\n    }\n\n    function _poll() {\n      contextState.tick += 1;\n      contextState.time = now();\n      pollViewport();\n      core.procs.poll();\n    }\n\n    function refresh() {\n      pollViewport();\n      core.procs.refresh();\n\n      if (timer) {\n        timer.update();\n      }\n    }\n\n    function now() {\n      return (clock() - START_TIME) / 1000.0;\n    }\n\n    refresh();\n\n    function addListener(event, callback) {\n      check$1.type(callback, 'function', 'listener callback must be a function');\n      var callbacks;\n\n      switch (event) {\n        case 'frame':\n          return frame(callback);\n\n        case 'lost':\n          callbacks = lossCallbacks;\n          break;\n\n        case 'restore':\n          callbacks = restoreCallbacks;\n          break;\n\n        case 'destroy':\n          callbacks = destroyCallbacks;\n          break;\n\n        default:\n          check$1.raise('invalid event, must be one of frame,lost,restore,destroy');\n      }\n\n      callbacks.push(callback);\n      return {\n        cancel: function cancel() {\n          for (var i = 0; i < callbacks.length; ++i) {\n            if (callbacks[i] === callback) {\n              callbacks[i] = callbacks[callbacks.length - 1];\n              callbacks.pop();\n              return;\n            }\n          }\n        }\n      };\n    }\n\n    var regl = extend(compileProcedure, {\n      // Clear current FBO\n      clear: clear,\n      // Short cuts for dynamic variables\n      prop: dynamic.define.bind(null, DYN_PROP),\n      context: dynamic.define.bind(null, DYN_CONTEXT),\n      this: dynamic.define.bind(null, DYN_STATE),\n      // executes an empty draw command\n      draw: compileProcedure({}),\n      // Resources\n      buffer: function buffer(options) {\n        return bufferState.create(options, GL_ARRAY_BUFFER, false, false);\n      },\n      elements: function elements(options) {\n        return elementState.create(options, false);\n      },\n      texture: textureState.create2D,\n      cube: textureState.createCube,\n      renderbuffer: renderbufferState.create,\n      framebuffer: framebufferState.create,\n      framebufferCube: framebufferState.createCube,\n      // Expose context attributes\n      attributes: glAttributes,\n      // Frame rendering\n      frame: frame,\n      on: addListener,\n      // System limits\n      limits: limits,\n      hasExtension: function hasExtension(name) {\n        return limits.extensions.indexOf(name.toLowerCase()) >= 0;\n      },\n      // Read pixels\n      read: readPixels,\n      // Destroy regl and all associated resources\n      destroy: destroy,\n      // Direct GL state manipulation\n      _gl: gl,\n      _refresh: refresh,\n      poll: function poll() {\n        _poll();\n\n        if (timer) {\n          timer.update();\n        }\n      },\n      // Current time\n      now: now,\n      // regl Statistics Information\n      stats: stats$$1\n    });\n    config.onDone(null, regl);\n    return regl;\n  }\n\n  return wrapREGL;\n});","\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar createBistate_1 = require(\"./createBistate\");\n\nexports.mutate = createBistate_1.mutate;\nexports.remove = createBistate_1.remove;\nexports.isBistate = createBistate_1.isBistate;\n\nvar createStore_1 = __importDefault(require(\"./createStore\"));\n\nexports.createStore = createStore_1.default;","\"use strict\";\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {\n      ar.push(r.value);\n    }\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nvar __spread = this && this.__spread || function () {\n  for (var ar = [], i = 0; i < arguments.length; i++) {\n    ar = ar.concat(__read(arguments[i]));\n  }\n\n  return ar;\n};\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n  }\n  result[\"default\"] = mod;\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar createBistate_1 = __importStar(require(\"./createBistate\"));\n\nvar util_1 = require(\"./util\");\n\nfunction createStore(initialState) {\n  var current = createBistate_1.default(initialState);\n\n  var getState = function getState() {\n    return current;\n  };\n\n  var listenerList = [];\n\n  var subscribe = function subscribe(listener) {\n    if (!util_1.isFunction(listener)) {\n      throw new Error(\"Expected listener to be a function, but got \" + listener);\n    }\n\n    if (!listenerList.includes(listener)) {\n      listenerList.push(listener);\n    }\n\n    return function () {\n      var index = listenerList.indexOf(listener);\n\n      if (index !== -1) {\n        listenerList.splice(index, 1);\n      }\n    };\n  };\n\n  var publish = function publish(state) {\n    current = state;\n    createBistate_1.watch(current, publish);\n\n    var list = __spread(listenerList);\n\n    for (var i = 0; i < list.length; i++) {\n      var listener = list[i];\n\n      if (listenerList.includes(listener)) {\n        listener(current);\n      }\n    }\n  };\n\n  createBistate_1.watch(current, publish);\n  return {\n    getState: getState,\n    subscribe: subscribe\n  };\n}\n\nexports.default = createStore;","exports.positions = [[1.301895, 0.122622, 2.550061], [1.045326, 0.139058, 2.835156], [0.569251, 0.155925, 2.805125], [0.251886, 0.144145, 2.82928], [0.063033, 0.131726, 3.01408], [-0.277753, 0.135892, 3.10716], [-0.441048, 0.277064, 2.594331], [-1.010956, 0.095285, 2.668983], [-1.317639, 0.069897, 2.325448], [-0.751691, 0.264681, 2.381496], [0.684137, 0.31134, 2.364574], [1.347931, 0.302882, 2.201434], [-1.736903, 0.029894, 1.724111], [-1.319986, 0.11998, 0.912925], [1.538077, 0.157372, 0.481711], [1.951975, 0.081742, 1.1641], [1.834768, 0.095832, 1.602682], [2.446122, 0.091817, 1.37558], [2.617615, 0.078644, 0.742801], [-1.609748, 0.04973, -0.238721], [-1.281973, 0.230984, -0.180916], [-1.074501, 0.248204, 0.034007], [-1.201734, 0.058499, 0.402234], [-1.444454, 0.054783, 0.149579], [-4.694605, 5.075882, 1.043427], [-3.95963, 7.767394, 0.758447], [-4.753339, 5.339817, 0.665061], [-1.150325, 9.133327, -0.368552], [-4.316107, 2.893611, 0.44399], [-0.809202, 9.312575, -0.466061], [0.085626, 5.963693, 1.685666], [-1.314853, 9.00142, -0.1339], [-4.364182, 3.072556, 1.436712], [-2.022074, 7.323396, 0.678657], [1.990887, 6.13023, 0.479643], [-3.295525, 7.878917, 1.409353], [0.571308, 6.197569, 0.670657], [0.89661, 6.20018, 0.337056], [0.331851, 6.162372, 1.186371], [-4.840066, 5.599874, 2.296069], [2.138989, 6.031291, 0.228335], [0.678923, 6.026173, 1.894052], [-0.781682, 5.601573, 1.836738], [1.181315, 6.239007, 0.393293], [-3.606308, 7.376476, 2.661452], [-0.579059, 4.042511, -1.540883], [-3.064069, 8.630253, -2.597539], [-2.157271, 6.837012, 0.300191], [-2.966013, 7.821581, -1.13697], [-2.34426, 8.122965, 0.409043], [-0.951684, 5.874251, 1.415119], [-2.834853, 7.748319, 0.182406], [-3.242493, 7.820096, 0.373674], [-0.208532, 5.992846, 1.252084], [-3.048085, 8.431527, -2.129795], [1.413245, 5.806324, 2.243906], [-0.051222, 6.064901, 0.696093], [-4.204306, 2.700062, 0.713875], [-4.610997, 6.343405, 0.344272], [-3.291336, 9.30531, -3.340445], [-3.27211, 7.559239, -2.324016], [-4.23882, 6.498344, 3.18452], [-3.945317, 6.377804, 3.38625], [-4.906378, 5.472265, 1.315193], [-3.580131, 7.846717, 0.709666], [-1.995504, 6.645459, 0.688487], [-2.595651, 7.86054, 0.793351], [-0.008849, 0.305871, 0.184484], [-0.029011, 0.314116, -0.257312], [-2.522424, 7.565392, 1.804212], [-1.022993, 8.650826, -0.855609], [-3.831265, 6.595426, 3.266783], [-4.042525, 6.855724, 3.060663], [-4.17126, 7.404742, 2.391387], [3.904526, 3.767693, 0.092179], [0.268076, 6.086802, 1.469223], [-3.320456, 8.753222, -2.08969], [1.203048, 6.26925, 0.612407], [-4.406479, 2.985974, 0.853691], [-3.226889, 6.615215, -0.404243], [0.346326, 1.60211, 3.509858], [-3.955476, 7.253323, 2.722392], [-1.23204, 0.068935, 1.68794], [0.625436, 6.196455, 1.333156], [4.469132, 2.165298, 1.70525], [0.950053, 6.262899, 0.922441], [-2.980404, 5.25474, -0.663155], [-4.859043, 6.28741, 1.537081], [-3.077453, 4.641475, -0.892167], [-0.44002, 8.222503, -0.771454], [-4.034112, 7.639786, 0.389935], [-3.696045, 6.242042, 3.394679], [-1.221806, 7.783617, 0.196451], [0.71461, 6.149895, 1.656636], [-4.713539, 6.163154, 0.495369], [-1.509869, 0.913044, -0.832413], [-1.547249, 2.066753, -0.852669], [-3.757734, 5.793742, 3.455794], [-0.831911, 0.199296, 1.718536], [-3.062763, 7.52718, -1.550559], [0.938688, 6.103354, 1.820958], [-4.037033, 2.412311, 0.988026], [-4.130746, 2.571806, 1.101689], [-0.693664, 9.174283, -0.952323], [-1.286742, 1.079679, -0.751219], [1.543185, 1.408925, 3.483132], [1.535973, 2.047979, 3.655029], [0.93844, 5.84101, 2.195219], [-0.684401, 5.918492, 1.20109], [1.28844, 2.008676, 3.710781], [-3.586722, 7.435506, -1.454737], [-0.129975, 4.384192, 2.930593], [-1.030531, 0.281374, 3.214273], [-3.058751, 8.137238, -3.227714], [3.649524, 4.592226, 1.340021], [-3.354828, 7.322425, -1.412086], [0.936449, 6.209237, 1.512693], [-1.001832, 3.590411, -1.545892], [-3.770486, 4.593242, 2.477056], [-0.971925, 0.067797, 0.921384], [-4.639832, 6.865407, 2.311791], [-0.441014, 8.093595, -0.595999], [-2.004852, 6.37142, 1.635383], [4.759591, 1.92818, 0.328328], [3.748064, 1.224074, 2.140484], [-0.703601, 5.285476, 2.251988], [0.59532, 6.21893, 0.981004], [0.980799, 6.257026, 1.24223], [1.574697, 6.204981, 0.381628], [1.149594, 6.173608, 1.660763], [-3.501963, 5.895989, 3.456576], [1.071122, 5.424198, 2.588717], [-0.774693, 8.473335, -0.276957], [3.849959, 4.15542, 0.396742], [-0.801715, 4.973149, -1.068582], [-2.927676, 0.625112, 2.326393], [2.669682, 4.045542, 2.971184], [-4.391324, 4.74086, 0.343463], [1.520129, 6.270031, 0.775471], [1.837586, 6.084731, 0.109188], [1.271475, 5.975024, 2.032355], [-3.487968, 4.513249, 2.605871], [-1.32234, 1.517264, -0.691879], [-1.080301, 1.648226, -0.805526], [-3.365703, 6.910166, -0.454902], [1.36034, 0.432238, 3.075004], [-3.305013, 5.774685, 3.39142], [3.88432, 0.654141, 0.12574], [3.57254, 0.377934, 0.302501], [4.196136, 0.807999, 0.212229], [3.932997, 0.543123, 0.380579], [4.023704, 3.286125, 0.537597], [1.864455, 4.916544, 2.691677], [-4.775427, 6.499498, 1.440153], [-3.464928, 3.68234, 2.766356], [3.648972, 1.751262, 2.157485], [1.179111, 3.238846, 3.774796], [-0.171164, 0.299126, -0.592669], [-4.502912, 3.316656, 0.875188], [-0.948454, 9.214025, -0.679508], [1.237665, 6.288593, 1.046], [1.523423, 6.268963, 1.139544], [1.436519, 6.140608, 1.739316], [3.723607, 1.504355, 2.136762], [2.009495, 4.045514, 3.22053], [-1.921944, 7.249905, 0.213973], [1.254068, 1.205518, 3.474709], [-0.317087, 5.996269, 0.525872], [-2.996914, 3.934607, 2.900178], [-3.316873, 4.028154, 2.785696], [-3.400267, 4.280157, 2.689268], [-3.134842, 4.564875, 2.697192], [1.480563, 4.692567, 2.834068], [0.873682, 1.315452, 3.541585], [1.599355, 0.91622, 3.246769], [-3.292102, 7.125914, 2.768515], [3.74296, 4.511299, 0.616539], [4.698935, 1.55336, 0.26921], [-3.274387, 3.299421, 2.823946], [-2.88809, 3.410699, 2.955248], [1.171407, 1.76905, 3.688472], [1.430276, 3.92483, 3.473666], [3.916941, 2.553308, 0.018941], [0.701632, 2.442372, 3.778639], [1.562657, 2.302778, 3.660957], [4.476622, 1.152407, 0.182131], [-0.61136, 5.761367, 1.598838], [-3.102154, 3.691687, 2.903738], [1.816012, 5.546167, 2.380308], [3.853928, 4.25066, 0.750017], [1.234681, 3.581665, 3.673723], [1.862271, 1.361863, 3.355209], [1.346844, 4.146995, 3.327877], [1.70672, 4.080043, 3.274307], [0.897242, 1.908983, 3.6969], [-0.587022, 9.191132, -0.565301], [-0.217426, 5.674606, 2.019968], [0.278925, 6.120777, 0.485403], [1.463328, 3.578742, -2.001464], [-3.072985, 4.264581, 2.789502], [3.62353, 4.673843, 0.383452], [-3.053491, 8.752377, -2.908434], [-2.628687, 4.505072, 2.755601], [0.891047, 5.113781, 2.748272], [-2.923732, 3.06515, 2.866368], [0.848008, 4.754252, 2.896972], [-3.319184, 8.811641, -2.327412], [0.12864, 8.814781, -1.334456], [1.549501, 4.549331, -1.28243], [1.647161, 3.738973, 3.507719], [1.250888, 0.945599, 3.348739], [3.809662, 4.038822, 0.053142], [1.483166, 0.673327, 3.09156], [0.829726, 3.635921, 3.713103], [1.352914, 5.226651, 2.668113], [2.237352, 4.37414, 3.016386], [4.507929, 0.889447, 0.744249], [4.57304, 1.010981, 0.496588], [3.931422, 1.720989, 2.088175], [-0.463177, 5.989835, 0.834346], [-2.811236, 3.745023, 2.969587], [-2.805135, 4.219721, 2.841108], [-2.836842, 4.802543, 2.60826], [1.776716, 2.084611, 3.568638], [4.046881, 1.463478, 2.106273], [0.316265, 5.944313, 1.892785], [-2.86347, 2.776049, 2.77242], [-2.673644, 3.116508, 2.907104], [-2.621149, 4.018502, 2.903409], [-2.573447, 5.198013, 2.477481], [1.104039, 2.278985, 3.722469], [-4.602743, 4.306413, 0.902296], [-2.684878, 1.510731, 0.535039], [0.092036, 8.473269, -0.99413], [-1.280472, 5.602393, 1.928105], [-1.0279, 4.121582, -1.403103], [-2.461081, 3.304477, 2.957317], [-2.375929, 3.659383, 2.953233], [1.417579, 2.715389, 3.718767], [0.819727, 2.948823, 3.810639], [1.329962, 0.761779, 3.203724], [1.73952, 5.295229, 2.537725], [0.952523, 3.945016, 3.548229], [-2.569498, 0.633669, 2.84818], [-2.276676, 0.757013, 2.780717], [-2.013147, 7.354429, -0.003202], [0.93143, 1.565913, 3.600325], [1.249014, 1.550556, 3.585842], [2.287252, 4.072353, 3.124544], [-4.7349, 7.006244, 1.690653], [-3.500602, 8.80386, -2.009196], [-0.582629, 5.549138, 2.000923], [-1.865297, 6.356066, 1.313593], [-3.212154, 2.376143, -0.565593], [2.092889, 3.493536, -1.727931], [-2.528501, 2.784531, 2.833758], [-2.565697, 4.893154, 2.559605], [-2.153366, 5.04584, 2.465215], [1.631311, 2.568241, 3.681445], [2.150193, 4.699227, 2.807505], [0.507599, 5.01813, 2.775892], [4.129862, 1.863698, 2.015101], [3.578279, 4.50766, -0.009598], [3.491023, 4.806749, 1.549265], [0.619485, 1.625336, 3.605125], [1.107499, 2.932557, 3.790061], [-2.082292, 6.99321, 0.742601], [4.839909, 1.379279, 0.945274], [3.591328, 4.322645, -0.259497], [1.055245, 0.710686, 3.16553], [-3.026494, 7.842227, 1.624553], [0.146569, 6.119214, 0.981673], [-2.043687, 2.614509, 2.785526], [-2.302242, 3.047775, 2.936355], [-2.245686, 4.100424, 2.87794], [2.116148, 5.063507, 2.572204], [-1.448406, 7.64559, 0.251692], [2.550717, 4.9268, 2.517526], [-2.955456, 7.80293, -1.782407], [1.882995, 4.637167, 2.895436], [-2.014924, 3.398262, 2.954896], [-2.273654, 4.771227, 2.611418], [-2.162723, 7.876761, 0.702473], [-0.198659, 5.823062, 1.739272], [-1.280908, 2.133189, -0.921241], [2.039932, 4.251568, 3.136579], [1.477815, 4.354333, 3.108325], [0.560504, 3.744128, 3.6913], [-2.234018, 1.054373, 2.352782], [-3.189156, 7.686661, -2.514955], [-3.744736, 7.69963, 2.116973], [-2.283366, 2.878365, 2.87882], [-2.153786, 4.457481, 2.743529], [4.933978, 1.677287, 0.713773], [3.502146, 0.535336, 1.752511], [1.825169, 4.419253, 3.081198], [3.072331, 0.280979, 0.106534], [-0.508381, 1.220392, 2.878049], [-3.138824, 8.445394, -1.659711], [-2.056425, 2.954815, 2.897241], [-2.035343, 5.398477, 2.215842], [-3.239915, 7.126798, -0.712547], [-1.867923, 7.989805, 0.526518], [1.23405, 6.248973, 1.387189], [-0.216492, 8.320933, -0.862495], [-2.079659, 3.755709, 2.928563], [-1.78595, 4.300374, 2.805295], [-1.856589, 5.10678, 2.386572], [-1.714362, 5.544778, 2.004623], [1.722403, 4.200291, -1.408161], [0.195386, 0.086928, -1.318006], [1.393693, 3.013404, 3.710686], [-0.415307, 8.508471, -0.996883], [-1.853777, 0.755635, 2.757275], [-1.724057, 3.64533, 2.884251], [-1.884511, 4.927802, 2.530885], [-1.017174, 7.783908, -0.227078], [-1.7798, 2.342513, 2.741749], [-1.841329, 3.943996, 2.88436], [1.430388, 5.468067, 2.503467], [-2.030296, 0.940028, 2.611088], [-1.677028, 1.215666, 2.607771], [-1.74092, 2.832564, 2.827295], [4.144673, 0.631374, 0.503358], [4.238811, 0.653992, 0.762436], [-1.847016, 2.082815, 2.642674], [4.045764, 3.194073, 0.852117], [-1.563989, 8.112739, 0.303102], [-1.781627, 1.794836, 2.602338], [-1.493749, 2.533799, 2.797251], [-1.934496, 4.690689, 2.658999], [-1.499174, 5.777946, 1.747498], [-2.387409, 0.851291, 1.500524], [-1.872211, 8.269987, 0.392533], [-4.647726, 6.765771, 0.833653], [-3.157482, 0.341958, -0.20671], [-1.725766, 3.24703, 2.883579], [-1.458199, 4.079031, 2.836325], [-1.621548, 4.515869, 2.719266], [-1.607292, 4.918914, 2.505881], [-1.494661, 5.556239, 1.991599], [-1.727269, 7.423769, 0.012337], [-1.382497, 1.161322, 2.640222], [-1.52129, 4.681714, 2.615467], [-4.247127, 2.792812, 1.250843], [-1.576338, 0.742947, 2.769799], [-1.499257, 2.172763, 2.743142], [-1.480392, 3.103261, 2.862262], [1.049137, 2.625836, 3.775384], [-1.368063, 1.791587, 2.695516], [-1.307839, 2.344534, 2.767575], [-1.336758, 5.092221, 2.355225], [-1.5617, 5.301749, 2.21625], [-1.483362, 8.537704, 0.196752], [-1.517348, 8.773614, 0.074053], [-1.474302, 1.492731, 2.641433], [2.48718, 0.644247, -0.920226], [0.818091, 0.422682, 3.171218], [-3.623398, 6.930094, 3.033045], [1.676333, 3.531039, 3.591591], [1.199939, 5.683873, 2.365623], [-1.223851, 8.841201, 0.025414], [-1.286307, 3.847643, 2.918044], [-1.25857, 4.810831, 2.543605], [2.603662, 5.572146, 1.991854], [0.138984, 5.779724, 2.077834], [-1.267039, 3.175169, 2.890889], [-1.293616, 3.454612, 2.911774], [-2.60112, 1.277184, 0.07724], [2.552779, 3.649877, 3.163643], [-1.038983, 1.248011, 2.605933], [-1.288709, 4.390967, 2.761214], [-1.034218, 5.485963, 2.011467], [-1.185576, 1.464842, 2.624335], [-1.045682, 2.54896, 2.761102], [4.259176, 1.660627, 2.018096], [-0.961707, 1.717183, 2.598342], [-1.044603, 3.147464, 2.855335], [-0.891998, 4.685429, 2.669696], [-1.027561, 5.081672, 2.377939], [4.386506, 0.832434, 0.510074], [-1.014225, 9.064991, -0.175352], [-1.218752, 2.895443, 2.823785], [-0.972075, 4.432669, 2.788005], [-2.714986, 0.52425, 1.509798], [-0.699248, 1.517219, 2.645738], [-1.161581, 2.078852, 2.722795], [-0.845249, 3.286247, 2.996471], [1.068329, 4.443444, 2.993863], [3.98132, 3.715557, 1.027775], [1.658097, 3.982428, -1.651688], [-4.053701, 2.449888, 0.734746], [-0.910935, 2.214149, 2.702393], [0.087824, 3.96165, 3.439344], [-0.779714, 3.724134, 2.993429], [-1.051093, 3.810797, 2.941957], [-0.644941, 4.3859, 2.870863], [-2.98403, 8.666895, -3.691888], [-0.754304, 2.508325, 2.812999], [-4.635524, 3.662891, 0.913005], [-0.983299, 4.125978, 2.915378], [4.916497, 1.905209, 0.621315], [4.874983, 1.728429, 0.468521], [2.33127, 5.181957, 2.441697], [-0.653711, 2.253387, 2.7949], [-3.623744, 8.978795, -2.46192], [-4.555927, 6.160279, 0.215755], [-4.940628, 5.806712, 1.18383], [3.308506, 2.40326, -0.910776], [0.58835, 5.251928, -0.992886], [2.152215, 5.449733, 2.331679], [-0.712755, 0.766765, 3.280375], [-0.741771, 1.9716, 2.657235], [-4.828957, 5.566946, 2.635623], [-3.474788, 8.696771, -1.776121], [1.770417, 6.205561, 1.331627], [-0.620626, 4.064721, 2.968972], [-1.499187, 2.307735, -0.978901], [4.098793, 2.330245, 1.667951], [1.940444, 6.167057, 0.935904], [-2.314436, 1.104995, 1.681277], [-2.733629, 7.742793, 1.7705], [-0.452248, 4.719868, 2.740834], [-0.649143, 4.951713, 2.541296], [-0.479417, 9.43959, -0.676324], [-2.251853, 6.559275, 0.046819], [0.033531, 8.316907, -0.789939], [-0.513125, 0.995673, 3.125462], [-2.637602, 1.039747, 0.602434], [1.527513, 6.230089, 1.430903], [4.036124, 2.609846, 1.506498], [-3.559828, 7.877892, 1.228076], [-4.570736, 4.960193, 0.838201], [-0.432121, 5.157731, 2.467518], [-1.206735, 4.562511, -1.237054], [-0.823768, 3.788746, -1.567481], [-3.095544, 7.353613, -1.024577], [-4.056088, 7.631119, 2.062001], [-0.289385, 5.382261, 2.329421], [1.69752, 6.136483, 1.667037], [-0.168758, 5.061138, 2.617453], [2.853576, 1.605528, -1.229958], [-4.514319, 6.586675, 0.352756], [-2.558081, 7.741151, 1.29295], [1.61116, 5.92358, 2.071534], [3.936921, 3.354857, 0.091755], [-0.1633, 1.119272, 3.147975], [0.067551, 1.593475, 3.38212], [-1.303239, 2.328184, -1.011672], [-0.438093, 0.73423, 3.398384], [-4.62767, 3.898187, 0.849573], [0.286853, 4.165281, 3.284834], [-2.968052, 8.492812, -3.493693], [-0.111896, 3.696111, 3.53791], [-3.808245, 8.451731, -1.574742], [0.053416, 5.558764, 2.31107], [3.956269, 3.012071, 0.11121], [-0.710956, 8.106561, -0.665154], [0.234725, 2.717326, 3.722379], [-0.031594, 2.76411, 3.657347], [-0.017371, 4.700633, 2.81911], [0.215064, 5.034859, 2.721426], [-0.111151, 8.480333, -0.649399], [3.97942, 3.575478, 0.362219], [0.392962, 4.735392, 2.874321], [4.17015, 2.085087, 1.865999], [0.169054, 1.244786, 3.337709], [0.020049, 3.165818, 3.721736], [0.248212, 3.595518, 3.698376], [0.130706, 5.295541, 2.540034], [-4.541357, 4.798332, 1.026866], [-1.277485, 1.289518, -0.667272], [3.892133, 3.54263, -0.078056], [4.057379, 3.03669, 0.997913], [0.287719, 0.884758, 3.251787], [0.535771, 1.144701, 3.400096], [0.585303, 1.399362, 3.505353], [0.191551, 2.076246, 3.549355], [0.328656, 2.394576, 3.649623], [0.413124, 3.240728, 3.771515], [0.630361, 4.501549, 2.963623], [0.529441, 5.854392, 2.120225], [3.805796, 3.769958, -0.162079], [3.447279, 4.344846, -0.467276], [0.377618, 5.551116, 2.426017], [0.409355, 1.821269, 3.606333], [0.719959, 2.194726, 3.703851], [0.495922, 3.501519, 3.755661], [0.603408, 5.354097, 2.603088], [-4.605056, 7.531978, 1.19579], [0.907972, 0.973128, 3.356513], [0.750134, 3.356137, 3.765847], [0.4496, 3.993244, 3.504544], [-3.030738, 7.48947, -1.259169], [0.707505, 5.602005, 2.43476], [0.668944, 0.654891, 3.213797], [0.593244, 2.700978, 3.791427], [1.467759, 3.30327, 3.71035], [3.316249, 2.436388, 2.581175], [3.26138, 1.724425, 2.539028], [-1.231292, 7.968263, 0.281414], [-0.108773, 8.712307, -0.790607], [4.445684, 1.819442, 1.896988], [1.998959, 2.281499, 3.49447], [2.162269, 2.113817, 3.365449], [4.363397, 1.406731, 1.922714], [4.808, 2.225842, 0.611127], [2.735919, 0.771812, -0.701142], [1.897735, 2.878428, 3.583482], [-3.31616, 5.331985, 3.212394], [-3.3314, 6.018137, 3.313018], [-3.503183, 6.480103, 3.222216], [-1.904453, 5.750392, 1.913324], [-1.339735, 3.559592, -1.421817], [-1.044242, 8.22539, 0.037414], [1.643492, 3.110676, 3.647424], [3.992832, 3.686244, 0.710946], [1.774207, 1.71842, 3.475768], [-3.438842, 5.5713, 3.427818], [4.602447, 1.2583, 1.619528], [-0.925516, 7.930042, 0.072336], [-1.252093, 3.846565, -1.420761], [-3.426857, 5.072419, 2.97806], [-3.160408, 6.152629, 3.061869], [3.739931, 3.367082, 2.041273], [1.027419, 4.235891, 3.251253], [4.777703, 1.887452, 1.560409], [-3.318528, 6.733796, 2.982968], [2.929265, 4.962579, 2.271079], [3.449761, 2.838629, 2.474576], [-3.280159, 5.029875, 2.787514], [4.068939, 2.993629, 0.741567], [0.303312, 8.70927, -1.121972], [0.229852, 8.981322, -1.186075], [-0.011045, 9.148156, -1.047057], [-2.942683, 5.579613, 2.929297], [-3.145409, 5.698727, 3.205778], [-3.019089, 6.30887, 2.794323], [-3.217135, 6.468191, 2.970032], [-3.048298, 6.993641, 2.623378], [-3.07429, 6.660982, 2.702434], [3.612011, 2.5574, 2.25349], [2.54516, 4.553967, 2.75884], [-1.683759, 7.400787, 0.250868], [-1.756066, 7.463557, 0.448031], [-3.023761, 5.149697, 2.673539], [3.112376, 2.677218, 2.782378], [2.835327, 4.581196, 2.567146], [-2.973799, 7.225458, 2.506988], [-0.591645, 8.740662, -0.505845], [3.782861, 2.04337, 2.03066], [3.331604, 3.36343, 2.605047], [2.966866, 1.205497, 2.537432], [0.002669, 9.654748, -1.355559], [2.632801, 0.58497, 2.540311], [-2.819398, 5.087372, 2.521098], [2.616193, 5.332961, 2.194288], [-3.193973, 4.925634, 2.607924], [-3.12618, 5.27524, 2.944544], [-0.426003, 8.516354, -0.501528], [2.802717, 1.387643, 2.751649], [-3.120597, 7.889111, -2.75431], [2.636648, 1.71702, 2.991302], [-2.853151, 6.711792, 2.430276], [-2.843836, 6.962865, 2.400842], [1.9696, 3.199023, 3.504514], [-2.461751, 0.386352, 3.008994], [1.64127, 0.495758, 3.02958], [-4.330472, 5.409831, 0.025287], [-2.912387, 5.980416, 2.844261], [-2.490069, 0.211078, 2.985391], [3.581816, 4.809118, 0.733728], [2.693199, 2.647213, 3.126709], [-0.182964, 8.184108, -0.638459], [-2.226855, 0.444711, 2.946552], [-0.720175, 8.115055, 0.017689], [2.645302, 4.316212, 2.850139], [-0.232764, 9.329503, -0.918639], [4.852365, 1.471901, 0.65275], [2.76229, 2.014994, 2.957755], [-2.808374, 5.354301, 2.644695], [-2.790967, 6.406963, 2.547985], [-1.342684, 0.418488, -1.669183], [2.690675, 5.593587, -0.041236], [4.660146, 1.6318, 1.713314], [2.775667, 3.007229, 3.111332], [-0.396696, 8.963432, -0.706202], [2.446707, 2.740617, 3.321433], [-4.803209, 5.884634, 2.603672], [-2.652003, 1.6541, 1.5078], [3.932327, 3.972874, 0.831924], [2.135906, 0.955587, 2.986608], [2.486131, 2.053802, 3.124115], [-0.386706, 8.115753, -0.37565], [-2.720727, 7.325044, 2.224878], [-1.396946, 7.638016, -0.16486], [-0.62083, 7.989771, -0.144413], [-2.653272, 5.729684, 2.667679], [3.038188, 4.65835, 2.364142], [2.381721, 0.739472, 2.788992], [-2.345829, 5.474929, 2.380633], [-2.518983, 6.080562, 2.479383], [-2.615793, 6.839622, 2.186116], [-2.286566, 0.143752, 2.766848], [-4.771219, 6.508766, 1.070797], [3.717308, 2.905019, 2.097994], [2.50521, 3.016743, 3.295898], [2.208448, 1.56029, 3.216806], [3.346783, 1.01254, 2.119951], [2.653503, 3.26122, 3.175738], [-2.359636, 5.827519, 2.402297], [-1.952693, 0.558102, 2.853307], [-0.321562, 9.414885, -1.187501], [3.138923, 1.405072, 2.520765], [1.493728, 1.780051, 3.621969], [3.01817, 0.907291, 2.336909], [3.183548, 1.185297, 2.352175], [1.608619, 5.006753, 2.695131], [-4.723919, 6.836107, 1.095288], [-1.017586, 8.865429, -0.149328], [4.730762, 1.214014, 0.64008], [-2.135182, 6.647907, 1.495471], [-2.420382, 6.546114, 2.108209], [-2.458053, 7.186346, 1.896623], [3.437124, 0.275798, 1.138203], [0.095925, 8.725832, -0.926481], [2.417376, 2.429869, 3.287659], [2.279951, 1.200317, 3.049994], [2.674753, 2.326926, 3.044059], [-2.328123, 6.849164, 1.75751], [-3.418616, 7.853407, 0.126248], [-3.151587, 7.77543, -0.110889], [2.349144, 5.653242, 2.05869], [-2.273236, 6.085631, 2.242888], [-4.560601, 4.525342, 1.261241], [2.866334, 3.796067, 2.934717], [-2.17493, 6.505518, 1.791367], [3.12059, 3.283157, 2.818869], [3.037703, 3.562356, 2.866653], [0.066233, 9.488418, -1.248237], [2.749941, 0.975018, 2.573371], [-2.155749, 5.801033, 2.204009], [-2.162778, 6.261889, 2.028596], [1.936874, 0.459142, 2.956718], [3.176249, 4.335541, 2.440447], [4.356599, 1.029423, 1.700589], [3.873502, 3.082678, 1.80431], [2.895489, 4.243034, 2.735259], [-0.095774, 9.468195, -1.07451], [-1.124982, 7.886808, -0.480851], [3.032304, 3.065454, 2.897927], [3.692687, 4.5961, 0.957858], [-3.013045, 3.807235, -1.098381], [-0.790012, 8.92912, -0.367572], [1.905793, 0.73179, 2.996728], [3.530396, 3.426233, 2.356583], [2.12299, 0.624933, 2.929167], [-2.069196, 6.039284, 2.01251], [-3.565623, 7.182525, 2.850039], [2.959264, 2.376337, 2.829242], [2.949071, 1.822483, 2.793933], [4.036142, 0.763803, 1.703744], [-1.993527, 6.180318, 1.804936], [-0.030987, 0.766389, 3.344766], [-0.549683, 8.225193, -0.189341], [-0.765469, 8.272246, -0.127174], [-2.947047, 7.541648, -0.414113], [-3.050327, 9.10114, -3.435619], [3.488566, 2.231807, 2.399836], [3.352283, 4.727851, 1.946438], [4.741011, 2.162773, 1.499574], [-1.815093, 6.072079, 1.580722], [-3.720969, 8.267927, -0.984713], [1.932826, 3.714052, 3.427488], [3.323617, 4.438961, 2.20732], [0.254111, 9.26364, -1.373244], [-1.493384, 7.868585, -0.450051], [-0.841901, 0.776135, -1.619467], [0.243537, 6.027668, 0.091687], [0.303057, 0.313022, -0.531105], [-0.435273, 0.474098, 3.481552], [2.121507, 2.622389, 3.486293], [1.96194, 1.101753, 3.159584], [3.937991, 3.407551, 1.551392], [0.070906, 0.295753, 1.377185], [-1.93588, 7.631764, 0.651674], [-2.523531, 0.744818, -0.30985], [2.891496, 3.319875, 2.983079], [4.781765, 1.547061, 1.523129], [-2.256064, 7.571251, 0.973716], [3.244861, 3.058249, 2.724392], [-0.145855, 0.437775, 3.433662], [1.586296, 5.658538, 2.358487], [3.658336, 3.774921, 2.071837], [2.840463, 4.817098, 2.46376], [-1.219464, 8.122542, -0.672808], [-2.520906, 2.664486, -1.034346], [-1.315417, 8.471365, -0.709557], [3.429165, 3.74686, 2.446169], [3.074579, 3.840758, 2.767409], [3.569443, 3.166337, 2.333647], [2.294337, 3.280051, 3.359346], [2.21816, 3.66578, 3.269222], [2.158662, 4.151444, -1.357919], [1.13862, 4.380986, -1.404565], [3.388382, 2.749931, -0.840949], [3.059892, 5.084848, 2.026066], [3.204739, 2.075145, 2.640706], [3.387065, 1.42617, 2.305275], [3.910398, 2.670742, 1.750179], [3.471512, 1.945821, 2.395881], [4.08082, 1.070654, 1.960171], [-1.057861, 0.133036, 2.146707], [-0.151749, 5.53551, -0.624323], [3.233099, 4.003778, 2.571172], [2.611726, 5.319199, -0.499388], [2.682909, 1.094499, -1.206247], [-1.22823, 7.656887, 0.041409], [-2.293247, 7.259189, 0.013844], [0.081315, 0.202174, 3.286381], [-1.002038, 5.794454, -0.187194], [3.448856, 4.08091, 2.258325], [0.287883, 9.006888, -1.550641], [-3.851019, 4.059839, -0.646922], [3.610966, 4.205438, 1.913129], [2.239042, 2.950872, 3.449959], [0.216305, 0.442843, 3.328052], [1.87141, 2.470745, 3.574559], [3.811378, 2.768718, -0.228364], [2.511081, 1.362724, 2.969349], [-1.59813, 7.866506, 0.440184], [-3.307975, 2.851072, -0.894978], [-0.107011, 8.90573, -0.884399], [-3.855315, 2.842597, -0.434541], [2.517853, 1.090768, 2.799687], [3.791709, 2.36685, 2.002703], [4.06294, 2.773922, 0.452723], [-2.973289, 7.61703, -0.623653], [-2.95509, 8.924462, -3.446319], [2.861402, 0.562592, 2.184397], [-1.109725, 8.594206, -0.076812], [-0.725722, 7.924485, -0.381133], [-1.485587, 1.329994, -0.654405], [-4.342113, 3.233735, 1.752922], [-2.968049, 7.955519, -2.09405], [-3.130948, 0.446196, 0.85287], [-4.958475, 5.757329, 1.447055], [-3.086547, 7.615193, -1.953168], [-3.751923, 5.412821, 3.373373], [-4.599645, 7.480953, 1.677134], [1.133992, 0.274871, 0.032249], [-2.956512, 8.126905, -1.785461], [-0.960645, 4.73065, -1.191786], [-2.871064, 0.875559, 0.424881], [-4.932114, 5.99614, 1.483845], [-2.981761, 8.124612, -1.387276], [0.362298, 8.978545, -1.368024], [-4.408375, 3.046271, 0.602373], [2.865841, 2.322263, -1.344625], [-4.7848, 5.620895, 0.594432], [-2.88322, 0.338931, 1.67231], [-4.688101, 6.772931, 1.872318], [-4.903948, 6.164698, 1.27135], [2.85663, 1.005647, -0.906843], [2.691286, 0.209811, 0.050512], [-4.693636, 6.477556, 0.665796], [-4.472331, 6.861067, 0.477318], [0.883065, 0.204907, 3.073933], [-0.995867, 8.048729, -0.653897], [-0.794663, 5.670397, -0.390119], [3.313153, 1.638006, -0.722289], [-4.856459, 5.394758, 1.032591], [-3.005448, 7.783023, -0.819641], [3.11891, 2.036974, -1.08689], [-2.364319, 2.408419, 2.63419], [-2.927132, 8.75435, -3.537159], [-3.296222, 7.964629, -3.134625], [-1.642041, 4.13417, -1.301665], [2.030759, 0.176372, -1.030923], [-4.559069, 3.751053, 0.548453], [3.438385, 4.59454, -0.243215], [-2.561769, 7.93935, 0.177696], [2.990593, 1.335314, -0.943177], [1.2808, 0.276396, -0.49072], [-0.318889, 0.290684, 0.211143], [3.54614, 3.342635, -0.767878], [-3.073372, 7.780018, -2.357807], [-4.455388, 4.387245, 0.361038], [-4.659393, 6.276064, 2.767014], [0.636799, 4.482223, -1.426284], [-2.987681, 8.072969, -2.45245], [-2.610445, 0.763554, 1.792054], [3.358241, 2.006707, -0.802973], [-0.498347, 0.251594, 0.962885], [3.1322, 0.683312, 2.038777], [-4.389801, 7.493776, 0.690247], [0.431467, 4.22119, -1.614215], [-4.376181, 3.213141, 0.273255], [-4.872319, 5.715645, 0.829714], [-4.826893, 6.195334, 0.849912], [3.516562, 2.23732, -0.677597], [3.131656, 1.698841, -0.975761], [-4.754925, 5.411666, 1.989303], [-2.987299, 7.320765, -0.629479], [-3.757635, 3.274862, -0.744022], [3.487044, 2.541999, -0.699933], [-4.53274, 4.649505, 0.77093], [-1.424192, 0.099423, 2.633327], [3.090867, 2.476975, -1.146957], [-2.713256, 0.815622, 2.17311], [3.348121, 3.254167, -0.984896], [-3.031379, 0.16453, -0.309937], [-0.949757, 4.518137, -1.309172], [-0.889509, 0.095256, 1.288803], [3.539594, 1.966105, -0.553965], [-4.60612, 7.127749, 0.811958], [-2.332953, 1.444713, 1.624548], [3.136293, 2.95805, -1.138272], [3.540808, 3.069058, -0.735285], [3.678852, 2.362375, -0.452543], [-4.648898, 7.37438, 0.954791], [-0.646871, 0.19037, 3.344746], [2.2825, 0.29343, -0.826273], [-4.422291, 7.183959, 0.557517], [-4.694668, 5.246103, 2.541768], [-4.583691, 4.145486, 0.600207], [-2.934854, 7.912513, -1.539269], [-3.067861, 7.817472, -0.546501], [3.825095, 3.229512, -0.237547], [2.532494, 0.323059, 2.387105], [-2.514583, 0.692857, 1.23597], [-4.736805, 7.214384, 1.259421], [-2.98071, 8.409903, -2.468199], [2.621468, 1.385844, -1.406355], [3.811447, 3.560855, 1.847828], [3.432925, 1.497205, -0.489784], [3.746609, 3.631538, -0.39067], [3.594909, 2.832257, -0.576012], [-0.404192, 5.300188, -0.856561], [-4.762996, 6.483774, 1.702648], [-4.756612, 6.786223, 1.43682], [-2.965309, 8.437217, -2.785495], [2.863867, 0.74087, -0.429684], [4.02503, 2.968753, 1.392419], [3.669036, 1.833858, -0.304971], [-2.888864, 0.720537, 0.778057], [-2.36982, 0.979443, 1.054447], [-2.959259, 8.222303, -2.659724], [-3.467825, 7.545739, -2.333445], [2.153426, 0.446256, -1.20523], [-3.229807, 9.189699, -3.596609], [-3.72486, 8.773707, -2.046671], [3.687218, 3.297751, -0.523746], [1.381025, 0.08815, -1.185668], [-2.796828, 7.205622, -0.208783], [3.647194, 4.066232, -0.291507], [-4.578376, 3.885556, 1.52546], [-2.840262, 0.63094, 1.89499], [-2.429514, 0.922118, 1.820781], [-4.675079, 6.573925, 2.423363], [2.806207, 4.320188, -1.027372], [-1.289608, 0.097241, 1.321661], [-3.010731, 8.141334, -2.866148], [3.202291, 1.235617, -0.549025], [4.094792, 2.477519, 0.304581], [2.948403, 0.966873, -0.664857], [-4.83297, 5.920587, 2.095461], [-2.169693, 7.257277, 0.946184], [-1.335807, 3.057597, -1.303166], [-1.037877, 0.64151, -1.685271], [2.627919, 0.089814, 0.439074], [3.815794, 3.808102, 1.730493], [-2.973455, 8.433141, -3.08872], [-2.391558, 7.331428, 1.658264], [-4.333107, 4.529978, 1.850516], [-4.640293, 3.767107, 1.168841], [3.600716, 4.46931, 1.734024], [3.880803, 1.730158, -0.172736], [3.814183, 4.262372, 1.167042], [4.37325, 0.829542, 1.413729], [2.490447, 5.75111, 0.011492], [3.460003, 4.962436, 1.188971], [3.918419, 3.814234, 1.358271], [-0.807595, 8.840504, -0.953711], [3.752855, 4.20577, 1.57177], [-2.991085, 8.816501, -3.244595], [-2.333196, 7.128889, 1.551985], [3.977718, 3.570941, 1.25937], [4.360071, 0.755579, 1.079916], [4.637579, 1.027973, 1.032567], [-2.317, 7.421066, 1.329589], [-1.013404, 8.293662, -0.7823], [4.548023, 1.020644, 1.420462], [4.763258, 1.266798, 1.296203], [4.896, 2.073084, 1.255213], [4.015005, 3.325226, 1.093879], [4.94885, 1.860936, 0.894463], [-2.189645, 6.954634, 1.270077], [4.887442, 1.720992, 1.288526], [-3.184068, 7.871802, 0.956189], [-1.274318, 0.839887, -1.224389], [-2.919521, 7.84432, 0.541629], [-2.994586, 7.766102, 1.96867], [-3.417504, 9.241714, -3.093201], [-3.174563, 7.466456, 2.473617], [-3.263067, 9.069412, -3.003459], [-2.841592, 0.529833, 2.693434], [-3.611069, 9.158804, -2.829871], [-4.642828, 5.927526, 0.320549], [-3.809308, 9.051035, -2.692749], [-2.837582, 7.487987, -0.106206], [4.773025, 2.330442, 1.213899], [4.897435, 2.209906, 0.966657], [-3.067637, 8.164062, -1.12661], [-3.122129, 8.08074, -0.899194], [4.571019, 2.358113, 1.462054], [4.584884, 2.454418, 0.709466], [-3.661093, 7.146581, -0.475948], [4.735131, 2.415859, 0.933939], [4.207556, 2.540018, 1.218293], [-3.607595, 7.89161, -0.121172], [-1.527952, 0.775564, -1.061903], [4.53874, 2.503273, 1.099583], [-3.938837, 7.587988, 0.082449], [-4.853582, 6.152409, 1.787943], [-4.752214, 6.247234, 2.296873], [4.602935, 2.363955, 0.488901], [-1.81638, 6.365879, 0.868272], [0.595467, 4.744074, -1.32483], [1.87635, 3.511986, -1.842924], [4.330947, 2.534326, 0.720503], [4.108736, 2.750805, 0.904552], [-1.890939, 8.492628, -0.290768], [-3.504309, 6.173058, -0.422804], [-1.611992, 6.196732, 0.648736], [-3.899149, 7.826123, 1.088845], [-3.078303, 3.008813, -1.035784], [-2.798999, 7.844899, 1.340061], [-1.248839, 5.959105, 0.041761], [0.767779, 4.337318, 3.090817], [-3.831177, 7.515605, 2.432261], [-1.667528, 6.156208, 0.365267], [-1.726078, 6.237384, 1.100059], [-3.972037, 4.520832, -0.370756], [-4.40449, 7.636357, 1.520425], [-1.34506, 6.004054, 1.293159], [-1.233556, 6.049933, 0.500651], [-3.696869, 7.79732, 0.37979], [-3.307798, 8.949964, -2.698113], [-1.997295, 6.615056, 1.103691], [-3.219222, 8.336394, -1.150614], [-3.452623, 8.31866, -0.9417], [-3.94641, 2.990494, 2.212592], [-3.250025, 8.030414, -0.596097], [-2.02375, 1.571333, 2.397939], [-3.190358, 7.665013, 2.268183], [-2.811918, 7.618526, 2.145587], [-1.005265, 5.892303, 0.072158], [-0.93721, 5.974148, 0.906669], [-4.646072, 7.492193, 1.45312], [-0.252931, 1.797654, 3.140638], [-1.076064, 5.738433, 1.695953], [-3.980534, 7.744391, 1.735791], [-0.721187, 5.939396, 0.526032], [-0.42818, 5.919755, 0.229001], [-1.43429, 6.11622, 0.93863], [-0.985638, 5.939683, 0.290636], [-4.433836, 7.461372, 1.966437], [-3.696398, 7.844859, 1.547325], [-3.390772, 7.820186, 1.812204], [-2.916787, 7.864019, 0.804341], [-3.715952, 8.037269, -0.591341], [-4.204634, 7.72919, 1.119866], [-4.592233, 5.592883, 0.246264], [3.307299, 5.061701, 1.622917], [-3.515159, 7.601467, 2.368914], [-3.435742, 8.533457, -1.37916], [-0.269421, 4.545635, -1.366445], [-2.542124, 3.768736, -1.258512], [-3.034003, 7.873773, 1.256854], [-2.801399, 7.856028, 1.080137], [3.29354, 5.220894, 1.081767], [-2.35109, 1.299486, 1.01206], [-3.232213, 7.768136, 2.047563], [3.290415, 5.217525, 0.68019], [-3.415109, 7.731034, 2.144326], [3.440357, 4.962463, 0.373387], [3.147346, 5.352121, 1.386923], [2.847252, 5.469051, 1.831981], [3.137682, 5.410222, 1.050188], [3.102694, 5.310456, 1.676434], [-3.044601, 0.39515, 1.994084], [2.903647, 5.561338, 1.518598], [-3.810148, 8.093598, -0.889131], [4.234835, 0.803054, 1.593271], [3.240165, 5.228747, 0.325955], [3.037452, 5.509825, 0.817137], [2.635031, 5.795187, 1.439724], [3.071607, 5.318303, 0.080142], [2.909167, 5.611751, 1.155874], [3.044889, 5.465928, 0.486566], [2.502256, 5.770673, 1.740054], [-0.067497, 0.086416, -1.190239], [2.33326, 5.906051, 0.138295], [0.65096, 4.205423, 3.308767], [-2.671137, 7.936535, 0.432731], [2.14463, 5.879214, 1.866047], [-4.776469, 5.890689, 0.561986], [2.72432, 5.655145, 0.211951], [2.730488, 5.751455, 0.695894], [2.572682, 5.869295, 1.152663], [1.906776, 5.739123, 2.196551], [2.344414, 5.999961, 0.772922], [-3.377905, 7.448708, -1.863251], [2.285149, 5.968156, 1.459258], [2.385989, 5.928974, 0.3689], [2.192111, 6.087516, 0.959901], [2.36372, 6.001101, 1.074346], [1.972022, 6.079603, 1.591175], [1.87615, 5.976698, 1.91554], [-3.824761, 9.05372, -2.928615], [2.044704, 6.129704, 1.263111], [-2.583046, 0.849537, 2.497344], [-0.078825, 2.342205, 3.520322], [-0.704686, 0.537165, 3.397194], [-0.257449, 3.235334, 3.647545], [-0.332064, 1.448284, 3.022583], [-2.200146, 0.898284, -0.447212], [-2.497508, 1.745446, 1.829167], [0.30702, 4.416315, 2.978956], [-3.205197, 3.479307, -1.040582], [0.110069, 9.347725, -1.563686], [-0.82754, 0.883886, 3.065838], [-2.017103, 1.244785, 2.42512], [-0.421091, 2.309929, 3.153898], [-0.491604, 3.796072, 3.16245], [2.786955, 3.501241, -1.340214], [-3.229055, 4.380713, -0.899241], [3.730768, 0.76845, 1.90312], [-0.561079, 2.652382, 3.152463], [-3.461471, 3.086496, 2.662505], [-0.661405, 3.446009, 3.179939], [-0.915351, 0.636755, 3.243708], [-2.992964, 8.915628, -3.729833], [-0.439627, 3.502104, 3.42665], [-1.154217, 0.883181, 2.800835], [-1.736193, 1.465474, 2.595489], [-0.423928, 3.24435, 3.548277], [-0.511153, 2.871046, 3.379749], [-0.675722, 2.991756, 3.143262], [-1.092602, 0.599103, 3.090639], [-0.89821, 2.836952, 2.840023], [-2.658412, 0.781376, 0.960575], [-2.271455, 1.222857, 1.330478], [-0.877861, 1.111222, 2.72263], [-0.306959, 2.876987, 3.556044], [-3.839274, 7.84138, -0.918404], [-0.172094, 4.083799, 3.141708], [-1.548332, 0.2529, 2.864655], [-0.217353, 4.873911, -1.223104], [-3.384242, 3.181056, -0.95579], [-2.731704, 0.382421, 2.895502], [-1.285037, 0.551267, 2.947675], [0.077224, 4.246579, 3.066738], [-0.479979, 1.77955, 2.860011], [-0.716375, 1.224694, 2.666751], [-0.54622, 3.138255, 3.393457], [-2.33413, 1.821222, 2.124883], [-0.50653, 2.037147, 2.897465], [2.451291, 1.211389, -1.466589], [-3.160047, 2.894081, 2.724286], [-4.137258, 5.433431, 3.21201], [0.462896, 0.320456, -0.174837], [-0.37458, 2.609447, 3.379253], [-3.095244, 0.256205, 2.196446], [-4.197985, 5.732991, 3.262924], [-0.729747, 0.246036, 0.497036], [-2.356189, 5.062, -0.965619], [-1.609036, 0.25962, -1.487367], [-4.074381, 6.074061, 3.409459], [-3.619304, 4.0022, 2.65705], [-0.543393, 8.742896, -1.056622], [-4.30356, 6.858934, 2.879642], [-0.716688, 2.901831, -2.11202], [1.547362, 0.083189, 1.138764], [-0.250916, 0.275268, 1.201344], [-3.778035, 3.13624, 2.466177], [-4.594316, 5.771342, 3.01694], [-3.717706, 3.442887, 2.603344], [-4.311163, 5.224669, 3.019373], [-0.610389, 2.095161, -1.923515], [-3.040086, 6.196918, -0.429149], [-3.802695, 3.768247, 2.545523], [-0.159541, 2.043362, 3.328549], [-3.744329, 4.31785, 2.491889], [-3.047939, 0.214155, 1.873639], [-4.41685, 6.113058, 3.166774], [-1.165133, 0.460692, -1.742134], [-1.371289, 4.249996, -1.317935], [-3.447883, 0.3521, 0.466205], [-4.495555, 6.465548, 2.944147], [-3.455335, 0.171653, 0.390816], [-3.964028, 4.017196, 2.376009], [-1.323595, 1.763126, -0.750772], [-3.971142, 5.277524, -0.19496], [-3.222052, 0.237723, 0.872229], [-4.403784, 3.89107, 1.872077], [-3.333311, 0.342997, 0.661016], [-4.495871, 4.29606, 1.63608], [-3.636081, 2.760711, 2.361949], [-4.487235, 3.559608, 1.66737], [-4.719787, 7.26888, 1.658722], [-1.086143, 9.035741, -0.707144], [-2.339693, 1.600485, -0.404817], [-4.642011, 7.123829, 1.990987], [-1.498077, 3.854035, -1.369787], [-4.188372, 4.729363, 2.02983], [-3.116344, 5.882284, -0.468884], [-4.305236, 4.246417, 1.976991], [-3.022509, 0.22819, 1.065688], [-2.799916, 0.52022, 1.128319], [-4.262823, 3.534409, 2.020383], [-4.221533, 3.947676, 2.11735], [-3.744353, 4.391712, -0.6193], [-1.272905, 0.156694, -1.741753], [-3.62491, 2.669825, -0.549664], [-4.180756, 3.096179, 1.987215], [-4.059276, 4.305313, 2.232924], [-2.812753, 0.183226, 1.370267], [-4.032437, 3.512234, 2.309985], [-0.03787, 0.28188, 0.530391], [-4.711562, 5.468653, 2.822838], [-4.500636, 6.953314, 2.564445], [-4.479433, 7.216991, 2.270682], [3.990562, 0.50522, 0.716309], [-2.512229, 6.863447, -0.100658], [-2.968058, 6.956639, -0.37061], [2.550375, 3.142683, -1.54068], [-2.320059, 3.521605, -1.279397], [-4.556319, 6.64662, 2.745363], [-4.281091, 7.108116, 2.667598], [-2.050095, 8.411689, 0.121353], [-2.44854, 1.135487, 0.851875], [3.121815, 0.699943, -0.277167], [-4.69877, 6.00376, 2.843035], [-1.360599, 8.824742, -0.595597], [1.128437, 0.171611, 0.301691], [-4.360146, 6.289423, 0.042233], [1.400795, 4.088829, -1.620409], [-3.193462, 8.460137, -3.559446], [-3.168771, 8.878431, -3.635795], [-3.434275, 9.304302, -3.460878], [-3.349993, 8.808093, -3.38179], [-3.304823, 8.323865, -3.325905], [-3.572607, 9.308843, -3.207672], [-3.166393, 8.201215, -3.43014], [-3.451638, 9.05331, -3.351345], [-3.309591, 8.549758, -3.375055], [-3.527992, 8.793926, -3.100376], [-3.6287, 8.981677, -3.076319], [-3.445505, 8.001887, -2.8273], [-3.408011, 8.221014, -3.039237], [-3.65928, 8.740382, -2.808856], [-3.878019, 8.797295, -2.462866], [-3.515132, 8.232341, -2.747739], [-3.460331, 8.51524, -3.06818], [-3.403703, 7.658628, -2.648789], [-3.507113, 8.00159, -2.582275], [-3.607373, 8.174737, -2.401723], [-3.749043, 8.378084, -2.226959], [-3.648514, 8.502213, -2.6138], [-2.534199, 0.904753, 2.021148], [1.4083, 5.744252, -0.571402], [-3.852536, 8.571009, -2.352358], [2.868255, 5.373126, -0.163705], [2.224363, 4.669891, -1.061586], [-4.528281, 4.885838, 1.340274], [1.30817, 4.609629, -1.28762], [-4.519698, 3.422501, 1.354826], [-3.549955, 7.783228, -2.332859], [1.12313, 6.120856, 0.045115], [-3.620324, 7.57716, -2.033423], [-0.798833, 2.624133, -1.992682], [-3.617587, 7.783148, -2.051383], [-3.669293, 8.103776, -2.10227], [-3.892417, 8.667436, -2.167288], [-0.537435, 0.285345, -0.176267], [-0.841522, 3.299866, -1.887861], [-0.761547, 3.647082, -1.798953], [-3.661544, 7.85708, -1.867924], [-3.886763, 8.551783, -1.889171], [-0.591244, 1.549749, -1.714784], [-0.775276, 1.908218, -1.597609], [-0.961458, 2.573273, -1.695549], [-2.215672, 1.335009, 2.143031], [-4.622674, 4.130242, 1.220683], [1.07344, 0.290099, 1.584734], [-0.976906, 2.92171, -1.76667], [-1.13696, 3.194401, -1.513455], [-3.743262, 7.99949, -1.629286], [-2.876359, 4.900986, -0.879556], [0.550835, 3.905557, -2.031372], [0.777647, 4.992314, -1.215703], [1.445881, 4.266201, -1.414663], [1.274222, 5.510543, -0.824495], [-0.864685, 2.318581, -1.702389], [-0.627458, 3.820722, -1.743153], [-3.867699, 8.30866, -1.850066], [1.635287, 5.45587, -0.83844], [-1.037876, 2.538589, -1.513504], [-4.38993, 4.73926, 1.699639], [0.048709, 4.765232, -1.279506], [-0.626548, 1.339887, -1.595114], [-3.682827, 7.643453, -1.723398], [-3.868783, 8.180191, -1.511743], [-0.76988, 1.508373, -1.419599], [-1.138374, 2.766765, -1.448163], [1.699883, 5.780752, -0.475361], [1.214305, 0.308517, 1.866405], [-1.713642, 0.373461, -1.265204], [-1.582388, 0.58294, -1.267977], [-0.879549, 1.821581, -1.313787], [0.519057, 5.858757, -0.381397], [-3.770989, 2.449208, -0.132655], [0.087576, 0.156713, -1.53616], [-0.942622, 2.146534, -1.421494], [-1.026192, 1.022164, -1.145423], [-0.964079, 1.645473, -1.067631], [-1.109128, 2.458789, -1.29106], [-1.037478, 0.209489, -1.805424], [-3.724391, 7.599686, -1.273458], [-3.787898, 7.951792, -1.304794], [3.821677, 2.165581, -0.181535], [-2.39467, 0.304606, -0.570375], [-2.352928, 1.0439, 2.079369], [-0.288899, 9.640684, -1.006079], [-3.472118, 7.263001, -1.080326], [-1.240769, 0.972352, -0.976446], [-1.845253, 0.356801, -0.995574], [-2.32279, 7.915361, -0.057477], [-1.08092, 2.179315, -1.168821], [4.598833, 2.156768, 0.280264], [-4.725417, 6.442373, 2.056809], [-0.490347, 9.46429, -0.981092], [-1.99652, 0.09737, -0.765828], [-1.137793, 1.888846, -0.894165], [-0.37247, 4.29661, -1.465199], [-0.184631, 5.692946, -0.421398], [-3.751694, 7.742231, -1.086908], [-1.001416, 1.298225, -0.904674], [-3.536884, 7.190777, -0.788609], [-3.737597, 7.511281, -0.940052], [-1.766651, 0.669388, -0.873054], [3.112245, 3.474345, -1.129672], [-0.175504, 3.81298, -2.0479], [-3.766762, 7.412514, -0.681569], [-0.63375, 9.439424, -0.785128], [-0.518199, 4.768982, -1.258625], [0.790619, 4.212759, -1.610218], [-3.761951, 3.742528, -0.756283], [0.897483, 5.679808, -0.612423], [2.221126, 4.427468, -1.252155], [-0.728577, 5.846457, 0.062702], [0.194451, 9.503908, -1.482461], [-0.099243, 9.385459, -1.39564], [0.643185, 3.636855, -2.180247], [0.894522, 5.900601, -0.356935], [2.595516, 4.75731, -0.893245], [1.108497, 3.936893, -1.905098], [1.989894, 5.789726, -0.343268], [-3.802345, 7.655508, -0.613817], [2.339353, 4.96257, -0.90308], [0.12564, 4.013324, -1.879236], [-4.078965, 3.683254, -0.445439], [2.092899, 5.256128, -0.831607], [0.427571, 0.291769, 1.272964], [2.335549, 3.480056, -1.581949], [-0.15687, 0.324827, -1.648922], [-0.536522, 5.760786, -0.203535], [1.507082, 0.078251, -0.923109], [-1.854742, 0.134826, 2.698774], [-3.939827, 3.168498, -0.526144], [-3.98461, 3.39869, -0.533212], [-3.961738, 4.217132, -0.489147], [4.273789, 2.181164, 0.153786], [-0.470498, 5.645664, -0.439079], [-0.414539, 5.488017, -0.673379], [-0.097462, 5.062739, -1.114863], [1.198092, 5.882232, -0.391699], [2.855834, 5.085022, -0.498678], [1.037998, 4.129757, -1.701811], [1.728091, 5.068444, -1.063761], [-3.832258, 2.625141, -0.311384], [-4.078526, 3.070256, -0.284362], [-4.080365, 3.954243, -0.440471], [-0.152578, 5.276267, -0.929815], [-1.489635, 8.928082, -0.295891], [0.759294, 5.15585, -1.087374], [-4.000338, 2.801647, -0.235135], [-4.290801, 3.823209, -0.19374], [-4.221493, 4.25618, -0.189894], [-4.066195, 4.71916, -0.201724], [-0.155386, 4.076396, -1.662865], [3.054571, 4.414305, -0.825985], [-1.652919, 8.726499, -0.388504], [-3.042753, 0.560068, -0.126425], [-2.434456, 1.118088, -0.213563], [-2.623502, 1.845062, -0.283697], [-4.233371, 3.43941, -0.202918], [2.726702, 3.82071, -1.280097], [0.184199, 4.14639, -1.673653], [-1.289203, 0.624562, -1.560929], [-3.823676, 7.382458, -0.407223], [0.476667, 5.064419, -1.143742], [-3.873651, 4.955112, -0.269389], [1.349666, 5.312227, -1.000274], [-2.043776, 8.434488, -0.108891], [-2.763964, 0.733395, -0.129294], [-4.380505, 3.664409, -0.024546], [-0.71211, 5.341811, -0.803281], [-3.960858, 7.183112, -0.118407], [-3.822277, 7.712853, -0.263221], [-2.346808, 8.108588, 0.063244], [-1.841731, 8.642999, -0.142496], [-2.600055, 0.985604, -0.043595], [-3.513057, 2.213243, -0.044151], [-3.963492, 2.603055, -0.080898], [-4.258066, 3.14537, -0.027046], [-4.261572, 5.00334, 0.13004], [0.795464, 3.99873, -1.905688], [-3.300873, 0.384761, 0.013271], [-2.770244, 0.881942, 0.077313], [-3.456227, 1.993871, 0.301054], [-4.441987, 3.914144, 0.177867], [-4.367075, 6.611414, 0.165312], [-3.201767, 0.576292, 0.105769], [-3.174354, 0.645009, 0.440373], [-2.996576, 0.74262, 0.161325], [-2.724979, 1.656497, 0.092983], [-3.261757, 2.017742, -0.070763], [-4.280173, 4.518235, -0.002999], [-4.471073, 5.945358, 0.05202], [-3.877137, 2.40743, 0.274928], [-4.371219, 4.252758, 0.078039], [-3.400914, 0.40983, 0.238599], [-4.44293, 3.523242, 0.146339], [-4.574528, 5.279761, 0.353923], [-4.226643, 7.191282, 0.269256], [-4.16361, 2.843204, 0.097727], [-4.528506, 5.011661, 0.536625], [0.35514, 5.664802, -0.572814], [2.508711, 5.580976, -0.266636], [2.556226, 3.633779, -1.426362], [1.878456, 4.533714, -1.223744], [2.460709, 4.440241, -1.1395], [2.218589, 5.514603, -0.560066], [2.263712, 5.737023, -0.250694], [2.964981, 3.814858, -1.139927], [0.991384, 5.304131, -0.999867], [2.81187, 4.547292, -0.916025], [2.918089, 4.768382, -0.702808], [3.262403, 4.414286, -0.657935], [0.652136, 6.089113, 0.069089], [3.361389, 3.5052, -0.946123], [2.613042, 5.037192, -0.697153], [0.094339, 4.36858, -1.451238], [3.290862, 4.155716, -0.732318], [2.658063, 4.073614, -1.217455], [3.260349, 3.753257, -0.946819], [1.124268, 4.862463, -1.207855], [3.35158, 4.899247, -0.027586], [3.194057, 4.691257, -0.524566], [3.090119, 5.116085, -0.23255], [2.418965, 3.811753, -1.419399], [2.191789, 3.877038, -1.47023], [4.043166, 2.034188, 0.015477], [-1.026966, 0.86766, -1.410912], [1.937563, 3.860005, -1.617465], [2.98904, 4.101806, -0.998132], [-0.142611, 5.865305, -0.100872], [3.972673, 2.292069, 0.089463], [3.23349, 3.959925, -0.849829], [0.16304, 5.857276, -0.216704], [4.122964, 1.770061, -0.114906], [2.099057, 4.978374, -0.98449], [3.502411, 3.76181, -0.667502], [2.079484, 5.939614, -0.036205], [-0.084568, 3.525193, -2.253506], [0.423859, 4.06095, -1.845327], [1.6013, 6.006466, -0.153429], [0.271701, 3.844964, -2.078748], [0.273577, 5.218904, -0.994711], [-0.410578, 3.92165, -1.773635], [1.941954, 5.60041, -0.621569], [0.100825, 5.462131, -0.774256], [-0.53016, 3.619892, -2.027451], [-0.822371, 5.517453, -0.605747], [-2.474925, 7.670892, -0.020174], [4.01571, 0.830194, -0.013793], [-0.400092, 5.094112, -1.041992], [-2.887284, 5.581246, -0.525324], [-1.559841, 6.050972, 0.079301], [-0.469317, 3.291673, -2.235211], [0.337397, 3.467926, -2.295458], [-2.632074, 5.573701, -0.582717], [-0.030318, 6.011395, 0.276616], [-0.934373, 0.388987, -1.780523], [-2.661263, 5.844838, -0.425966], [0.549353, 5.489646, -0.807268], [-2.194355, 6.197491, -0.109322], [-2.289618, 5.664813, -0.581098], [1.583583, 3.796366, -1.844498], [0.855295, 0.215979, -1.425557], [-2.627569, 5.300236, -0.767174], [4.333347, 2.384332, 0.399129], [-1.880401, 5.583843, -0.696561], [-2.172346, 5.324859, -0.846246], [-2.27058, 5.906265, -0.388373], [-1.960049, 5.889346, -0.397593], [0.965756, 3.67547, -2.105671], [-2.014066, 6.431125, 0.287254], [-1.776173, 5.287097, -0.89091], [-2.025852, 5.089562, -0.980218], [-1.886418, 6.108358, -0.000667], [-1.600803, 5.785347, -0.491069], [-1.66188, 4.968053, -1.042535], [-1.600621, 5.962818, -0.188044], [-1.588831, 5.615418, -0.665456], [4.46901, 1.880138, 0.057248], [-1.978845, 0.927399, -0.554856], [-1.408074, 5.325266, -0.83967], [1.923123, 4.843955, -1.101389], [-2.87378, 0.117106, -0.412735], [-1.222193, 5.62638, -0.539981], [-2.632537, 0.166349, -0.489218], [-1.370865, 5.838832, -0.341026], [-1.067742, 5.448874, -0.692701], [-1.073798, 5.220878, -0.908779], [-1.147562, 4.950417, -1.079727], [-2.789115, 4.531047, -1.042713], [-3.550826, 4.170487, -0.806058], [-3.331694, 4.798177, -0.69568], [-3.689404, 4.688543, -0.534317], [-3.511509, 5.106246, -0.483632], [1.796344, 0.076137, 0.080455], [-3.306354, 5.473605, -0.478764], [-2.692503, 3.346604, -1.20959], [-3.963056, 5.187462, 3.113156], [-3.901231, 6.391477, -0.246984], [4.484234, 1.518638, -0.001617], [4.308829, 1.657716, -0.119275], [4.290045, 1.339528, -0.110626], [-3.514938, 3.524974, -0.909109], [-2.1943, 2.12163, -0.71966], [4.108206, 1.091087, -0.11416], [3.785312, 1.392435, -0.28588], [4.092886, 1.480476, -0.210655], [-2.965937, 6.469006, -0.379085], [-3.708581, 2.962974, -0.63979], [-3.297971, 2.218917, -0.299872], [3.806949, 0.804703, -0.11438], [3.747957, 1.059258, -0.273069], [-3.101827, 4.111444, -1.006255], [-1.536445, 4.658913, -1.195049], [-3.549826, 2.450555, -0.375694], [-3.676495, 2.108366, 0.534323], [-3.674738, 5.925075, -0.400011], [-2.250115, 2.848335, -1.121174], [-3.698062, 5.667567, -0.381396], [3.468966, 0.734643, -0.190624], [-3.97972, 5.670078, -0.26874], [-3.002087, 4.337837, -1.033421], [-3.356392, 2.608308, -0.713323], [-1.833016, 3.359983, -1.28775], [-1.989069, 3.632416, -1.305607], [3.591254, 0.542371, 0.026146], [3.364927, 1.082572, -0.342613], [-3.393759, 3.866801, -0.937266], [-4.124865, 5.549529, -0.161729], [-4.423423, 5.687223, 0.000103], [-1.496881, 2.601785, -1.114328], [-2.642297, 6.496932, -0.264175], [-3.684236, 6.819423, -0.320233], [-2.286996, 3.167067, -1.246651], [-1.624896, 8.44848, -0.530014], [-3.666787, 2.159266, 0.268149], [-2.402625, 2.011243, -0.56446], [-2.736166, 2.259839, -0.6943], [-2.168611, 3.89078, -1.292206], [-2.065956, 3.345708, -1.281346], [-2.778147, 2.675605, -0.995706], [-3.507431, 4.513272, -0.71829], [-2.301184, 4.293911, -1.238182], [3.205808, 0.211078, 0.394349], [-2.129936, 4.870577, -1.080781], [-2.287977, 2.496593, -0.934069], [-2.701833, 2.931814, -1.114509], [3.294795, 0.50631, -0.081062], [-2.552829, 7.468771, -0.021541], [3.06721, 0.944066, -0.43074], [-2.86086, 1.973622, -0.303132], [-3.598818, 5.419613, -0.401645], [-1.524381, 0.080156, -1.61662], [-1.907291, 2.646274, -1.039438], [2.950783, 0.407562, -0.105407], [-1.663048, 1.655038, -0.689787], [-1.728102, 1.110064, -0.635963], [-2.085823, 7.686296, -0.159745], [2.883518, 3.157009, -1.30858], [-2.724116, 0.417169, -0.389719], [-1.788636, 7.862672, -0.346413], [-2.186418, 1.249609, -0.434583], [-3.092434, 2.606657, -0.860002], [-1.737314, 3.874201, -1.330986], [2.564522, 0.422967, -0.390903], [1.670782, 3.538432, -1.924753], [-2.338131, 4.02578, -1.286673], [-1.916516, 4.054121, -1.301788], [2.87159, 2.034949, -1.267139], [-1.931518, 3.062883, -1.197227], [-0.816602, 0.135682, 3.104104], [0.469392, 0.213916, -1.489608], [2.574055, 1.950091, -1.514427], [2.733595, 2.682546, -1.461213], [-1.915407, 4.693647, -1.151721], [-3.412883, 5.867094, -0.450528], [2.28822, 0.120432, -0.04102], [2.244477, 0.14424, -0.376933], [-1.676198, 3.570698, -1.328031], [-1.821193, 4.366982, -1.266271], [-1.552208, 8.099221, -0.53262], [-1.727419, 2.39097, -0.989456], [-2.468226, 4.711663, -1.069766], [-2.451669, 6.113319, -0.273788], [2.635447, 2.295842, -1.518361], [-2.020809, 8.150253, -0.246714], [2.292455, 0.805596, -1.3042], [2.641556, 1.65665, -1.466962], [2.409062, 2.842538, -1.635025], [2.456682, 1.459484, -1.57543], [-1.691047, 3.173582, -1.247082], [-1.865642, 1.957608, -0.768683], [-3.401579, 0.20407, 0.100932], [2.301981, 1.7102, -1.650461], [2.342929, 2.611944, -1.690713], [-1.676111, 2.923894, -1.17835], [-2.992039, 3.547631, -1.118945], [-3.571677, 6.504634, -0.375455], [2.141764, 1.460869, -1.702464], [-3.221958, 5.146049, -0.615632], [2.19238, 2.949367, -1.747242], [2.320791, 2.232971, -1.706842], [2.088678, 2.585235, -1.813159], [-2.196404, 0.592218, -0.569709], [-2.120811, 1.836483, -0.62338], [-1.949935, 2.271249, -0.874128], [2.235901, 1.110183, -1.510719], [2.020157, 3.241128, -1.803917], [2.054336, 1.949394, -1.792332], [-3.094117, 4.996595, -0.740238], [2.038063, 0.635949, -1.402041], [1.980644, 1.684408, -1.76778], [1.587432, 3.306542, -1.991131], [1.935322, 0.976267, -1.602208], [1.922621, 1.235522, -1.698813], [1.712495, 1.911874, -1.903234], [1.912802, 2.259273, -1.888698], [1.884367, 0.355453, -1.312633], [1.676427, 0.76283, -1.539455], [1.78453, 2.83662, -1.943035], [1.697312, 0.120281, -1.150324], [1.648318, 2.484973, -1.999505], [-4.051804, 5.958472, -0.231731], [-1.964823, 1.464607, -0.58115], [1.55996, 2.183486, -1.971378], [1.628125, 1.045912, -1.707832], [1.701684, 1.540428, -1.827156], [1.567475, 4.869481, -1.184665], [1.432492, 0.843779, -1.648083], [1.173837, 2.978983, -2.156687], [1.235287, 3.37975, -2.09515], [1.252589, 1.525293, -1.949205], [1.159334, 2.336379, -2.105361], [1.49061, 2.695263, -2.083216], [-4.122486, 6.782604, -0.02545], [1.173388, 0.279193, -1.423418], [1.505684, 0.380815, -1.414395], [1.391423, 1.343031, -1.843557], [1.263449, 2.73225, -2.144961], [1.295858, 0.597122, -1.515628], [1.245851, 3.729126, -1.993015], [-2.761439, 6.23717, -0.365856], [0.978887, 1.664888, -2.046633], [1.219542, 0.982729, -1.785486], [1.315915, 1.91748, -2.02788], [-3.052746, 2.127222, -0.369082], [0.977656, 1.36223, -1.944119], [0.936122, 3.39447, -2.203007], [-2.740036, 4.184702, -1.122849], [0.853581, 2.864694, -2.260847], [0.719569, 0.818762, -1.763618], [0.839115, 1.159359, -1.907943], [0.932069, 1.94559, -2.117962], [0.579321, 3.326747, -2.299369], [0.86324, 0.597822, -1.565106], [0.574567, 1.158452, -1.943123], [0.525138, 2.137252, -2.213867], [0.779941, 2.342019, -2.206157], [0.915255, 2.618102, -2.209041], [0.526426, 3.02241, -2.321826], [0.495431, 2.521396, -2.295905], [0.80799, 3.156817, -2.286432], [0.273556, 1.304936, -2.012509], [0.664326, 1.530024, -2.048722], [0.219173, 2.32907, -2.323212], [0.405324, 0.695359, -1.704884], [0.398827, 0.946649, -1.843899], [0.345109, 1.608829, -2.100174], [-2.356743, 0.062032, -0.4947], [-3.001084, 0.27146, 2.560034], [-2.064663, 0.303055, -0.697324], [0.221271, 3.174023, -2.374399], [0.195842, 0.437865, -1.621473], [-0.385613, 0.297763, 1.960096], [1.999609, 0.108928, -0.79125], [0.351698, 9.227494, -1.57565], [0.021477, 2.191913, -2.309353], [0.246381, 2.836575, -2.356365], [1.543281, 0.237539, 1.901906], [0.031881, 9.147022, -1.454203], [-0.001881, 1.648503, -2.108044], [0.333423, 1.907088, -2.204533], [0.044063, 2.634032, -2.368412], [-0.028148, 3.053684, -2.390082], [0.02413, 3.34297, -2.36544], [-0.272645, 9.02879, -1.238685], [-0.006348, 0.832044, -1.758222], [-0.321105, 1.458754, -1.886313], [-0.153948, 8.618809, -1.105353], [-0.409303, 1.137783, -1.720556], [-0.410054, 1.742789, -1.957989], [-0.287905, 2.380404, -2.294509], [-0.261375, 2.646629, -2.356322], [-0.221986, 3.215303, -2.345844], [-0.31608, 0.687581, -1.71901], [-0.537705, 0.855802, -1.648585], [-0.142834, 1.193053, -1.87371], [-0.24371, 2.044435, -2.176958], [-0.437999, 2.959748, -2.299698], [-0.78895, 0.176226, -1.729046], [-0.608509, 0.546932, -1.734032], [-0.693698, 4.478782, -1.369372], [-0.669153, 8.469645, -0.911149], [-0.741857, 1.082705, -1.458474], [-0.554059, 2.440325, -2.141785], [2.09261, 0.153182, 2.57581], [1.792547, 0.111794, 2.563777], [1.855787, 0.189541, 2.835089], [1.492601, 0.232246, 2.987681], [-0.284918, 0.236687, 3.429738], [2.604841, 0.11997, 1.01506], [0.331271, 0.168113, 3.124031], [0.280606, 0.308368, 2.495937], [0.544591, 0.325711, 2.081274], [0.193145, 0.19154, -0.977556], [3.810099, 0.42324, 1.032202], [3.54622, 0.379245, 1.392814], [0.61402, 0.276328, 0.849356], [-1.198628, 0.144953, 2.911457], [4.17199, 0.68037, 1.391526], [0.88279, 0.321339, 2.059129], [1.93035, 0.109992, 2.054154], [1.620331, 0.121986, 2.37203], [2.374812, 0.10921, 1.734876], [-0.031227, 0.294412, 2.593687], [4.075018, 0.561914, 1.038065], [-0.570366, 0.126583, 2.975558], [0.950052, 0.318463, 1.804012], [1.130034, 0.117125, 0.98385], [2.123049, 0.08946, 1.665911], [2.087572, 0.068621, 0.335013], [2.927337, 0.167117, 0.289611], [0.528876, 0.313434, 3.205969], [1.174911, 0.162744, 1.328262], [-4.88844, 5.59535, 1.661134], [-4.709607, 5.165338, 1.324082], [0.871199, 0.277021, 1.263831], [-3.910877, 2.349318, 1.272269], [1.56824, 0.118605, 2.768112], [1.179176, 0.152617, -0.858003], [1.634629, 0.247872, 2.128625], [-4.627425, 5.126935, 1.617836], [3.845542, 0.54907, 1.45601], [2.654006, 0.165508, 1.637169], [-0.678324, 0.26488, 1.974741], [2.451139, 0.100377, 0.213768], [0.633199, 0.286719, 0.403357], [-0.533042, 0.2524, 1.373267], [0.99317, 0.171106, 0.624966], [-0.100063, 0.306466, 2.170225], [1.245943, 0.092351, 0.661031], [1.390414, 0.198996, -0.0864], [-4.457265, 5.030531, 2.138242], [2.89776, 0.146575, 1.297468], [1.802703, 0.088824, -0.490405], [1.055447, 0.309261, 2.392437], [2.300436, 0.142429, 2.104254], [2.33399, 0.187756, 2.416935], [2.325183, 0.134349, 0.574063], [2.410924, 0.370971, 2.637115], [1.132924, 0.290511, 3.061], [1.764028, 0.070212, -0.80535], [2.156994, 0.397657, 2.844061], [0.920711, 0.225527, -0.882456], [-4.552135, 5.24096, 2.85514], [0.210016, 0.309396, 2.064296], [0.612067, 0.136815, -1.086002], [3.150236, 0.426757, 1.802703], [-0.24824, 0.282258, 1.470997], [0.974269, 0.301311, -0.640898], [-4.401413, 5.03966, 2.535553], [0.644319, 0.274006, -0.817806], [0.332922, 0.309077, 0.108474], [3.610001, 0.317447, 0.689353], [3.335681, 0.358195, 0.118477], [0.623544, 0.318983, -0.4193], [-0.11012, 0.307747, 1.831331], [-0.407528, 0.291044, 2.282935], [0.069783, 0.285095, 0.950289], [0.970135, 0.310392, -0.283742], [0.840564, 0.306898, 0.098854], [-0.541827, 0.267753, 1.683795], [-3.956082, 4.55713, 2.297164], [-4.161036, 2.834481, 1.64183], [-4.093952, 4.977551, 2.747747], [2.661819, 0.261867, 1.926145], [-3.749926, 2.161875, 0.895238], [-2.497776, 1.3629, 0.791855], [0.691482, 0.304968, 1.582939], [-4.013193, 4.830963, 2.4769], [-3.639585, 2.091265, 1.304415], [-3.9767, 2.563053, 1.6284], [-3.979915, 2.788616, 1.977977], [0.388782, 0.312656, 1.709168], [-3.40873, 1.877324, 0.851652], [-3.671637, 5.136974, 3.170734], [-3.12964, 1.852012, 0.157682], [-3.629687, 4.852698, 2.686837], [-3.196164, 1.793459, 0.452804], [-3.746338, 2.31357, 1.648551], [2.992192, 0.125251, 0.575976], [-3.254051, 0.054431, 0.314152], [-3.474644, 1.925288, 1.134116], [-3.418372, 2.022882, 1.578901], [-2.920955, 1.705403, 0.29842], [-3.57229, 2.152022, 1.607572], [-3.251259, 0.09013, -0.106174], [-3.299952, 1.877781, 1.348623], [-3.666819, 2.441459, 2.004838], [-2.912646, 1.824748, -0.045348], [-3.399511, 2.479484, 2.340393], [-3.009754, 0.015286, 0.075567], [-3.381443, 2.316937, 2.156923], [-3.352801, 2.133341, 1.857366], [-3.01788, 1.687685, 0.645867], [-2.931857, 1.678712, 1.158472], [-3.301008, 0.08836, 0.591001], [1.358025, 0.19795, 1.599144], [-2.999565, 1.845016, 1.618396], [-2.767957, 0.028397, -0.196436], [-2.93962, 2.078779, 2.140593], [-3.346648, 2.674056, 2.518097], [3.324322, 0.20822, 0.628605], [3.091677, 0.137202, 0.9345], [-2.881807, 0.009952, 0.318439], [-2.764946, 1.786619, 1.693439], [-2.905542, 1.932343, 1.900002], [-3.140854, 2.271384, 2.274946], [-2.88995, 2.487856, 2.574759], [-2.367194, -0.000943, -0.15576], [-3.050738, 0.068703, 0.742988], [-2.759525, 1.55679, 0.877782], [-3.151775, 2.48054, 2.482749], [-2.578618, -0.002885, 0.165716], [-2.651618, 1.877246, 1.981189], [-2.933973, 0.133731, 1.631023], [1.047628, 0.100284, -1.085248], [-1.585123, 0.062083, -1.394896], [-2.287917, -0.002671, 0.214434], [-2.524899, 0.007481, 0.471788], [-2.815492, 2.188198, 2.343294], [-2.095142, -0.003149, -0.094574], [-2.172686, -0.000133, 0.47963], [-2.732704, 0.074306, 1.742079], [-2.49653, 2.145668, 2.42691], [-1.343683, 0.047721, -1.506391], [-2.581185, 0.048703, 0.975528], [-2.905101, 0.083158, 2.010052], [-2.601514, 2.007801, 2.223089], [-2.339464, 0.02634, 1.484304], [-2.907873, 0.10367, 2.378149], [-1.368796, 0.062516, -1.049125], [-1.93244, 0.02443, -0.427603], [-2.705081, 0.060513, 2.303802], [3.372155, 0.206274, 0.892293], [-1.761827, 0.093202, -1.037404], [-1.700667, 0.0397, -0.614221], [-1.872291, 0.011979, -0.135753], [-1.929257, 0.074005, 0.728999], [-2.520128, 0.049665, 1.99054], [-2.699411, 0.10092, 2.603116], [3.211701, 0.27302, 1.423357], [-1.445362, 0.1371, -0.626491], [2.921332, 0.259112, 1.645525], [-0.993242, 0.058686, -1.408916], [-0.944986, 0.157541, -1.097665], [-2.154301, 0.032749, 1.882001], [-2.108789, 1.988557, 2.442673], [-1.015659, 0.25497, -0.416665], [-1.898411, 0.015872, 0.16715], [-1.585517, 0.027121, 0.453445], [-2.311105, 0.061264, 2.327061], [-2.637042, 0.152224, 2.832201], [-2.087515, 2.292972, 2.617585], [-0.750611, 0.056697, -1.504516], [-0.472029, 0.075654, -1.360203], [-0.710798, 0.139244, -1.183863], [-0.97755, 0.26052, -0.831167], [-0.655814, 0.260843, -0.880068], [-0.897513, 0.275537, -0.133042], [-2.049194, 0.084947, 2.455422], [-0.177837, 0.076362, -1.449009], [-0.553393, 0.279083, -0.59573], [-1.788636, 0.06163, 2.231198], [-0.34761, 0.255578, -0.999614], [-1.398589, 0.036482, 0.65871], [-1.133918, 0.05617, 0.69473], [-1.43369, 0.058226, 1.977865], [-2.505459, 1.492266, 1.19295]];\nexports.cells = [[2, 1661, 3], [1676, 7, 6], [712, 1694, 9], [3, 1674, 1662], [11, 1672, 0], [1705, 0, 1], [5, 6, 1674], [4, 5, 1674], [7, 8, 712], [2, 1662, 10], [1, 10, 1705], [11, 1690, 1672], [1705, 11, 0], [5, 1676, 6], [7, 9, 6], [7, 712, 9], [2, 3, 1662], [3, 4, 1674], [1, 2, 10], [12, 82, 1837], [1808, 12, 1799], [1808, 1799, 1796], [12, 861, 82], [861, 1808, 13], [1808, 861, 12], [1799, 12, 1816], [1680, 14, 1444], [15, 17, 16], [14, 1678, 1700], [16, 17, 1679], [15, 1660, 17], [14, 1084, 1678], [15, 1708, 18], [15, 18, 1660], [1680, 1084, 14], [1680, 15, 1084], [15, 1680, 1708], [793, 813, 119], [1076, 793, 119], [1076, 1836, 22], [23, 19, 20], [21, 1076, 22], [21, 22, 23], [23, 20, 21], [1076, 119, 1836], [806, 634, 470], [432, 1349, 806], [251, 42, 125], [809, 1171, 791], [953, 631, 827], [634, 1210, 1176], [157, 1832, 1834], [56, 219, 53], [126, 38, 83], [37, 85, 43], [59, 1151, 1154], [83, 75, 41], [77, 85, 138], [201, 948, 46], [1362, 36, 37], [452, 775, 885], [1237, 95, 104], [966, 963, 1262], [85, 77, 43], [36, 85, 37], [1018, 439, 1019], [41, 225, 481], [85, 83, 127], [93, 83, 41], [935, 972, 962], [116, 93, 100], [98, 82, 813], [41, 75, 225], [298, 751, 54], [1021, 415, 1018], [77, 138, 128], [766, 823, 1347], [593, 121, 573], [905, 885, 667], [786, 744, 747], [100, 41, 107], [604, 334, 765], [779, 450, 825], [968, 962, 969], [225, 365, 481], [365, 283, 196], [161, 160, 303], [875, 399, 158], [328, 1817, 954], [62, 61, 1079], [358, 81, 72], [74, 211, 133], [160, 161, 138], [91, 62, 1079], [167, 56, 1405], [56, 167, 219], [913, 914, 48], [344, 57, 102], [43, 77, 128], [1075, 97, 1079], [389, 882, 887], [219, 108, 53], [1242, 859, 120], [604, 840, 618], [754, 87, 762], [197, 36, 1362], [1439, 88, 1200], [1652, 304, 89], [81, 44, 940], [445, 463, 151], [717, 520, 92], [129, 116, 100], [1666, 1811, 624], [1079, 97, 91], [62, 91, 71], [688, 898, 526], [463, 74, 133], [278, 826, 99], [961, 372, 42], [799, 94, 1007], [100, 93, 41], [1314, 943, 1301], [184, 230, 109], [875, 1195, 231], [133, 176, 189], [751, 755, 826], [101, 102, 57], [1198, 513, 117], [748, 518, 97], [1145, 1484, 1304], [358, 658, 81], [971, 672, 993], [445, 151, 456], [252, 621, 122], [36, 271, 126], [85, 36, 126], [116, 83, 93], [141, 171, 1747], [1081, 883, 103], [1398, 1454, 149], [457, 121, 593], [127, 116, 303], [697, 70, 891], [457, 891, 1652], [1058, 1668, 112], [518, 130, 97], [214, 319, 131], [185, 1451, 1449], [463, 133, 516], [1428, 123, 177], [113, 862, 561], [215, 248, 136], [186, 42, 251], [127, 83, 116], [160, 85, 127], [162, 129, 140], [154, 169, 1080], [169, 170, 1080], [210, 174, 166], [1529, 1492, 1524], [450, 875, 231], [399, 875, 450], [171, 141, 170], [113, 1155, 452], [131, 319, 360], [44, 175, 904], [452, 872, 113], [746, 754, 407], [147, 149, 150], [309, 390, 1148], [53, 186, 283], [757, 158, 797], [303, 129, 162], [429, 303, 162], [154, 168, 169], [673, 164, 193], [38, 271, 75], [320, 288, 1022], [246, 476, 173], [175, 548, 904], [182, 728, 456], [199, 170, 169], [168, 199, 169], [199, 171, 170], [184, 238, 230], [246, 247, 180], [1496, 1483, 1467], [147, 150, 148], [828, 472, 445], [53, 108, 186], [56, 53, 271], [186, 961, 42], [1342, 391, 57], [1664, 157, 1834], [1070, 204, 178], [178, 204, 179], [285, 215, 295], [692, 55, 360], [192, 193, 286], [359, 673, 209], [586, 195, 653], [121, 89, 573], [202, 171, 199], [238, 515, 311], [174, 210, 240], [174, 105, 166], [717, 276, 595], [1155, 1149, 452], [1405, 56, 197], [53, 283, 30], [75, 53, 30], [45, 235, 1651], [210, 166, 490], [181, 193, 192], [185, 620, 217], [26, 798, 759], [1070, 226, 204], [220, 187, 179], [220, 168, 187], [202, 222, 171], [359, 209, 181], [182, 456, 736], [964, 167, 1405], [76, 250, 414], [807, 1280, 1833], [70, 883, 1652], [227, 179, 204], [221, 199, 168], [221, 202, 199], [360, 494, 131], [214, 241, 319], [105, 247, 166], [205, 203, 260], [388, 480, 939], [482, 855, 211], [8, 807, 1833], [226, 255, 204], [228, 221, 168], [166, 173, 490], [701, 369, 702], [211, 855, 262], [631, 920, 630], [1448, 1147, 1584], [255, 227, 204], [237, 220, 179], [228, 168, 220], [222, 256, 555], [215, 259, 279], [126, 271, 38], [108, 50, 186], [227, 236, 179], [236, 237, 179], [220, 237, 228], [228, 202, 221], [256, 222, 202], [555, 256, 229], [259, 152, 279], [27, 1296, 31], [186, 50, 961], [961, 234, 372], [1651, 235, 812], [1572, 1147, 1448], [255, 226, 1778], [255, 236, 227], [256, 257, 229], [106, 184, 109], [241, 410, 188], [177, 578, 620], [209, 673, 181], [1136, 1457, 79], [1507, 245, 718], [255, 273, 236], [275, 410, 241], [206, 851, 250], [1459, 253, 1595], [1406, 677, 1650], [228, 274, 202], [202, 281, 256], [348, 239, 496], [205, 172, 203], [369, 248, 702], [261, 550, 218], [261, 465, 550], [574, 243, 566], [921, 900, 1220], [291, 273, 255], [348, 238, 265], [109, 230, 194], [149, 380, 323], [443, 270, 421], [272, 291, 255], [274, 228, 237], [274, 292, 202], [281, 257, 256], [276, 543, 341], [152, 259, 275], [1111, 831, 249], [632, 556, 364], [299, 273, 291], [299, 236, 273], [280, 237, 236], [202, 292, 281], [247, 246, 173], [282, 49, 66], [1620, 1233, 1553], [299, 280, 236], [280, 305, 237], [237, 305, 274], [306, 292, 274], [330, 257, 281], [246, 194, 264], [166, 247, 173], [912, 894, 896], [611, 320, 244], [1154, 1020, 907], [969, 962, 290], [272, 299, 291], [305, 318, 274], [145, 212, 240], [164, 248, 285], [259, 277, 275], [193, 164, 295], [269, 240, 210], [1033, 288, 320], [46, 948, 206], [336, 280, 299], [330, 281, 292], [257, 307, 300], [369, 136, 248], [145, 240, 269], [502, 84, 465], [193, 295, 286], [164, 285, 295], [282, 302, 49], [161, 303, 429], [318, 306, 274], [306, 330, 292], [315, 257, 330], [315, 307, 257], [307, 352, 300], [300, 352, 308], [275, 277, 403], [353, 1141, 333], [1420, 425, 47], [611, 313, 320], [85, 126, 83], [128, 1180, 43], [303, 116, 129], [280, 314, 305], [314, 318, 305], [190, 181, 242], [203, 214, 131], [820, 795, 815], [322, 299, 272], [322, 336, 299], [315, 339, 307], [172, 152, 617], [172, 214, 203], [321, 1033, 320], [1401, 941, 946], [85, 160, 138], [976, 454, 951], [747, 60, 786], [317, 322, 272], [339, 352, 307], [266, 33, 867], [163, 224, 218], [247, 614, 180], [648, 639, 553], [388, 172, 205], [611, 345, 313], [313, 345, 320], [160, 127, 303], [454, 672, 951], [317, 329, 322], [314, 280, 336], [306, 338, 330], [330, 339, 315], [1236, 115, 436], [342, 321, 320], [1046, 355, 328], [328, 346, 325], [325, 346, 317], [367, 314, 336], [314, 337, 318], [337, 306, 318], [338, 343, 330], [342, 320, 345], [355, 349, 328], [346, 329, 317], [347, 336, 322], [314, 362, 337], [330, 343, 339], [340, 308, 352], [135, 906, 1022], [239, 156, 491], [194, 230, 486], [40, 1015, 1003], [321, 355, 1046], [329, 382, 322], [382, 347, 322], [347, 367, 336], [337, 371, 306], [306, 371, 338], [1681, 296, 1493], [286, 172, 388], [230, 348, 486], [348, 183, 486], [384, 332, 830], [328, 349, 346], [367, 362, 314], [371, 343, 338], [339, 351, 352], [57, 344, 78], [342, 355, 321], [386, 346, 349], [386, 350, 346], [346, 350, 329], [347, 366, 367], [343, 363, 339], [323, 380, 324], [152, 275, 241], [345, 1045, 342], [350, 374, 329], [339, 363, 351], [234, 340, 352], [353, 361, 354], [40, 34, 1015], [373, 355, 342], [373, 349, 355], [374, 382, 329], [366, 347, 382], [371, 363, 343], [351, 379, 352], [379, 372, 352], [372, 234, 352], [156, 190, 491], [319, 241, 692], [354, 361, 31], [366, 377, 367], [363, 379, 351], [133, 590, 516], [197, 56, 271], [1045, 370, 342], [370, 373, 342], [374, 350, 386], [377, 366, 382], [367, 395, 362], [400, 337, 362], [400, 371, 337], [378, 363, 371], [106, 109, 614], [181, 673, 193], [953, 920, 631], [376, 349, 373], [376, 386, 349], [378, 379, 363], [224, 375, 218], [279, 152, 172], [361, 619, 381], [1347, 823, 795], [760, 857, 384], [392, 374, 386], [394, 395, 367], [383, 371, 400], [383, 378, 371], [218, 375, 261], [197, 271, 36], [414, 454, 976], [385, 376, 373], [1051, 382, 374], [387, 394, 367], [377, 387, 367], [395, 400, 362], [279, 172, 295], [30, 365, 225], [450, 231, 825], [385, 373, 370], [398, 374, 392], [1051, 377, 382], [396, 378, 383], [348, 496, 183], [295, 172, 286], [357, 269, 495], [1148, 390, 1411], [75, 30, 225], [206, 76, 54], [412, 386, 376], [412, 392, 386], [396, 383, 400], [651, 114, 878], [123, 1241, 506], [238, 311, 265], [381, 653, 29], [618, 815, 334], [427, 1032, 411], [298, 414, 976], [791, 332, 384], [129, 100, 140], [412, 404, 392], [392, 404, 398], [140, 107, 360], [395, 394, 400], [423, 379, 378], [385, 412, 376], [406, 94, 58], [419, 415, 1021], [422, 423, 378], [423, 125, 379], [258, 508, 238], [311, 156, 265], [213, 287, 491], [449, 411, 1024], [412, 1068, 404], [55, 140, 360], [76, 414, 54], [394, 416, 400], [400, 416, 396], [422, 378, 396], [1258, 796, 789], [427, 411, 449], [427, 297, 1032], [1385, 1366, 483], [417, 448, 284], [1507, 341, 245], [162, 140, 444], [658, 44, 81], [433, 125, 423], [438, 251, 125], [429, 162, 439], [1342, 57, 1348], [765, 766, 442], [697, 891, 695], [1057, 396, 416], [440, 423, 422], [440, 433, 423], [433, 438, 125], [438, 196, 251], [74, 482, 211], [1136, 79, 144], [29, 195, 424], [242, 1004, 492], [57, 757, 28], [414, 298, 54], [238, 348, 230], [224, 163, 124], [295, 215, 279], [495, 269, 490], [449, 446, 427], [446, 297, 427], [1020, 1163, 909], [128, 138, 419], [66, 980, 443], [415, 439, 1018], [111, 396, 1057], [111, 422, 396], [840, 249, 831], [593, 664, 596], [218, 550, 155], [109, 194, 180], [483, 268, 855], [161, 415, 419], [1737, 232, 428], [360, 107, 494], [1006, 1011, 410], [444, 140, 55], [919, 843, 430], [190, 242, 213], [275, 403, 410], [131, 494, 488], [449, 663, 446], [138, 161, 419], [128, 419, 34], [439, 162, 444], [460, 440, 422], [440, 438, 433], [472, 74, 445], [491, 190, 213], [238, 508, 515], [46, 206, 54], [972, 944, 962], [1241, 1428, 1284], [111, 460, 422], [470, 432, 806], [248, 164, 702], [1025, 467, 453], [553, 1235, 648], [263, 114, 881], [267, 293, 896], [469, 438, 440], [455, 196, 438], [287, 242, 492], [239, 265, 156], [213, 242, 287], [1684, 746, 63], [663, 474, 446], [415, 161, 429], [140, 100, 107], [1055, 459, 467], [469, 455, 438], [259, 542, 277], [446, 474, 466], [446, 466, 447], [439, 444, 1019], [614, 109, 180], [190, 359, 181], [156, 497, 190], [726, 474, 663], [1023, 458, 459], [461, 440, 460], [269, 210, 490], [246, 180, 194], [590, 133, 189], [163, 218, 155], [467, 468, 453], [1063, 1029, 111], [111, 1029, 460], [1029, 464, 460], [461, 469, 440], [150, 149, 323], [828, 445, 456], [375, 502, 261], [474, 475, 466], [573, 426, 462], [478, 1023, 477], [478, 458, 1023], [458, 479, 467], [459, 458, 467], [468, 393, 453], [464, 461, 460], [484, 365, 455], [1232, 182, 1380], [172, 617, 214], [547, 694, 277], [542, 547, 277], [184, 258, 238], [261, 502, 465], [467, 479, 468], [484, 455, 469], [1380, 182, 864], [475, 476, 466], [80, 447, 476], [466, 476, 447], [415, 429, 439], [479, 487, 468], [487, 287, 468], [492, 393, 468], [260, 469, 461], [481, 365, 484], [531, 473, 931], [692, 360, 319], [726, 495, 474], [468, 287, 492], [480, 464, 1029], [260, 461, 464], [494, 481, 484], [74, 472, 482], [174, 240, 212], [223, 106, 614], [486, 477, 485], [478, 496, 458], [491, 487, 479], [123, 402, 177], [488, 469, 260], [488, 484, 469], [265, 239, 348], [248, 215, 285], [474, 490, 475], [477, 486, 478], [458, 496, 479], [239, 491, 479], [1584, 1147, 1334], [488, 494, 484], [401, 123, 506], [495, 490, 474], [490, 173, 475], [80, 476, 264], [491, 287, 487], [480, 1029, 1004], [480, 205, 464], [173, 476, 475], [485, 194, 486], [486, 183, 478], [478, 183, 496], [496, 239, 479], [848, 1166, 60], [268, 262, 855], [205, 260, 464], [260, 203, 488], [203, 131, 488], [246, 264, 476], [194, 485, 264], [1002, 310, 1664], [311, 515, 497], [515, 359, 497], [565, 359, 515], [1250, 1236, 301], [736, 456, 151], [654, 174, 567], [577, 534, 648], [519, 505, 645], [725, 565, 508], [150, 1723, 148], [584, 502, 505], [584, 526, 502], [502, 526, 84], [607, 191, 682], [560, 499, 660], [607, 517, 191], [1038, 711, 124], [951, 672, 971], [716, 507, 356], [868, 513, 1198], [615, 794, 608], [682, 191, 174], [1313, 928, 1211], [617, 241, 214], [511, 71, 91], [408, 800, 792], [192, 286, 525], [80, 485, 447], [91, 97, 130], [1675, 324, 888], [207, 756, 532], [582, 1097, 1124], [311, 497, 156], [510, 130, 146], [523, 511, 510], [608, 708, 616], [546, 690, 650], [511, 527, 358], [536, 146, 518], [465, 418, 550], [418, 709, 735], [520, 514, 500], [584, 505, 519], [536, 518, 509], [146, 536, 510], [538, 527, 511], [876, 263, 669], [646, 524, 605], [510, 536, 523], [527, 175, 358], [724, 876, 669], [721, 724, 674], [524, 683, 834], [558, 509, 522], [558, 536, 509], [523, 538, 511], [611, 243, 574], [528, 706, 556], [668, 541, 498], [523, 537, 538], [527, 540, 175], [532, 756, 533], [1013, 60, 747], [551, 698, 699], [92, 520, 500], [535, 536, 558], [536, 569, 523], [538, 540, 527], [539, 548, 175], [567, 212, 145], [401, 896, 293], [534, 675, 639], [1510, 595, 1507], [557, 545, 530], [569, 536, 535], [537, 540, 538], [540, 539, 175], [569, 537, 523], [1135, 718, 47], [587, 681, 626], [580, 535, 558], [99, 747, 278], [701, 565, 725], [665, 132, 514], [665, 514, 575], [132, 549, 653], [176, 651, 189], [65, 47, 266], [597, 569, 535], [569, 581, 537], [537, 581, 540], [563, 539, 540], [539, 564, 548], [1509, 1233, 1434], [132, 653, 740], [550, 710, 155], [714, 721, 644], [410, 1011, 188], [732, 534, 586], [560, 562, 729], [555, 557, 222], [580, 558, 545], [597, 535, 580], [581, 563, 540], [5, 821, 1676], [576, 215, 136], [649, 457, 741], [564, 539, 563], [124, 711, 224], [550, 668, 710], [550, 541, 668], [565, 701, 673], [560, 613, 499], [233, 532, 625], [545, 555, 580], [601, 581, 569], [594, 904, 548], [1463, 1425, 434], [185, 149, 1454], [721, 674, 644], [185, 380, 149], [577, 424, 586], [462, 586, 559], [597, 601, 569], [594, 548, 564], [566, 603, 574], [165, 543, 544], [457, 89, 121], [586, 424, 195], [725, 587, 606], [1078, 582, 1124], [588, 925, 866], [462, 559, 593], [189, 878, 590], [555, 229, 580], [602, 563, 581], [904, 594, 956], [434, 1425, 1438], [1024, 112, 821], [572, 587, 626], [600, 597, 580], [599, 591, 656], [600, 580, 229], [601, 622, 581], [581, 622, 602], [602, 564, 563], [602, 594, 564], [603, 611, 574], [498, 529, 546], [697, 1145, 70], [592, 628, 626], [610, 597, 600], [597, 610, 601], [222, 557, 171], [604, 765, 799], [573, 462, 593], [133, 200, 176], [729, 607, 627], [1011, 692, 188], [518, 146, 130], [585, 687, 609], [682, 627, 607], [1712, 599, 656], [562, 592, 607], [643, 656, 654], [257, 600, 229], [601, 633, 622], [623, 594, 602], [174, 212, 567], [725, 606, 701], [609, 701, 606], [610, 633, 601], [633, 642, 622], [380, 216, 324], [142, 143, 1249], [501, 732, 586], [534, 577, 586], [648, 1235, 577], [610, 641, 633], [310, 1002, 1831], [618, 334, 604], [1710, 145, 269], [707, 498, 659], [501, 586, 462], [625, 501, 462], [726, 663, 691], [300, 600, 257], [641, 610, 600], [622, 629, 602], [602, 629, 623], [55, 692, 444], [518, 748, 509], [929, 1515, 1411], [620, 578, 267], [71, 511, 358], [707, 668, 498], [650, 687, 585], [600, 300, 641], [641, 657, 633], [1675, 888, 1669], [622, 636, 629], [505, 502, 375], [541, 529, 498], [332, 420, 1053], [637, 551, 638], [534, 639, 648], [69, 623, 873], [300, 512, 641], [633, 657, 642], [562, 660, 579], [687, 637, 638], [709, 646, 605], [775, 738, 885], [559, 549, 132], [646, 683, 524], [641, 512, 657], [266, 897, 949], [1712, 643, 1657], [184, 727, 258], [674, 724, 669], [699, 714, 647], [628, 659, 572], [657, 662, 642], [571, 881, 651], [517, 607, 504], [598, 706, 528], [598, 694, 547], [640, 552, 560], [655, 693, 698], [698, 693, 721], [91, 510, 511], [144, 301, 1136], [324, 216, 888], [870, 764, 1681], [575, 514, 520], [276, 544, 543], [658, 175, 44], [645, 505, 711], [659, 546, 572], [700, 524, 655], [605, 700, 529], [266, 867, 897], [1695, 1526, 764], [579, 659, 628], [654, 591, 682], [586, 549, 559], [698, 721, 714], [896, 401, 506], [640, 734, 599], [664, 665, 575], [621, 629, 636], [1712, 656, 643], [547, 644, 598], [710, 668, 707], [640, 560, 734], [655, 698, 551], [694, 528, 277], [512, 662, 657], [504, 592, 626], [688, 584, 519], [152, 241, 617], [587, 725, 681], [598, 669, 706], [526, 670, 84], [598, 528, 694], [710, 707, 499], [579, 592, 562], [660, 659, 579], [323, 324, 1134], [326, 895, 473], [195, 29, 653], [84, 670, 915], [560, 660, 562], [504, 626, 681], [711, 505, 224], [651, 881, 114], [216, 620, 889], [1362, 678, 197], [493, 99, 48], [1659, 691, 680], [529, 690, 546], [430, 843, 709], [655, 524, 693], [174, 191, 105], [674, 669, 598], [98, 712, 82], [572, 546, 585], [72, 61, 71], [912, 911, 894], [106, 223, 184], [664, 132, 665], [843, 646, 709], [635, 699, 136], [699, 698, 714], [593, 132, 664], [688, 526, 584], [185, 177, 620], [533, 675, 534], [687, 638, 635], [1652, 89, 457], [896, 506, 912], [132, 740, 514], [689, 685, 282], [691, 449, 680], [48, 436, 493], [136, 699, 647], [739, 640, 554], [549, 586, 653], [532, 533, 625], [1530, 695, 649], [653, 381, 619], [736, 151, 531], [188, 692, 241], [177, 402, 578], [33, 689, 867], [689, 33, 685], [593, 559, 132], [949, 65, 266], [711, 1038, 661], [939, 480, 1004], [609, 369, 701], [616, 552, 615], [619, 361, 740], [151, 463, 516], [513, 521, 117], [691, 663, 449], [186, 251, 196], [333, 302, 327], [613, 560, 552], [616, 613, 552], [690, 551, 637], [660, 707, 659], [704, 208, 1203], [418, 735, 550], [163, 708, 124], [524, 834, 693], [554, 640, 599], [245, 341, 165], [565, 673, 359], [155, 710, 708], [105, 191, 517], [1515, 198, 1411], [1709, 554, 599], [60, 289, 786], [838, 1295, 1399], [533, 534, 625], [710, 499, 708], [556, 632, 410], [217, 620, 216], [591, 627, 682], [504, 503, 223], [643, 654, 567], [690, 637, 650], [545, 557, 555], [174, 654, 682], [719, 691, 1659], [727, 681, 508], [645, 711, 661], [794, 615, 739], [565, 515, 508], [282, 685, 302], [1150, 397, 1149], [638, 699, 635], [544, 685, 33], [719, 726, 691], [1742, 1126, 1733], [1724, 1475, 148], [556, 410, 403], [185, 217, 380], [503, 504, 681], [277, 556, 403], [32, 1178, 158], [1712, 1709, 599], [605, 529, 541], [635, 136, 369], [687, 635, 369], [529, 700, 690], [700, 551, 690], [89, 304, 573], [625, 534, 732], [730, 302, 685], [503, 681, 727], [702, 673, 701], [730, 327, 302], [327, 353, 333], [596, 664, 575], [660, 499, 707], [585, 546, 650], [560, 729, 734], [700, 655, 551], [176, 571, 651], [517, 504, 223], [730, 685, 544], [1661, 1682, 726], [1682, 495, 726], [1250, 301, 917], [605, 524, 700], [609, 687, 369], [516, 389, 895], [1553, 686, 1027], [673, 702, 164], [656, 591, 654], [520, 596, 575], [402, 123, 401], [828, 456, 728], [1645, 677, 1653], [528, 556, 277], [638, 551, 699], [190, 497, 359], [276, 730, 544], [1117, 1525, 933], [1027, 686, 1306], [155, 708, 163], [709, 605, 541], [647, 644, 547], [650, 637, 687], [599, 734, 591], [578, 293, 267], [1682, 357, 495], [510, 91, 130], [734, 729, 627], [576, 542, 215], [709, 541, 735], [735, 541, 550], [276, 500, 730], [500, 327, 730], [653, 619, 740], [414, 851, 454], [734, 627, 591], [729, 562, 607], [615, 552, 640], [525, 181, 192], [308, 512, 300], [223, 503, 727], [266, 165, 33], [92, 500, 276], [321, 1046, 1033], [585, 609, 606], [1200, 1559, 86], [628, 572, 626], [301, 436, 803], [714, 644, 647], [708, 499, 613], [721, 693, 724], [514, 353, 327], [353, 740, 361], [344, 158, 78], [708, 613, 616], [615, 640, 739], [500, 514, 327], [514, 740, 353], [1449, 177, 185], [462, 233, 625], [851, 405, 1163], [608, 616, 615], [647, 542, 576], [625, 732, 501], [1097, 582, 1311], [1235, 424, 577], [579, 628, 592], [607, 592, 504], [24, 432, 470], [105, 614, 247], [104, 742, 471], [542, 259, 215], [365, 196, 455], [1420, 47, 65], [223, 727, 184], [547, 542, 647], [572, 585, 606], [587, 572, 606], [262, 780, 1370], [647, 576, 136], [644, 674, 598], [271, 53, 75], [727, 508, 258], [471, 742, 142], [505, 375, 224], [357, 1710, 269], [725, 508, 681], [659, 498, 546], [743, 1178, 32], [1195, 634, 231], [1176, 24, 470], [743, 1110, 1178], [135, 809, 857], [63, 746, 407], [634, 1176, 470], [159, 1112, 27], [1176, 1685, 24], [399, 450, 779], [1178, 856, 875], [751, 744, 54], [436, 48, 772], [634, 1108, 1210], [769, 1285, 1286], [751, 298, 755], [746, 1684, 754], [754, 924, 87], [722, 1625, 756], [87, 839, 153], [489, 795, 820], [758, 808, 1518], [839, 840, 153], [831, 1111, 959], [1111, 749, 959], [810, 1253, 1363], [1247, 1394, 713], [1388, 1329, 1201], [1242, 120, 761], [857, 791, 384], [758, 1523, 808], [296, 764, 1504], [70, 1652, 891], [207, 233, 1638], [1348, 57, 28], [858, 420, 332], [964, 1379, 1278], [420, 1194, 816], [784, 1076, 1186], [1076, 21, 1186], [1710, 767, 1], [849, 822, 778], [806, 137, 787], [786, 790, 744], [790, 54, 744], [771, 63, 407], [785, 852, 818], [774, 1823, 272], [895, 151, 516], [135, 1022, 809], [99, 826, 48], [48, 826, 755], [808, 705, 408], [833, 441, 716], [1733, 743, 32], [1385, 836, 852], [772, 827, 737], [1005, 49, 781], [793, 1697, 813], [1518, 441, 1537], [1139, 1132, 859], [782, 801, 770], [1510, 1530, 676], [770, 814, 835], [231, 787, 825], [207, 722, 756], [26, 771, 798], [782, 863, 865], [832, 54, 790], [865, 842, 507], [799, 765, 94], [1175, 1261, 1353], [800, 408, 805], [262, 986, 200], [792, 800, 814], [801, 792, 770], [704, 1203, 1148], [356, 1514, 822], [165, 544, 33], [561, 776, 113], [1043, 738, 775], [815, 831, 820], [773, 792, 801], [772, 48, 914], [772, 737, 803], [436, 772, 803], [808, 817, 705], [1624, 822, 1527], [588, 1144, 788], [799, 762, 604], [821, 1520, 1676], [854, 803, 666], [828, 482, 472], [445, 74, 463], [831, 489, 820], [828, 836, 482], [716, 782, 763], [334, 815, 766], [815, 823, 766], [334, 766, 765], [819, 805, 837], [1716, 1521, 1412], [1684, 924, 754], [800, 805, 819], [1709, 829, 554], [806, 1349, 137], [99, 1013, 747], [341, 595, 276], [817, 810, 818], [1176, 1691, 1685], [763, 782, 865], [830, 846, 1052], [865, 1499, 842], [982, 846, 1053], [847, 832, 790], [1178, 875, 158], [817, 818, 705], [1302, 1392, 45], [96, 417, 284], [223, 614, 517], [356, 507, 1514], [1166, 848, 1179], [1349, 432, 26], [717, 92, 276], [770, 835, 863], [522, 509, 1745], [847, 841, 832], [832, 841, 46], [829, 739, 554], [802, 824, 39], [397, 1043, 775], [1567, 849, 778], [1385, 483, 855], [1349, 26, 1346], [441, 801, 782], [402, 401, 293], [1043, 667, 738], [759, 798, 1007], [819, 837, 728], [728, 837, 828], [837, 852, 828], [1537, 441, 833], [148, 1475, 147], [805, 705, 837], [716, 441, 782], [483, 1371, 780], [814, 819, 844], [845, 753, 1336], [1661, 719, 4], [862, 847, 790], [737, 827, 666], [201, 46, 841], [810, 785, 818], [408, 705, 805], [1560, 1536, 849], [1585, 853, 1786], [7, 1668, 807], [7, 807, 8], [822, 1514, 1527], [800, 819, 814], [847, 862, 841], [991, 857, 760], [705, 818, 837], [808, 408, 773], [402, 293, 578], [791, 858, 332], [1480, 1228, 1240], [814, 844, 835], [785, 1385, 852], [1132, 120, 859], [1743, 1726, 684], [1704, 783, 1279], [1623, 1694, 1731], [959, 489, 831], [1518, 808, 773], [862, 872, 841], [441, 773, 801], [331, 512, 308], [380, 217, 216], [841, 872, 201], [818, 852, 837], [448, 1480, 1240], [856, 1108, 1195], [1527, 1514, 1526], [819, 182, 1232], [871, 724, 693], [852, 836, 828], [770, 792, 814], [803, 737, 666], [751, 826, 278], [1674, 1727, 1699], [849, 356, 822], [871, 693, 834], [507, 842, 1514], [1406, 1097, 869], [1328, 1349, 1346], [823, 815, 795], [744, 751, 278], [1110, 856, 1178], [520, 717, 316], [871, 834, 683], [884, 876, 724], [165, 266, 47], [716, 763, 507], [216, 889, 888], [853, 1585, 1570], [1536, 716, 356], [886, 873, 623], [782, 770, 863], [432, 24, 26], [683, 882, 871], [884, 724, 871], [114, 876, 884], [516, 590, 389], [11, 1218, 1628], [862, 113, 872], [886, 623, 629], [830, 1052, 1120], [762, 153, 604], [773, 408, 792], [763, 865, 507], [153, 840, 604], [882, 884, 871], [531, 151, 326], [886, 890, 873], [133, 262, 200], [819, 1232, 844], [621, 636, 122], [645, 892, 519], [1130, 1076, 784], [114, 263, 876], [1670, 10, 1663], [911, 670, 894], [452, 885, 872], [872, 885, 201], [887, 882, 683], [878, 884, 882], [590, 878, 882], [890, 867, 689], [897, 629, 621], [897, 886, 629], [819, 728, 182], [519, 893, 688], [894, 670, 526], [898, 894, 526], [1536, 356, 849], [810, 1363, 785], [878, 114, 884], [879, 888, 892], [892, 889, 893], [893, 898, 688], [895, 683, 843], [895, 887, 683], [889, 620, 267], [590, 882, 389], [418, 465, 84], [949, 897, 621], [897, 890, 886], [889, 267, 893], [898, 267, 896], [531, 326, 473], [189, 651, 878], [843, 683, 646], [897, 867, 890], [888, 889, 892], [893, 267, 898], [896, 894, 898], [473, 895, 843], [895, 389, 887], [974, 706, 669], [513, 1115, 521], [326, 151, 895], [809, 791, 857], [211, 262, 133], [920, 923, 947], [923, 90, 947], [90, 25, 947], [25, 972, 935], [64, 431, 899], [52, 899, 901], [903, 905, 59], [437, 967, 73], [839, 1242, 761], [904, 975, 44], [917, 301, 144], [915, 670, 911], [905, 201, 885], [1684, 63, 1685], [1033, 1194, 288], [950, 913, 755], [912, 918, 911], [950, 914, 913], [506, 918, 912], [922, 919, 915], [911, 922, 915], [1004, 451, 492], [1263, 553, 639], [922, 911, 918], [630, 920, 947], [916, 506, 926], [916, 918, 506], [521, 1115, 1098], [916, 922, 918], [919, 418, 915], [83, 38, 75], [24, 1685, 771], [110, 1230, 1213], [712, 8, 1837], [922, 930, 919], [919, 430, 418], [1395, 1402, 1187], [930, 922, 916], [594, 623, 69], [35, 431, 968], [35, 968, 969], [866, 924, 1684], [1625, 1263, 675], [631, 630, 52], [930, 931, 919], [430, 709, 418], [302, 333, 49], [1446, 978, 1138], [799, 1007, 798], [931, 843, 919], [947, 25, 64], [885, 738, 667], [1262, 963, 964], [899, 970, 901], [1401, 946, 938], [1117, 933, 1091], [1685, 63, 771], [905, 948, 201], [979, 937, 980], [951, 953, 950], [937, 270, 443], [1154, 903, 59], [1194, 954, 1067], [909, 405, 907], [850, 1151, 59], [1769, 811, 1432], [76, 206, 250], [938, 946, 966], [965, 927, 942], [938, 966, 957], [955, 975, 904], [927, 965, 934], [52, 51, 631], [59, 905, 667], [431, 935, 968], [786, 289, 561], [252, 122, 671], [481, 494, 107], [954, 1817, 1067], [795, 25, 90], [958, 965, 945], [795, 972, 25], [902, 983, 955], [972, 489, 944], [1256, 29, 424], [671, 331, 945], [946, 958, 963], [956, 955, 904], [902, 955, 956], [671, 512, 331], [945, 331, 961], [662, 671, 122], [671, 662, 512], [934, 65, 927], [630, 947, 52], [666, 631, 910], [850, 59, 667], [961, 331, 234], [1024, 411, 1042], [890, 69, 873], [252, 671, 945], [975, 290, 940], [283, 186, 196], [30, 283, 365], [950, 755, 298], [946, 965, 958], [985, 290, 975], [969, 290, 985], [405, 851, 206], [935, 431, 64], [941, 1423, 1420], [964, 963, 167], [942, 252, 945], [78, 757, 57], [49, 1005, 66], [937, 979, 270], [631, 666, 827], [980, 937, 443], [66, 689, 282], [421, 902, 956], [947, 64, 52], [35, 979, 899], [951, 971, 953], [762, 87, 153], [27, 31, 381], [924, 839, 87], [946, 963, 966], [331, 308, 340], [957, 966, 1262], [473, 843, 931], [953, 971, 920], [270, 969, 902], [935, 962, 968], [51, 1005, 781], [969, 983, 902], [437, 73, 940], [69, 421, 956], [761, 249, 840], [263, 974, 669], [962, 944, 967], [962, 437, 290], [985, 975, 955], [907, 405, 948], [720, 957, 1262], [25, 935, 64], [176, 200, 571], [108, 945, 50], [250, 851, 414], [200, 986, 571], [881, 974, 263], [827, 772, 953], [970, 899, 980], [29, 159, 27], [234, 331, 340], [948, 405, 206], [980, 899, 979], [986, 984, 571], [571, 984, 881], [990, 706, 974], [946, 934, 965], [970, 980, 66], [1113, 1486, 1554], [984, 981, 881], [881, 987, 974], [689, 66, 443], [1005, 901, 66], [983, 985, 955], [165, 47, 718], [987, 990, 974], [1370, 986, 262], [901, 970, 66], [51, 901, 1005], [981, 987, 881], [988, 706, 990], [942, 945, 965], [290, 437, 940], [64, 899, 52], [988, 556, 706], [941, 934, 946], [431, 35, 899], [996, 989, 984], [984, 989, 981], [981, 989, 987], [35, 969, 270], [1370, 995, 986], [986, 995, 984], [989, 999, 987], [987, 992, 990], [992, 988, 990], [962, 967, 437], [951, 950, 976], [979, 35, 270], [421, 270, 902], [998, 995, 1370], [987, 999, 992], [988, 364, 556], [969, 985, 983], [689, 443, 890], [995, 1000, 984], [219, 958, 108], [998, 1000, 995], [999, 997, 992], [914, 953, 772], [845, 1336, 745], [806, 787, 231], [1000, 996, 984], [989, 996, 999], [50, 945, 961], [443, 421, 69], [797, 158, 779], [1098, 1463, 434], [996, 1009, 999], [1001, 988, 992], [1001, 364, 988], [903, 907, 905], [26, 759, 973], [997, 1001, 992], [632, 364, 1001], [1346, 26, 973], [998, 1008, 1000], [1000, 1009, 996], [531, 931, 736], [252, 949, 621], [286, 388, 525], [1174, 1008, 998], [1009, 1010, 999], [999, 1010, 997], [1014, 1001, 997], [614, 105, 517], [958, 945, 108], [525, 1004, 242], [963, 958, 219], [233, 426, 304], [1000, 1008, 1009], [1010, 1014, 997], [1001, 1006, 632], [824, 413, 39], [642, 636, 622], [480, 388, 205], [28, 757, 797], [1014, 1006, 1001], [1006, 410, 632], [975, 940, 44], [1234, 420, 858], [54, 832, 46], [1009, 1012, 1010], [167, 963, 219], [41, 481, 107], [1017, 1010, 1012], [122, 636, 662], [939, 525, 388], [525, 939, 1004], [950, 953, 914], [829, 1735, 739], [1008, 880, 1015], [1008, 1015, 1009], [1263, 639, 675], [956, 594, 69], [795, 90, 1347], [1179, 848, 1013], [759, 1007, 973], [1009, 1015, 1012], [1012, 1016, 1017], [1017, 1014, 1010], [1019, 1011, 1006], [927, 65, 949], [649, 316, 595], [913, 48, 755], [976, 950, 298], [1003, 1015, 880], [1018, 1006, 1014], [1021, 1018, 1014], [444, 692, 1011], [451, 1029, 1063], [1185, 851, 1163], [29, 27, 381], [181, 525, 242], [1021, 1014, 1017], [1016, 1021, 1017], [1018, 1019, 1006], [1019, 444, 1011], [927, 949, 942], [451, 393, 492], [903, 1154, 907], [391, 101, 57], [94, 765, 58], [419, 1016, 1012], [949, 252, 942], [907, 1020, 909], [765, 442, 58], [94, 406, 908], [1007, 94, 908], [34, 1012, 1015], [34, 419, 1012], [419, 1021, 1016], [451, 1057, 393], [907, 948, 905], [1034, 1073, 1039], [1061, 906, 1619], [1068, 960, 1034], [471, 1249, 104], [112, 1024, 1042], [372, 379, 125], [341, 543, 165], [141, 1094, 170], [566, 243, 1061], [398, 1034, 1039], [325, 317, 1823], [1493, 296, 1724], [850, 667, 1043], [1054, 297, 1065], [1619, 135, 1074], [1061, 243, 906], [680, 1024, 821], [1103, 96, 1245], [1440, 1123, 1491], [1047, 1025, 1044], [672, 454, 1231], [1484, 697, 1530], [993, 672, 1231], [178, 154, 1088], [1044, 1041, 1066], [112, 1062, 1058], [1530, 649, 676], [178, 1088, 1040], [1046, 328, 954], [243, 244, 1022], [954, 1194, 1033], [1042, 411, 1032], [971, 993, 1056], [960, 1093, 1034], [1754, 1338, 232], [385, 1064, 412], [1057, 1063, 111], [748, 1071, 1447], [1530, 697, 695], [971, 1056, 1270], [977, 1059, 1211], [649, 741, 316], [1060, 1452, 1030], [353, 354, 1323], [695, 768, 649], [398, 404, 1034], [596, 316, 741], [1836, 119, 13], [1513, 1115, 1528], [883, 1081, 1652], [1039, 1073, 1048], [462, 426, 233], [31, 1296, 354], [1055, 1047, 1066], [1032, 1054, 1045], [1521, 310, 1224], [119, 861, 13], [1194, 1234, 288], [1109, 1771, 1070], [1166, 1160, 776], [1044, 1035, 1041], [1026, 960, 1064], [1050, 1032, 1045], [1049, 1041, 387], [115, 1013, 99], [1046, 954, 1033], [1321, 920, 971], [611, 1058, 345], [1048, 1066, 1049], [1023, 1055, 1073], [1029, 451, 1004], [118, 1094, 141], [1094, 1080, 170], [1042, 1032, 1050], [1026, 1064, 385], [15, 16, 1084], [1096, 1079, 61], [1075, 1071, 748], [325, 1817, 328], [909, 1163, 405], [1022, 1234, 809], [374, 398, 1051], [1082, 72, 81], [1023, 1034, 1093], [1817, 1794, 1067], [86, 1445, 1400], [1507, 1535, 1510], [1079, 1096, 1075], [568, 1478, 1104], [1070, 178, 1040], [1034, 1023, 1073], [776, 1155, 113], [1103, 143, 142], [1140, 81, 73], [1082, 81, 1140], [1060, 1030, 936], [1040, 1086, 1109], [370, 1065, 385], [61, 72, 1082], [1087, 1096, 1144], [1040, 1088, 1086], [1651, 812, 752], [1062, 1050, 1045], [187, 154, 178], [179, 187, 178], [1099, 1344, 1101], [1668, 1058, 807], [1073, 1055, 1048], [1099, 1336, 1344], [1283, 943, 1123], [1049, 387, 1051], [1024, 680, 449], [61, 1082, 1100], [967, 749, 1111], [1439, 1037, 88], [742, 1505, 142], [398, 1039, 1051], [1107, 1336, 1099], [1344, 1542, 1101], [142, 1505, 1103], [477, 1093, 447], [477, 1023, 1093], [471, 142, 1249], [1041, 1035, 394], [1328, 568, 1104], [61, 1100, 1096], [154, 1092, 1088], [112, 1042, 1050], [154, 187, 168], [435, 235, 45], [1075, 1096, 1087], [97, 1075, 748], [1049, 1066, 1041], [816, 1067, 1028], [846, 982, 1142], [1245, 96, 284], [1092, 154, 1080], [1057, 451, 1063], [387, 377, 1051], [1055, 1025, 1047], [1075, 1087, 1089], [1106, 1108, 856], [1068, 1034, 404], [1480, 1545, 868], [906, 135, 1619], [1074, 991, 1095], [570, 566, 1061], [1025, 453, 1044], [745, 1336, 1107], [1035, 1057, 416], [1092, 1102, 1129], [1074, 135, 991], [1105, 745, 1107], [447, 1026, 446], [394, 387, 1041], [73, 81, 940], [1118, 1108, 1106], [1210, 1108, 874], [243, 1022, 906], [412, 1064, 1068], [1280, 611, 603], [960, 447, 1093], [1051, 1039, 1049], [1040, 1109, 1070], [1471, 1037, 1439], [69, 890, 443], [1377, 703, 1374], [1092, 1080, 1102], [1096, 1100, 788], [1096, 788, 1144], [1114, 967, 1111], [446, 1026, 297], [70, 1112, 883], [453, 393, 1057], [1118, 874, 1108], [1054, 370, 1045], [1080, 1094, 1102], [1039, 1048, 1049], [428, 753, 845], [1047, 1044, 1066], [1044, 453, 1035], [1472, 731, 1512], [1126, 1121, 743], [743, 1121, 1110], [1032, 297, 1054], [1480, 868, 1216], [71, 358, 72], [1133, 967, 1114], [1105, 1119, 745], [1035, 453, 1057], [1026, 447, 960], [454, 851, 1190], [1030, 1477, 652], [589, 816, 1028], [1110, 1121, 1106], [1122, 1118, 1106], [1116, 874, 1118], [1048, 1055, 1066], [1194, 1067, 816], [744, 278, 747], [745, 1120, 845], [845, 1052, 428], [1105, 1780, 1119], [1065, 297, 385], [1098, 1529, 1463], [731, 1060, 936], [235, 434, 812], [1445, 1525, 1117], [1106, 1121, 1122], [1122, 1127, 1118], [1127, 1116, 1118], [1094, 118, 1732], [1119, 1120, 745], [1406, 1124, 1097], [435, 117, 235], [1462, 1440, 1037], [1126, 1129, 1121], [1088, 1092, 1129], [1133, 73, 967], [1120, 1052, 845], [812, 434, 752], [1441, 1559, 1200], [1131, 588, 413], [1054, 1065, 370], [235, 1098, 434], [1052, 1142, 428], [1737, 428, 1142], [1496, 1446, 1483], [1182, 1083, 1654], [1121, 1129, 1122], [1732, 1116, 1127], [768, 457, 649], [761, 1114, 249], [1064, 960, 1068], [1135, 1481, 1136], [1126, 952, 1129], [1087, 588, 1131], [1087, 1144, 588], [859, 788, 1139], [1140, 1133, 1132], [1133, 1140, 73], [1822, 570, 1061], [394, 1035, 416], [1055, 1023, 459], [80, 264, 485], [1119, 1128, 1120], [145, 1658, 567], [695, 891, 768], [1129, 1102, 1122], [1122, 1102, 1127], [1416, 1077, 1413], [297, 1026, 385], [1052, 846, 1142], [1445, 1117, 1400], [952, 1086, 1129], [1714, 1089, 1131], [1131, 1089, 1087], [1100, 1139, 788], [112, 1050, 1062], [1323, 354, 1296], [49, 333, 1141], [1142, 982, 1737], [79, 1457, 1091], [1088, 1129, 1086], [1102, 1094, 1127], [1127, 1094, 1732], [1100, 1082, 1139], [1082, 1132, 1139], [1082, 1140, 1132], [1150, 1043, 397], [60, 1166, 289], [1696, 1146, 1698], [1297, 1202, 1313], [409, 1297, 1313], [1234, 1194, 420], [1408, 1391, 1394], [424, 1235, 1243], [1203, 309, 1148], [485, 477, 447], [1152, 1156, 850], [1153, 1149, 1155], [1153, 1157, 1149], [1149, 1152, 1150], [1156, 1154, 1151], [776, 1153, 1155], [1157, 1152, 1149], [1217, 1393, 1208], [1156, 1159, 1154], [1153, 1165, 1157], [1165, 1152, 1157], [1159, 1020, 1154], [1161, 1153, 776], [1161, 1165, 1153], [1165, 1158, 1152], [1152, 1158, 1156], [1158, 1159, 1156], [1166, 776, 561], [1160, 1161, 776], [1161, 1164, 1165], [1161, 1160, 1164], [1158, 1162, 1159], [1159, 1162, 1020], [1270, 1321, 971], [1164, 1170, 1165], [1165, 1162, 1158], [1162, 1163, 1020], [588, 788, 925], [1166, 1167, 1160], [1165, 1170, 1162], [1160, 1167, 1164], [1162, 1170, 1163], [1179, 1167, 1166], [1167, 1168, 1164], [1164, 1168, 1170], [1168, 1169, 1170], [1234, 1022, 288], [802, 39, 866], [1179, 1168, 1167], [1169, 1173, 1170], [1170, 1173, 1163], [1173, 1185, 1163], [1360, 1267, 1364], [1169, 1185, 1173], [611, 244, 243], [900, 1226, 1376], [1260, 1408, 1350], [618, 840, 831], [1181, 1183, 1179], [1179, 1184, 1168], [1208, 1274, 1291], [1183, 1184, 1179], [1168, 1184, 1169], [1387, 1395, 1254], [1208, 1204, 1172], [1182, 1197, 1083], [1187, 1083, 1197], [1213, 1183, 1181], [1169, 1207, 1185], [135, 857, 991], [1013, 1213, 1181], [1189, 1183, 1213], [1183, 1189, 1184], [1169, 1184, 1207], [1207, 1190, 1185], [1180, 1389, 1288], [1191, 1192, 1640], [1640, 1192, 1090], [1090, 1205, 1654], [1654, 1205, 1182], [1188, 1395, 1187], [1126, 743, 1733], [788, 859, 925], [809, 1234, 1171], [1193, 1197, 1182], [1189, 1199, 1184], [1639, 1191, 1637], [1639, 1212, 1191], [1205, 1193, 1182], [1198, 1187, 1197], [1199, 1207, 1184], [332, 1053, 846], [1090, 1192, 1205], [117, 1188, 1187], [435, 1188, 117], [435, 1206, 1188], [1199, 1189, 1213], [420, 816, 1053], [1212, 1215, 1191], [117, 1187, 1198], [45, 1206, 435], [120, 1132, 1133], [874, 1116, 1210], [1191, 1215, 1192], [1193, 1216, 1197], [1216, 1198, 1197], [1199, 1214, 1207], [117, 521, 235], [1220, 1311, 1078], [1220, 900, 1311], [1653, 1215, 1212], [1192, 1225, 1205], [1205, 1209, 1193], [1209, 1216, 1193], [1389, 1217, 1172], [1207, 1214, 454], [171, 557, 1747], [1805, 1078, 1787], [1805, 1219, 1078], [1198, 1216, 868], [666, 910, 854], [1230, 1231, 1213], [1213, 1231, 1199], [1199, 1231, 1214], [1219, 1220, 1078], [1215, 1221, 1192], [1192, 1221, 1225], [1225, 1228, 1205], [1205, 1228, 1209], [1209, 1228, 1216], [1464, 1325, 1223], [1215, 1227, 1221], [1228, 1480, 1216], [1226, 1653, 1376], [1653, 1249, 1215], [1221, 1240, 1225], [1225, 1240, 1228], [839, 761, 840], [1238, 1219, 1805], [1238, 1220, 1219], [1232, 1380, 1375], [1226, 1249, 1653], [1221, 1227, 1240], [233, 207, 532], [110, 1236, 1230], [1248, 1231, 1230], [1231, 454, 1214], [1249, 1227, 1215], [1248, 1056, 1231], [489, 959, 944], [448, 1240, 284], [925, 859, 1242], [1805, 1244, 1238], [1252, 1220, 1238], [1252, 921, 1220], [1236, 1251, 1230], [1230, 1251, 1248], [1056, 993, 1231], [1031, 1264, 1263], [68, 1186, 157], [1227, 1245, 1240], [1103, 1245, 143], [1243, 1235, 612], [1252, 95, 921], [1249, 1226, 1237], [1390, 1387, 1254], [1120, 384, 830], [830, 332, 846], [1227, 143, 1245], [1315, 1369, 1358], [1356, 1269, 1386], [972, 795, 489], [1831, 1224, 310], [1250, 1255, 1251], [1251, 1056, 1248], [1256, 1243, 103], [658, 358, 175], [1620, 1238, 1244], [1620, 1252, 1238], [1506, 95, 1252], [104, 1249, 1237], [1249, 143, 1227], [1268, 1419, 1329], [634, 806, 231], [618, 831, 815], [924, 1242, 839], [1255, 1270, 1251], [1251, 1270, 1056], [866, 925, 1242], [103, 29, 1256], [424, 1243, 1256], [134, 1651, 752], [1250, 917, 1255], [1172, 1204, 1260], [1352, 1036, 1276], [1265, 1201, 1329], [804, 1282, 1259], [1259, 1294, 723], [335, 1330, 1305], [407, 762, 799], [875, 856, 1195], [32, 158, 344], [967, 944, 749], [372, 125, 42], [1175, 1354, 1261], [553, 612, 1235], [1259, 1273, 1294], [1294, 1283, 723], [757, 78, 158], [407, 799, 798], [901, 51, 52], [139, 1386, 1389], [1386, 1269, 1389], [1389, 1269, 1217], [1148, 1590, 1268], [1428, 1449, 1450], [804, 1281, 1282], [1273, 1259, 1282], [158, 399, 779], [771, 407, 798], [521, 1098, 235], [917, 1312, 1255], [1312, 1270, 1255], [1217, 1269, 1393], [1195, 1108, 634], [1110, 1106, 856], [1210, 1691, 1176], [27, 1112, 1145], [1296, 27, 1145], [1171, 858, 791], [704, 1148, 1290], [1430, 1436, 1437], [1282, 1308, 1273], [1300, 943, 1283], [1393, 1355, 1274], [720, 1278, 769], [1287, 1059, 1399], [1310, 1388, 1272], [1312, 1321, 1270], [851, 1185, 1190], [1296, 1145, 1304], [26, 24, 771], [51, 910, 631], [1329, 1290, 1268], [1290, 1148, 1268], [1298, 1293, 733], [1281, 1293, 1282], [1282, 1293, 1308], [1308, 1299, 1273], [1300, 1283, 1294], [1340, 943, 1300], [1340, 1301, 943], [407, 754, 762], [1287, 1399, 1295], [34, 139, 128], [1288, 1172, 1260], [120, 1133, 1114], [1306, 1113, 1511], [1464, 1223, 1292], [1299, 1294, 1273], [1299, 1300, 1294], [1286, 1295, 838], [1285, 1247, 1286], [1247, 713, 1286], [1201, 1265, 1390], [1378, 1368, 1357], [1482, 1320, 917], [917, 1320, 1312], [850, 1156, 1151], [588, 39, 413], [1324, 1306, 686], [789, 1365, 928], [1223, 1326, 1292], [1292, 1326, 1298], [869, 1097, 1311], [790, 786, 561], [1323, 1304, 932], [1323, 1296, 1304], [1317, 1324, 686], [1306, 368, 1113], [1325, 1342, 1223], [1326, 1348, 1298], [1293, 1327, 1308], [1308, 1318, 1299], [704, 1290, 1258], [1320, 1321, 1312], [761, 120, 1114], [1684, 802, 866], [1674, 6, 1727], [1316, 1323, 932], [1335, 1337, 1305], [1348, 1327, 1293], [1298, 1348, 1293], [1333, 1300, 1299], [1333, 1343, 1300], [1328, 1301, 1340], [1328, 1314, 1301], [838, 1399, 1319], [921, 1237, 900], [409, 1391, 1408], [1376, 1653, 677], [1281, 804, 1458], [1331, 1324, 1317], [1324, 368, 1306], [368, 1338, 1307], [1327, 797, 1308], [797, 1345, 1308], [1308, 1345, 1318], [1318, 1333, 1299], [1341, 1147, 1572], [923, 1321, 1320], [923, 920, 1321], [39, 588, 866], [1141, 1323, 1316], [1330, 1335, 1305], [1337, 1335, 1336], [1339, 1332, 1325], [1223, 1342, 1326], [1342, 1348, 1326], [1348, 797, 1327], [1345, 1333, 1318], [1343, 1340, 1300], [1419, 1265, 1329], [1347, 1320, 1584], [1535, 1141, 1316], [1078, 1311, 582], [1344, 1335, 1330], [753, 1331, 1337], [368, 1324, 1331], [753, 368, 1331], [1332, 1485, 1325], [1325, 1485, 1342], [787, 1343, 1333], [137, 1328, 1340], [973, 1341, 1479], [406, 1147, 1341], [1171, 1234, 858], [1141, 1535, 1322], [49, 1141, 1322], [1344, 1336, 1335], [973, 908, 1341], [766, 1347, 1584], [1347, 923, 1320], [781, 49, 1322], [368, 232, 1338], [787, 1340, 1343], [787, 137, 1340], [568, 1346, 973], [58, 1147, 406], [442, 1334, 1147], [58, 442, 1147], [442, 766, 1334], [90, 923, 1347], [428, 368, 753], [779, 1333, 1345], [825, 787, 1333], [137, 1349, 1328], [1328, 1346, 568], [908, 406, 1341], [924, 866, 1242], [1336, 753, 1337], [428, 232, 368], [1115, 777, 1098], [1348, 28, 797], [797, 779, 1345], [779, 825, 1333], [1007, 908, 973], [583, 1351, 880], [1365, 1246, 977], [1658, 145, 1710], [1310, 796, 1388], [718, 245, 165], [1302, 1272, 1254], [1174, 1351, 583], [1174, 715, 1351], [1358, 1260, 1204], [1374, 1373, 1276], [1377, 1374, 1276], [678, 1362, 1382], [1377, 1276, 254], [139, 34, 40], [1008, 1174, 583], [1396, 1286, 1319], [768, 891, 457], [1316, 932, 1535], [1289, 1371, 1360], [182, 736, 864], [1355, 1364, 1274], [860, 1367, 1354], [1362, 1222, 1382], [1376, 869, 1311], [1590, 1411, 198], [1232, 1375, 877], [1394, 1295, 1286], [880, 1356, 1386], [880, 1351, 1356], [1211, 1059, 1287], [197, 678, 1405], [880, 1386, 1003], [1368, 1253, 1357], [1357, 1253, 1036], [715, 1289, 1364], [1354, 1367, 703], [1383, 877, 1375], [1266, 1288, 1260], [1373, 1374, 703], [1372, 1289, 1174], [1303, 1366, 1378], [1351, 715, 1355], [1665, 1666, 624], [1309, 1357, 1036], [900, 1237, 1226], [1174, 1289, 715], [1337, 1331, 1317], [1360, 1303, 1359], [1267, 1354, 1175], [1241, 1284, 1414], [1377, 254, 929], [1385, 855, 836], [1396, 1319, 1436], [1361, 1366, 1303], [1381, 1368, 1378], [1313, 1211, 1391], [1368, 1385, 1363], [813, 82, 861], [1058, 1280, 807], [893, 519, 892], [1359, 1303, 860], [1382, 1350, 1247], [1371, 1303, 1360], [1267, 1175, 1271], [769, 1286, 1396], [712, 1837, 82], [1366, 1385, 1381], [1365, 796, 1310], [1003, 1386, 40], [780, 1371, 1370], [561, 862, 790], [1284, 1380, 864], [1449, 1428, 177], [611, 1280, 1058], [1284, 1375, 1380], [926, 506, 1241], [1305, 1337, 1317], [309, 1203, 208], [1388, 1201, 1390], [1309, 1036, 1352], [1377, 929, 1411], [1399, 1059, 1257], [1112, 70, 1145], [289, 1166, 561], [1288, 1389, 1172], [1362, 37, 1180], [713, 1394, 1286], [1355, 1393, 1269], [1401, 1423, 941], [1274, 1271, 1384], [860, 1378, 1367], [715, 1364, 1355], [677, 1406, 869], [1297, 1358, 1202], [1388, 1258, 1329], [1180, 1288, 1266], [1008, 583, 880], [1524, 1425, 1463], [1390, 1403, 1387], [1278, 1379, 1247], [1278, 1247, 1285], [964, 1278, 1262], [1358, 1369, 1202], [1715, 1699, 1726], [926, 1241, 1414], [1341, 1572, 1479], [926, 930, 916], [1397, 51, 781], [409, 1358, 1297], [1236, 436, 301], [1376, 677, 869], [1351, 1355, 1356], [758, 1534, 1523], [1378, 1357, 1367], [977, 1211, 1365], [1135, 1136, 854], [1394, 1391, 1295], [1266, 1260, 1222], [1365, 1302, 1246], [1232, 877, 844], [736, 930, 864], [1408, 1358, 409], [1508, 817, 1523], [1381, 1385, 1368], [718, 854, 910], [854, 718, 1135], [1382, 1222, 1350], [1391, 1211, 1287], [1391, 1287, 1295], [1257, 1651, 134], [1414, 1284, 864], [1291, 1369, 1315], [1202, 928, 1313], [86, 1400, 1413], [1413, 1200, 86], [1263, 1625, 1031], [1413, 1400, 1404], [1002, 1664, 1834], [930, 926, 1414], [1399, 1257, 134], [520, 316, 596], [1393, 1274, 1208], [1657, 1655, 1712], [1407, 1404, 1400], [1404, 1410, 1413], [1649, 1229, 1406], [1362, 1266, 1222], [1384, 1271, 1175], [900, 1376, 1311], [1274, 1384, 1291], [1291, 1384, 1431], [1433, 1396, 1436], [1267, 1359, 1354], [309, 1353, 703], [838, 1319, 1286], [1407, 1410, 1404], [441, 1518, 773], [1241, 123, 1428], [1622, 1521, 1224], [1217, 1208, 1172], [1130, 793, 1076], [425, 1409, 1481], [1481, 1409, 1533], [1303, 1378, 860], [1350, 1408, 1394], [1246, 1651, 977], [1289, 1360, 1364], [1727, 1694, 1623], [1417, 1407, 1533], [1417, 1410, 1407], [1406, 1650, 1649], [1319, 134, 1437], [1414, 864, 930], [1406, 1229, 1124], [1354, 1359, 860], [1433, 769, 1396], [1417, 1533, 1409], [1416, 1413, 1410], [1415, 1416, 1410], [95, 1237, 921], [1392, 1254, 1395], [1360, 1359, 1267], [1258, 1290, 1329], [1180, 128, 1389], [1420, 1409, 425], [1417, 1418, 1410], [1418, 1415, 1410], [1422, 1077, 1416], [1247, 1350, 1394], [37, 43, 1180], [1204, 1315, 1358], [1428, 1383, 1375], [1356, 1355, 1269], [1409, 1418, 1417], [1302, 45, 1246], [1421, 1416, 1415], [1421, 1422, 1416], [1422, 1494, 1077], [957, 720, 938], [1423, 1409, 1420], [1423, 1418, 1409], [752, 434, 1438], [1260, 1358, 1408], [1363, 1385, 785], [1423, 1426, 1418], [1426, 1424, 1418], [1229, 1649, 1124], [1222, 1260, 1350], [1508, 1523, 1137], [1278, 1285, 769], [1482, 917, 144], [1418, 1424, 1415], [1425, 1422, 1421], [1425, 1524, 1422], [1272, 1388, 1390], [1391, 409, 1313], [1378, 1366, 1381], [1371, 483, 1361], [720, 1262, 1278], [29, 103, 159], [1271, 1364, 1267], [1424, 1427, 1415], [1537, 1522, 1518], [134, 752, 1438], [1420, 934, 941], [1428, 1375, 1284], [1277, 1224, 1831], [1362, 1180, 1266], [1401, 1426, 1423], [1577, 1369, 1291], [268, 483, 262], [1383, 1450, 1456], [1384, 1175, 1431], [1430, 1415, 1427], [1430, 1421, 1415], [1430, 1425, 1421], [1379, 1382, 1247], [1252, 1553, 1429], [1206, 1392, 1395], [1433, 1430, 1427], [309, 208, 1353], [1272, 1390, 1254], [1361, 483, 1366], [1523, 817, 808], [1302, 1254, 1392], [1371, 1361, 1303], [1426, 1435, 1424], [1435, 1433, 1424], [1433, 1427, 1424], [720, 769, 1433], [796, 1258, 1388], [1590, 1419, 1268], [1289, 1372, 1371], [1305, 1317, 1509], [998, 1372, 1174], [40, 1386, 139], [1261, 1354, 703], [1364, 1271, 1274], [134, 1438, 1437], [1436, 1319, 1437], [1317, 686, 1509], [1484, 932, 1304], [1434, 1432, 1509], [1420, 65, 934], [931, 930, 736], [1367, 1357, 1309], [1372, 1370, 1371], [1204, 1208, 1315], [1426, 938, 1435], [1368, 1363, 1253], [1207, 454, 1190], [1302, 1310, 1272], [309, 1377, 390], [390, 1377, 1411], [1370, 1372, 998], [1411, 1590, 1148], [720, 1433, 1435], [1450, 1383, 1428], [1379, 678, 1382], [1405, 678, 1379], [1208, 1291, 1315], [1399, 134, 1319], [1367, 1309, 1373], [1373, 1352, 1276], [596, 741, 593], [553, 1264, 612], [1433, 1436, 1430], [1437, 1438, 1430], [964, 1405, 1379], [1373, 1309, 1352], [1265, 1403, 1390], [1233, 1618, 1434], [1365, 1310, 1302], [789, 796, 1365], [720, 1435, 938], [128, 139, 1389], [1466, 933, 1525], [1191, 1640, 1637], [1314, 1442, 943], [1141, 353, 1323], [1489, 1138, 1474], [1462, 1477, 1440], [1474, 1138, 1488], [1442, 1314, 1443], [1446, 1030, 1546], [1484, 1145, 697], [1549, 1443, 1445], [1470, 1572, 1468], [1397, 1239, 1507], [1649, 1825, 1824], [1259, 1440, 1477], [1451, 1450, 1449], [978, 1446, 652], [1454, 1456, 1451], [1451, 1456, 1450], [341, 1507, 595], [933, 1547, 79], [804, 1452, 1060], [1454, 1455, 1456], [1398, 1460, 1454], [1455, 877, 1456], [1277, 1831, 1825], [804, 1060, 1458], [1339, 1459, 1595], [1314, 1104, 1443], [933, 1448, 1547], [147, 1460, 1398], [1460, 1461, 1454], [1454, 1461, 1455], [1292, 1125, 1464], [417, 1531, 1480], [1459, 1339, 1325], [811, 1756, 335], [1512, 936, 1490], [777, 1529, 1098], [147, 1475, 1460], [1464, 253, 1459], [836, 855, 482], [1487, 1486, 1307], [1104, 1501, 1443], [1439, 1200, 1532], [1475, 1469, 1460], [1460, 1469, 1461], [1325, 1464, 1459], [1277, 1825, 1649], [1532, 1200, 1077], [844, 877, 1455], [1572, 933, 1466], [1479, 568, 973], [1509, 335, 1305], [1339, 1595, 1759], [1469, 1476, 1461], [1461, 1476, 1455], [1104, 1470, 1468], [1464, 1472, 253], [1117, 1091, 1407], [1756, 1542, 335], [1206, 1395, 1188], [335, 1542, 1330], [835, 844, 1455], [1471, 1598, 1462], [1491, 1442, 1441], [835, 1455, 1476], [1441, 1442, 1443], [1489, 1474, 1473], [1251, 1236, 1250], [1030, 1452, 1477], [1598, 1439, 1532], [978, 1598, 1492], [1426, 1401, 938], [1448, 1584, 1482], [1724, 1497, 1475], [1475, 1497, 1469], [1484, 1535, 932], [1307, 1486, 1113], [1487, 696, 1495], [1037, 1491, 1441], [1030, 1446, 936], [1453, 1487, 1495], [696, 1467, 1495], [1138, 1489, 1483], [1497, 1143, 1469], [1469, 1143, 1476], [652, 1598, 978], [850, 1043, 1150], [1482, 1584, 1320], [1731, 98, 1697], [1113, 1554, 1573], [1524, 1532, 1494], [1496, 1467, 696], [1452, 1259, 1477], [296, 1504, 1497], [1504, 1143, 1497], [1143, 1499, 1476], [718, 910, 1498], [868, 1540, 1528], [817, 1253, 810], [1490, 696, 1487], [1440, 1491, 1037], [1510, 676, 595], [1488, 1492, 1517], [781, 1239, 1397], [1467, 1519, 1503], [1500, 1307, 1759], [1149, 397, 452], [1504, 1514, 1143], [1514, 842, 1143], [1125, 733, 1458], [1503, 1531, 1555], [1276, 1036, 1137], [1440, 723, 1123], [1036, 1508, 1137], [817, 1508, 1253], [103, 883, 1112], [1458, 731, 1472], [1512, 1490, 1487], [1487, 1453, 1486], [1138, 978, 1488], [1036, 1253, 1508], [1398, 149, 147], [1474, 1517, 1513], [1125, 1458, 1472], [1486, 1453, 1554], [1518, 1534, 758], [345, 1058, 1062], [928, 1202, 1369], [1554, 1541, 1505], [1464, 1125, 1472], [1504, 764, 1514], [304, 426, 573], [1505, 742, 1506], [1479, 1572, 1478], [1519, 1483, 1489], [833, 716, 1069], [1522, 1534, 1518], [1115, 1513, 777], [811, 335, 1432], [1591, 1533, 1407], [777, 1517, 1529], [1513, 1517, 777], [1498, 910, 1397], [1069, 1539, 833], [833, 1539, 1537], [1522, 1551, 1534], [1534, 1551, 1523], [1538, 1137, 1523], [910, 51, 1397], [1367, 1373, 703], [1466, 1525, 1468], [157, 1186, 1832], [1429, 1511, 1506], [1573, 1505, 1506], [1259, 1452, 804], [1503, 1495, 1467], [262, 483, 780], [1572, 1466, 1468], [1536, 1556, 716], [716, 1556, 1069], [1544, 1523, 1551], [1544, 1538, 1523], [1511, 1573, 1506], [933, 1572, 1448], [1543, 1537, 1539], [1537, 1543, 1522], [1091, 933, 79], [1519, 1540, 1545], [1549, 1445, 86], [1069, 1548, 1539], [1548, 1543, 1539], [1543, 1551, 1522], [1500, 1487, 1307], [68, 784, 1186], [1552, 1544, 1551], [1550, 1538, 1544], [1538, 1550, 1137], [1519, 1473, 1540], [1547, 1448, 1482], [1560, 1563, 1536], [1536, 1563, 1556], [1556, 1548, 1069], [1543, 1558, 1551], [1137, 1550, 1276], [1453, 1495, 1555], [1561, 1543, 1548], [1543, 1561, 1558], [1558, 1566, 1551], [1552, 1550, 1544], [1569, 1557, 1550], [1557, 1276, 1550], [1276, 1557, 254], [1531, 1503, 1480], [1535, 1530, 1510], [1545, 1503, 1519], [1547, 1482, 79], [1566, 1552, 1551], [1552, 1569, 1550], [1503, 1545, 1480], [703, 1377, 309], [1625, 675, 756], [1037, 1441, 88], [929, 254, 1557], [849, 1567, 1560], [1556, 1564, 1548], [1492, 1529, 1517], [1252, 1429, 1506], [1553, 1027, 1429], [1453, 1555, 1541], [1554, 1453, 1541], [1233, 686, 1553], [1328, 1104, 1314], [1564, 1576, 1548], [1548, 1576, 1561], [1557, 1562, 929], [1520, 112, 1668], [1483, 1446, 1138], [778, 1570, 1567], [1563, 1564, 1556], [1561, 1565, 1558], [1565, 1566, 1558], [1569, 1552, 1566], [1562, 1557, 1569], [1530, 1535, 1484], [1387, 1402, 1395], [1621, 1634, 1387], [1567, 1568, 1560], [1560, 1568, 1563], [1571, 1569, 1566], [1344, 1330, 1542], [1577, 1431, 1353], [1638, 233, 304], [1524, 1463, 1529], [1353, 1431, 1175], [1077, 1200, 1413], [1478, 1470, 1104], [1568, 1575, 1563], [1563, 1575, 1564], [1575, 1576, 1564], [1561, 1576, 1565], [1565, 1574, 1566], [1562, 1515, 929], [1555, 96, 1541], [1531, 417, 96], [1555, 1531, 96], [1246, 45, 1651], [208, 1577, 1353], [1586, 1568, 1567], [1574, 1571, 1566], [1571, 1583, 1569], [1474, 1513, 1528], [1239, 1322, 1535], [1478, 1572, 1470], [1570, 1586, 1567], [1488, 1517, 1474], [8, 1833, 1837], [1123, 1442, 1491], [1589, 1568, 1586], [1576, 1594, 1565], [1565, 1594, 1574], [1562, 198, 1515], [1559, 1441, 1549], [1441, 1443, 1549], [1135, 425, 1481], [1239, 1535, 1507], [1595, 1487, 1500], [1570, 1585, 1586], [1589, 1578, 1568], [1568, 1578, 1575], [1579, 1569, 1583], [1177, 1577, 208], [115, 1236, 110], [1578, 1593, 1575], [1587, 1576, 1575], [1576, 1581, 1594], [1571, 1582, 1583], [1588, 1579, 1583], [1579, 1580, 1562], [1569, 1579, 1562], [1562, 1580, 198], [1027, 1511, 1429], [1589, 1593, 1578], [1587, 1581, 1576], [1582, 1574, 1594], [1574, 1582, 1571], [1575, 1593, 1587], [1583, 1582, 1588], [1580, 1590, 198], [1587, 1593, 1581], [1505, 1541, 96], [1369, 1577, 1177], [1573, 1554, 1505], [1479, 1478, 568], [1585, 1589, 1586], [1369, 1177, 704], [766, 1584, 1334], [977, 1257, 1059], [1091, 1591, 1407], [1591, 1091, 1457], [1585, 1604, 1589], [1581, 1592, 1594], [1602, 1582, 1594], [1582, 1608, 1588], [1608, 1579, 1588], [1579, 1597, 1580], [1419, 1590, 1580], [1597, 1419, 1580], [1431, 1577, 1291], [1589, 1604, 1593], [1601, 1596, 1593], [1593, 1596, 1581], [1306, 1511, 1027], [1511, 1113, 1573], [1786, 1412, 1585], [1412, 1604, 1585], [1581, 1596, 1592], [1592, 1602, 1594], [1608, 1599, 1579], [1599, 1611, 1579], [1579, 1611, 1597], [1512, 1487, 253], [1519, 1489, 1473], [1545, 1540, 868], [1083, 1187, 1402], [1117, 1407, 1400], [1292, 733, 1125], [284, 1240, 1245], [1604, 1600, 1593], [1600, 1601, 1593], [1582, 1607, 1608], [789, 1369, 704], [1467, 1483, 1519], [1601, 1613, 1596], [1596, 1613, 1592], [1602, 1607, 1582], [1620, 1553, 1252], [1601, 1605, 1613], [1592, 1613, 1602], [1602, 1606, 1607], [1608, 1609, 1599], [1599, 1609, 1611], [1603, 1597, 1611], [1265, 1419, 1597], [1603, 1265, 1597], [1392, 1206, 45], [928, 1369, 789], [1474, 1528, 1473], [1104, 1468, 1501], [1412, 1521, 1604], [1613, 1631, 1602], [1607, 1610, 1608], [1608, 1610, 1609], [1476, 863, 835], [1495, 1503, 1555], [1498, 1397, 718], [1520, 1668, 7], [1604, 1615, 1600], [1605, 1601, 1600], [1602, 1631, 1606], [1606, 1610, 1607], [1759, 1595, 1500], [1292, 1298, 733], [1615, 1604, 1521], [1609, 1603, 1611], [652, 1462, 1598], [1468, 1525, 1445], [1443, 1501, 1445], [1134, 1723, 150], [1521, 1622, 1615], [1615, 1616, 1600], [1616, 1605, 1600], [1605, 1616, 1612], [1605, 1612, 1613], [1612, 1617, 1613], [1613, 1617, 1631], [1606, 1614, 1610], [1265, 1603, 1403], [448, 417, 1480], [1595, 253, 1487], [1501, 1468, 1445], [1383, 1456, 877], [1490, 1496, 696], [1610, 1627, 1609], [1627, 1621, 1609], [1591, 1481, 1533], [1598, 1471, 1439], [1353, 1261, 703], [1606, 1631, 1614], [1609, 1621, 1403], [1532, 1077, 1494], [1528, 1115, 513], [1546, 652, 1446], [1211, 928, 1365], [1540, 1473, 1528], [1078, 1502, 1787], [1425, 1430, 1438], [1617, 1630, 1631], [959, 749, 944], [566, 570, 603], [1716, 310, 1521], [775, 452, 397], [1615, 1636, 1616], [1616, 1636, 1612], [1610, 1632, 1627], [789, 704, 1258], [1457, 1481, 1591], [1769, 1756, 811], [207, 1629, 722], [1629, 1625, 722], [1224, 1277, 1622], [1622, 1636, 1615], [1636, 1646, 1612], [1612, 1630, 1617], [1631, 1626, 1614], [1614, 1632, 1610], [1506, 104, 95], [1481, 1457, 1136], [1123, 943, 1442], [936, 1446, 1496], [1499, 863, 1476], [1629, 1031, 1625], [1233, 1509, 686], [1633, 1634, 1621], [1621, 1387, 1403], [1472, 1512, 253], [1177, 208, 704], [1277, 1636, 1622], [1626, 1632, 1614], [1627, 1633, 1621], [936, 1496, 1490], [185, 1454, 1451], [731, 936, 1512], [1638, 1635, 207], [553, 1263, 1264], [1653, 1212, 1639], [1633, 1627, 1632], [1633, 1387, 1634], [1458, 1060, 731], [368, 1307, 1113], [1264, 1031, 1629], [1152, 850, 1150], [1277, 1644, 1636], [1646, 1637, 1612], [1637, 1630, 1612], [1647, 1631, 1630], [1647, 1626, 1631], [1422, 1524, 1494], [1030, 652, 1546], [1635, 1629, 207], [1635, 1264, 1629], [1639, 1646, 1636], [1637, 1640, 1630], [1641, 1632, 1626], [1632, 1642, 1633], [1633, 1643, 1387], [842, 1499, 1143], [865, 863, 1499], [1516, 978, 1492], [67, 1130, 784], [1103, 1505, 96], [88, 1441, 1200], [1644, 1639, 1636], [1640, 1647, 1630], [1647, 1641, 1626], [1633, 1648, 1643], [1492, 1532, 1524], [1488, 1516, 1492], [1037, 1471, 1462], [612, 1264, 1635], [1502, 1078, 1124], [1641, 1642, 1632], [1648, 1633, 1642], [1528, 513, 868], [1492, 1598, 1532], [1095, 991, 760], [679, 157, 1664], [760, 1128, 1785], [1277, 1650, 1644], [320, 1022, 244], [1559, 1549, 86], [1676, 1520, 7], [1488, 978, 1516], [1095, 760, 1785], [1128, 384, 1120], [304, 312, 1638], [1081, 1638, 312], [1081, 1635, 1638], [103, 612, 1635], [652, 1477, 1462], [1650, 1645, 1644], [1645, 1639, 1644], [1639, 1637, 1646], [1640, 1090, 1647], [1654, 1641, 1647], [1654, 1642, 1641], [1654, 1648, 1642], [1643, 1402, 1387], [1432, 335, 1509], [384, 1128, 760], [1652, 312, 304], [103, 1243, 612], [1277, 1649, 1650], [1090, 1654, 1647], [1643, 1648, 1402], [1134, 324, 1675], [679, 68, 157], [1652, 1081, 312], [1136, 301, 803], [1653, 1639, 1645], [723, 1440, 1259], [803, 854, 1136], [104, 1506, 742], [1112, 159, 103], [1654, 1083, 1648], [977, 1651, 1257], [1397, 1507, 718], [1081, 103, 1635], [1650, 677, 1645], [1083, 1402, 1648], [1706, 1655, 1671], [1624, 1704, 1711], [767, 2, 1], [608, 794, 294], [1678, 1683, 1686], [767, 1682, 2], [1669, 1692, 1675], [296, 1681, 764], [1671, 1656, 1672], [17, 1673, 1679], [1706, 1671, 1673], [1662, 1674, 1699], [1655, 1657, 1656], [418, 84, 915], [1526, 1514, 764], [1658, 1657, 567], [870, 1695, 764], [813, 1697, 98], [1659, 821, 5], [60, 1013, 848], [1013, 110, 1213], [661, 1038, 1692], [1660, 1703, 17], [1693, 1673, 17], [1663, 1715, 1743], [1013, 115, 110], [344, 1733, 32], [1670, 1663, 1743], [1670, 1743, 1738], [1677, 1670, 1738], [1661, 4, 3], [1084, 1683, 1678], [1728, 793, 1130], [1683, 1767, 1196], [1677, 1738, 1196], [1279, 1786, 853], [294, 1038, 608], [1279, 1689, 1786], [870, 18, 1708], [870, 1680, 1695], [1705, 10, 1670], [1084, 1767, 1683], [1196, 1738, 1686], [1750, 870, 1681], [1750, 18, 870], [1773, 1703, 1660], [1135, 47, 425], [150, 323, 1134], [1707, 1655, 1706], [1741, 344, 1687], [1685, 1691, 1684], [1684, 1691, 802], [1672, 1656, 0], [1038, 124, 608], [1671, 1672, 1690], [1628, 1218, 1767], [1686, 1275, 1667], [1493, 1750, 1681], [1773, 18, 1750], [1773, 1660, 18], [1679, 1671, 16], [1735, 1706, 1673], [1667, 1678, 1686], [1688, 1658, 1], [1656, 1688, 0], [1293, 1281, 1458], [1698, 1678, 1667], [1696, 1130, 1722], [1698, 1667, 1696], [1715, 1662, 1699], [1692, 1038, 294], [1682, 767, 357], [1669, 661, 1692], [802, 1702, 824], [1028, 1067, 1784], [822, 1624, 778], [119, 813, 861], [1218, 1670, 1677], [1703, 1693, 17], [1658, 1710, 1], [750, 1730, 1729], [1701, 750, 1729], [1693, 1735, 1673], [1731, 1694, 98], [1691, 1702, 802], [783, 1729, 1719], [1680, 870, 1708], [1707, 1709, 1655], [533, 756, 675], [1691, 1210, 1702], [11, 1705, 1670], [1767, 1218, 1196], [1218, 1677, 1196], [1664, 1716, 1721], [1729, 1725, 1719], [1729, 1072, 1725], [1210, 1116, 1702], [1702, 1720, 824], [1682, 1661, 2], [1713, 1719, 1721], [1716, 1786, 1713], [1730, 1722, 1072], [294, 1717, 1811], [1692, 294, 1666], [1659, 680, 821], [824, 1720, 1714], [1726, 1731, 1718], [345, 1062, 1045], [1738, 1743, 1275], [1075, 1089, 1071], [783, 1719, 1689], [1275, 684, 1728], [1692, 1666, 1665], [1675, 1692, 1665], [294, 1811, 1666], [1716, 1664, 310], [1678, 1698, 1700], [6, 9, 1727], [676, 649, 595], [381, 31, 361], [1723, 1804, 1772], [1727, 9, 1694], [1720, 1089, 1714], [1786, 1716, 1412], [1683, 1196, 1686], [1718, 1697, 1085], [1116, 1739, 1702], [1739, 1734, 1720], [1702, 1739, 1720], [1089, 1720, 1734], [509, 748, 1745], [1743, 1715, 1726], [1717, 294, 794], [1116, 1732, 1739], [1718, 1731, 1697], [1696, 1667, 1130], [1134, 1665, 1723], [1694, 712, 98], [101, 1687, 102], [391, 1736, 101], [662, 636, 642], [1734, 1447, 1089], [1089, 1447, 1071], [436, 99, 493], [1689, 1279, 783], [1485, 1465, 1342], [1736, 1687, 101], [344, 1741, 1733], [1741, 1742, 1733], [1735, 829, 1706], [829, 1707, 1706], [1485, 1332, 1465], [952, 1126, 1742], [1747, 1447, 1734], [879, 892, 645], [1730, 1146, 1696], [829, 1709, 1707], [1709, 1712, 1655], [118, 1739, 1732], [1332, 1744, 1465], [1687, 1749, 1741], [1741, 1758, 1742], [679, 1072, 68], [1072, 1722, 68], [118, 1747, 1739], [1747, 1734, 1739], [1465, 1744, 1736], [1736, 1740, 1687], [1704, 1701, 783], [1665, 624, 1723], [1722, 1130, 67], [1025, 1055, 467], [1444, 14, 1701], [558, 522, 530], [1657, 1658, 1688], [1339, 1746, 1332], [1332, 1748, 1744], [1687, 1740, 1749], [1741, 1749, 1758], [1109, 952, 1742], [1747, 118, 141], [1671, 1690, 1628], [1671, 1628, 16], [1657, 1688, 1656], [1745, 748, 1447], [357, 767, 1710], [1746, 1748, 1332], [1146, 1700, 1698], [1759, 1307, 1338], [1239, 781, 1322], [1745, 1447, 1747], [522, 1745, 1747], [316, 717, 595], [148, 1493, 1724], [1758, 1109, 1742], [1725, 1072, 679], [726, 719, 1661], [1695, 1680, 1526], [1772, 1750, 1493], [148, 1772, 1493], [1542, 1751, 1101], [952, 1109, 1086], [1744, 1752, 1736], [1736, 1752, 1740], [1753, 1755, 1740], [391, 1342, 1736], [821, 112, 1520], [557, 530, 1747], [530, 522, 1747], [994, 879, 645], [1542, 1756, 1751], [1813, 1693, 1703], [1746, 1754, 1748], [1748, 1764, 1744], [1752, 1757, 1740], [1740, 1757, 1753], [1749, 1740, 1755], [1755, 1763, 1749], [1763, 1758, 1749], [1275, 1743, 684], [1813, 1735, 1693], [1107, 1099, 1101], [1723, 624, 1804], [1403, 1603, 1609], [1748, 1754, 1764], [1744, 1757, 1752], [1760, 1109, 1758], [1465, 1736, 1342], [436, 115, 99], [1686, 1738, 1275], [1751, 1766, 1101], [1759, 1754, 1746], [1755, 1753, 1763], [1570, 1279, 853], [1701, 1146, 750], [1655, 1656, 1671], [11, 1670, 1218], [1761, 1751, 1756], [1766, 1107, 1101], [1726, 1623, 1731], [1711, 1704, 1279], [67, 784, 68], [558, 530, 545], [1620, 1618, 1233], [1769, 1761, 1756], [102, 1687, 344], [1338, 1754, 1759], [1754, 232, 1764], [1744, 1765, 1757], [1757, 1763, 1753], [1762, 1760, 1758], [1760, 1771, 1109], [1339, 1759, 1746], [1675, 1665, 1134], [1730, 1696, 1722], [1774, 1751, 1761], [1766, 1780, 1107], [1780, 1105, 1107], [1764, 1765, 1744], [1763, 1762, 1758], [1772, 1773, 1750], [1811, 1813, 1703], [1434, 1769, 1432], [1780, 1766, 1751], [232, 1781, 1764], [1711, 1279, 1570], [1688, 1, 0], [1774, 1780, 1751], [1764, 1781, 1765], [1765, 1768, 1757], [1757, 1768, 1763], [1777, 1782, 1760], [1762, 1777, 1760], [1769, 1774, 1761], [1763, 1777, 1762], [1760, 1782, 1771], [232, 1737, 1781], [1768, 1776, 1763], [272, 255, 774], [1669, 994, 661], [1618, 1769, 1434], [1765, 589, 1768], [1770, 1777, 1763], [1701, 1729, 783], [1783, 1774, 1769], [1789, 1780, 1774], [589, 1775, 1768], [1776, 1770, 1763], [1782, 1778, 1771], [1771, 1778, 1070], [624, 1703, 1773], [624, 1811, 1703], [1620, 1244, 1618], [1779, 1769, 1618], [1779, 1783, 1769], [739, 1735, 1813], [1775, 1776, 1768], [1790, 1777, 1770], [1777, 1778, 1782], [1725, 679, 1721], [733, 1293, 1458], [1802, 1618, 1244], [1802, 1779, 1618], [1788, 1783, 1779], [1789, 1774, 1783], [1796, 1780, 1789], [1796, 1119, 1780], [1823, 1817, 325], [1699, 1727, 1623], [750, 1146, 1730], [1497, 1724, 296], [1128, 1119, 1796], [61, 62, 71], [1131, 413, 824], [1114, 1111, 249], [1784, 1776, 1775], [1123, 723, 1283], [1791, 1788, 1779], [1788, 1789, 1783], [1095, 1797, 1074], [1028, 1784, 1775], [1784, 1770, 1776], [1777, 1790, 1778], [1793, 1797, 1095], [1797, 1800, 1074], [1798, 1790, 1770], [1805, 1802, 1244], [1802, 1791, 1779], [1792, 1789, 1788], [1793, 1785, 1128], [1793, 1095, 1785], [1074, 1800, 1619], [741, 457, 593], [1798, 1770, 1784], [1798, 1794, 1790], [1786, 1689, 1713], [684, 1726, 1718], [1728, 1085, 793], [1795, 1787, 1502], [1806, 1802, 1805], [1819, 1788, 1791], [1067, 1798, 1784], [1790, 1794, 1778], [1795, 1502, 1124], [1801, 1805, 1787], [1807, 1791, 1802], [1807, 1819, 1791], [1819, 1792, 1788], [1799, 1128, 1796], [994, 645, 661], [684, 1085, 1728], [684, 1718, 1085], [1699, 1623, 1726], [1801, 1787, 1795], [1808, 1789, 1792], [1808, 1796, 1789], [1799, 1793, 1128], [1809, 1797, 1793], [1809, 1803, 1797], [1803, 1800, 1797], [1067, 1794, 1798], [774, 255, 1778], [1673, 1671, 1679], [879, 1669, 888], [19, 1807, 1802], [1810, 1619, 1800], [879, 994, 1669], [1794, 774, 1778], [1723, 1772, 148], [1804, 1773, 1772], [1814, 1795, 1124], [1649, 1814, 1124], [1814, 1801, 1795], [1812, 1806, 1805], [19, 1802, 1806], [19, 1819, 1807], [1810, 1800, 1803], [1804, 624, 1773], [1714, 1131, 824], [1801, 1812, 1805], [1812, 19, 1806], [1808, 1792, 1819], [1799, 1809, 1793], [1821, 1810, 1803], [1717, 739, 1813], [1061, 1619, 1822], [1794, 1817, 774], [79, 1482, 144], [1815, 1801, 1814], [23, 1819, 19], [589, 1028, 1775], [1817, 1823, 774], [1689, 1719, 1713], [1824, 1814, 1649], [1827, 1818, 1801], [1818, 1812, 1801], [1818, 19, 1812], [1818, 20, 19], [1816, 1809, 1799], [1821, 1803, 1809], [1822, 1619, 1810], [124, 708, 608], [1663, 10, 1715], [1815, 1827, 1801], [1820, 1808, 1819], [23, 1820, 1819], [603, 1810, 1821], [603, 1822, 1810], [1085, 1697, 793], [1628, 1690, 11], [1527, 1704, 1624], [1730, 1072, 1729], [1526, 1444, 1704], [1526, 1680, 1444], [1704, 1444, 1701], [1816, 1821, 1809], [1722, 67, 68], [317, 272, 1823], [1716, 1713, 1721], [16, 1628, 1767], [1527, 1526, 1704], [1824, 1826, 1814], [1814, 1826, 1815], [1818, 21, 20], [1835, 1808, 1820], [603, 570, 1822], [226, 1070, 1778], [1013, 1181, 1179], [1721, 679, 1664], [1717, 1813, 1811], [1828, 1827, 1815], [22, 1820, 23], [22, 1835, 1820], [1830, 603, 1821], [719, 1659, 5], [643, 567, 1657], [1717, 794, 739], [1825, 1826, 1824], [1828, 1815, 1826], [1829, 21, 1818], [1808, 1835, 13], [4, 719, 5], [10, 1662, 1715], [1828, 1832, 1827], [1832, 1818, 1827], [12, 1833, 1816], [1833, 1821, 1816], [1833, 1830, 1821], [14, 1146, 1701], [1186, 1829, 1818], [1280, 603, 1830], [14, 1700, 1146], [1667, 1728, 1130], [1825, 1834, 1826], [1834, 1828, 1826], [1832, 1186, 1818], [1836, 13, 1835], [1624, 1711, 1570], [778, 1624, 1570], [1719, 1725, 1721], [1002, 1825, 1831], [1002, 1834, 1825], [1834, 1832, 1828], [1186, 21, 1829], [1836, 1835, 22], [1837, 1833, 12], [1280, 1830, 1833], [1667, 1275, 1728], [16, 1767, 1084], [589, 1765, 1838], [1765, 1781, 1838], [1781, 1737, 1838], [1737, 982, 1838], [982, 1053, 1838], [1053, 816, 1838], [816, 589, 1838]];","'use strict';\n\nmodule.exports = angleNormals;\n\nfunction hypot(x, y, z) {\n  return Math.sqrt(Math.pow(x, 2) + Math.pow(y, 2) + Math.pow(z, 2));\n}\n\nfunction weight(s, r, a) {\n  return Math.atan2(r, s - a);\n}\n\nfunction mulAdd(dest, s, x, y, z) {\n  dest[0] += s * x;\n  dest[1] += s * y;\n  dest[2] += s * z;\n}\n\nfunction angleNormals(cells, positions) {\n  var numVerts = positions.length;\n  var numCells = cells.length; //Allocate normal array\n\n  var normals = new Array(numVerts);\n\n  for (var i = 0; i < numVerts; ++i) {\n    normals[i] = [0, 0, 0];\n  } //Scan cells, and\n\n\n  for (var i = 0; i < numCells; ++i) {\n    var cell = cells[i];\n    var a = positions[cell[0]];\n    var b = positions[cell[1]];\n    var c = positions[cell[2]];\n    var abx = a[0] - b[0];\n    var aby = a[1] - b[1];\n    var abz = a[2] - b[2];\n    var ab = hypot(abx, aby, abz);\n    var bcx = b[0] - c[0];\n    var bcy = b[1] - c[1];\n    var bcz = b[2] - c[2];\n    var bc = hypot(bcx, bcy, bcz);\n    var cax = c[0] - a[0];\n    var cay = c[1] - a[1];\n    var caz = c[2] - a[2];\n    var ca = hypot(cax, cay, caz);\n\n    if (Math.min(ab, bc, ca) < 1e-6) {\n      continue;\n    }\n\n    var s = 0.5 * (ab + bc + ca);\n    var r = Math.sqrt((s - ab) * (s - bc) * (s - ca) / s);\n    var nx = aby * bcz - abz * bcy;\n    var ny = abz * bcx - abx * bcz;\n    var nz = abx * bcy - aby * bcx;\n    var nl = hypot(nx, ny, nz);\n    nx /= nl;\n    ny /= nl;\n    nz /= nl;\n    mulAdd(normals[cell[0]], weight(s, r, bc), nx, ny, nz);\n    mulAdd(normals[cell[1]], weight(s, r, ca), nx, ny, nz);\n    mulAdd(normals[cell[2]], weight(s, r, ab), nx, ny, nz);\n  } //Normalize all the normals\n\n\n  for (var i = 0; i < numVerts; ++i) {\n    var n = normals[i];\n    var l = Math.sqrt(Math.pow(n[0], 2) + Math.pow(n[1], 2) + Math.pow(n[2], 2));\n\n    if (l < 1e-8) {\n      n[0] = 1;\n      n[1] = 0;\n      n[2] = 0;\n      continue;\n    }\n\n    n[0] /= l;\n    n[1] /= l;\n    n[2] /= l;\n  }\n\n  return normals;\n}"],"sourceRoot":""}