{"version":3,"sources":["../node_modules/_@babel_runtime@7.3.1@@babel/runtime/helpers/esm/classCallCheck.js","../node_modules/_@babel_runtime@7.3.1@@babel/runtime/helpers/esm/createClass.js","demo/Demo12/runtime.js","demo/Demo12/ray-tracing.js","demo/Demo12/index.js"],"names":["_classCallCheck","instance","Constructor","TypeError","__webpack_require__","d","__webpack_exports__","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","_createClass","protoProps","staticProps","prototype","vec3","require","isVec3","obj","Float32Array","toVec3","n","fromValues","module","exports","_add_","left","right","add","create","_sub_","sub","_mul_","mul","_div_","div","_negate_","operand","negate","from","x","y","z","dot","vec3a","vec3b","cross","normalize","Ray","a","b","classCallCheck","this","t","createRecord","p","normal","Sphere","center","radius","material","ray","tmin","tmax","record","oc","origin","direction","c","discriminant","temp","Math","sqrt","isValid","pointAt","HitableList","list","tempRecord","hited","closest","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","value","hit","assign","err","return","_this$list","push","apply","arguments","Camera","lookFrom","lookAt","vup","vfov","aspect","aperture","focusDist","theta","PI","halfHeight","tan","halfWidth","w","u","v","lowerLeftCorner","horizontal","vertical","lensRadius","s","rd","randomVec3","random","randomInUnitDisk","offset","randomInUnitSphere","squaredLength","LambertianMaterial","albedo","ref","scattered","attenuation","reflect","MetalMaterial","fuzz","min","reflected","DielectricMaterial","refractIndex","outwardNormal","ni_over_nt","consine","dotResult","refractProb","uv","dt","refracted","refract","r0","pow","schlick","color","world","depth","Infinity","scatter","start","end","ray_tracing","_ref","_ref$width","width","_ref$height","height","_ref$amount","amount","_ref$lookFrom","_ref$lookAt","_ref$vup","_ref$vfov","_ref$aspect","_ref$focusDist","_ref$aperture","nx","ny","camera","range","floor","based","chooseMat","randomScene","renderByPosition","getRay","render","regenerator_default","mark","j","_renderByPosition","_renderByPosition2","r","g","wrap","_context","prev","slicedToArray","stop","noop","frame","f","Promise","resolve","requestAnimationFrame","getMSE","listA","listB","sum","sortByMSE","current","result","index","sort","toColor","Demo01","_useState","useState","_useState2","time","setTime","useRef","deubgRef","useEffect","canvas","debugCanvas","ctx","getContext","createRayTracing","imageData","createImageData","data","prevImageData","currImageData","renderCount","innerCount","innerTime","tid","over","renderToCanvas","fillColor","clearRect","putImageData","showData","_ray$renderByPosition","_ray$renderByPosition2","_ray$renderByPosition3","coarseRender","asyncToGenerator","_callee","step","duration","_args","Date","now","abrupt","_ref2","_callee2","_context2","t0","finish","scheduleRender","_ref3","_callee3","count","item","_args3","_context3","then","clearTimeout","_react_16_8_6_react_default","createElement","Fragment","style","background","toFixed"],"mappings":"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","file":"static/js/8.5c970351.chunk.js","sourcesContent":["export default function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}","function _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nexport default function _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}","const { vec3 } = require('gl-matrix')\r\n\r\nconst isVec3 = obj => obj instanceof Float32Array\r\nconst toVec3 = n => vec3.fromValues(n, n, n)\r\n\r\nlet _add_ = function(left, right) {\r\n  if (!isVec3(left) && !isVec3(right)) return left + right\r\n\r\n  if (!isVec3(left)) left = toVec3(left)\r\n  if (!isVec3(right)) right = toVec3(right)\r\n\r\n  return vec3.add(vec3.create(), left, right)\r\n}\r\n\r\nlet _sub_ = function(left, right) {\r\n  if (!isVec3(left) && !isVec3(right)) return left - right\r\n\r\n  if (!isVec3(left)) left = toVec3(left)\r\n  if (!isVec3(right)) right = toVec3(right)\r\n\r\n  return vec3.sub(vec3.create(), left, right)\r\n}\r\n\r\nlet _mul_ = function(left, right) {\r\n  if (!isVec3(left) && !isVec3(right)) return left * right\r\n\r\n  if (!isVec3(left)) left = toVec3(left)\r\n  if (!isVec3(right)) right = toVec3(right)\r\n\r\n  return vec3.mul(vec3.create(), left, right)\r\n}\r\n\r\nlet _div_ = function(left, right) {\r\n  if (!isVec3(left) && !isVec3(right)) return left / right\r\n\r\n  if (!isVec3(left)) left = toVec3(left)\r\n  if (!isVec3(right)) right = toVec3(right)\r\n\r\n  return vec3.div(vec3.create(), left, right)\r\n}\r\n\r\nlet _negate_ = function(operand) {\r\n  if (!isVec3(operand)) return -operand\r\n  return vec3.negate(vec3.create(), operand)\r\n}\r\n\r\nmodule.exports = {\r\n  _add_,\r\n  _sub_,\r\n  _mul_,\r\n  _div_,\r\n  _negate_\r\n}\r\n","const {\r\n  vec3\r\n} = require('gl-matrix');\r\n\r\nconst {\r\n  _add_,\r\n  _sub_,\r\n  _mul_,\r\n  _div_,\r\n  _negate_\r\n} = require('./runtime');\r\n\r\nconst from = (x, y, z) => vec3.fromValues(x, y, z);\r\n\r\nconst dot = (vec3a, vec3b) => vec3.dot(vec3a, vec3b);\r\n\r\nconst cross = (vec3a, vec3b) => vec3.cross(vec3.create(), vec3a, vec3b);\r\n\r\nconst normalize = vec3a => vec3.normalize(vec3.create(), vec3a);\r\n\r\nclass Ray {\r\n  constructor(a, b) {\r\n    this.a = a;\r\n    this.b = b;\r\n  }\r\n\r\n  origin() {\r\n    return this.a;\r\n  }\r\n\r\n  direction() {\r\n    return this.b;\r\n  }\r\n\r\n  pointAt(t) {\r\n    let {\r\n      a,\r\n      b\r\n    } = this;\r\n    return _add_(a, _mul_(t, b));\r\n  }\r\n\r\n} // linear-blend/linear-interpolation\r\n\r\n\r\nconst lerp = (t, start, end) => _add_(_mul_(_sub_(1.0, t), start), _mul_(t, end));\r\n\r\nconst createRecord = () => {\r\n  return {\r\n    t: 0,\r\n    p: vec3.create(),\r\n    normal: vec3.create()\r\n  };\r\n};\r\n\r\nclass Sphere {\r\n  constructor(center, radius, material) {\r\n    this.center = center;\r\n    this.radius = radius;\r\n    this.material = material;\r\n  }\r\n\r\n  hit(ray, tmin, tmax, record) {\r\n    let oc = _sub_(ray.origin(), this.center);\r\n\r\n    let a = dot(ray.direction(), ray.direction());\r\n    let b = dot(oc, ray.direction());\r\n\r\n    let c = _sub_(dot(oc, oc), _mul_(this.radius, this.radius));\r\n\r\n    let discriminant = _sub_(_mul_(b, b), _mul_(a, c));\r\n\r\n    if (discriminant < 0) return false;\r\n\r\n    let temp = _div_(_sub_(_negate_(b), Math.sqrt(discriminant)), a);\r\n\r\n    let isValid = temp < tmax && temp > tmin;\r\n\r\n    if (!isValid) {\r\n      temp = _div_(_add_(_negate_(b), Math.sqrt(discriminant)), a);\r\n      isValid = temp < tmax && temp > tmin;\r\n    }\r\n\r\n    if (isValid) {\r\n      record.t = temp;\r\n      record.p = ray.pointAt(temp);\r\n      record.normal = _div_(_sub_(record.p, this.center), this.radius);\r\n      record.material = this.material;\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n}\r\n\r\nclass HitableList {\r\n  constructor(list) {\r\n    this.list = list;\r\n  }\r\n\r\n  hit(ray, tmin, tmax, record) {\r\n    let tempRecord = createRecord();\r\n    let hited = false;\r\n    let closest = tmax;\r\n\r\n    for (let object of this.list) {\r\n      if (object.hit(ray, tmin, closest, tempRecord)) {\r\n        hited = true;\r\n        closest = tempRecord.t;\r\n        Object.assign(record, tempRecord);\r\n      }\r\n    }\r\n\r\n    return hited;\r\n  }\r\n\r\n  push(...args) {\r\n    this.list.push(...args);\r\n  }\r\n\r\n}\r\n\r\nconst randomInUnitDisk = () => {\r\n  let p;\r\n\r\n  do {\r\n    let randomVec3 = from(Math.random(), Math.random(), 0.0);\r\n    p = _sub_(_mul_(2.0, randomVec3), from(1.0, 1.0, 0.0));\r\n  } while (dot(p, p) >= 1.0);\r\n\r\n  return p;\r\n};\r\n\r\nclass Camera {\r\n  constructor(lookFrom, lookAt, vup, vfov, aspect, aperture, focusDist) {\r\n    let theta = _div_(_mul_(vfov, Math.PI), 180);\r\n\r\n    let halfHeight = Math.tan(_div_(theta, 2));\r\n\r\n    let halfWidth = _mul_(halfHeight, aspect);\r\n\r\n    let origin = lookFrom;\r\n    let w = normalize(_sub_(lookFrom, lookAt));\r\n    let u = normalize(cross(vup, w));\r\n    let v = cross(w, u);\r\n\r\n    let lowerLeftCorner = _sub_(origin, _mul_(focusDist, _add_(_add_(_mul_(u, halfWidth), _mul_(v, halfHeight)), w)));\r\n\r\n    let horizontal = _mul_(_mul_(_mul_(focusDist, 2), u), halfWidth);\r\n\r\n    let vertical = _mul_(_mul_(_mul_(focusDist, 2), v), halfHeight);\r\n\r\n    this.u = u;\r\n    this.v = v;\r\n    this.origin = origin;\r\n    this.lowerLeftCorner = lowerLeftCorner;\r\n    this.horizontal = horizontal;\r\n    this.vertical = vertical;\r\n    this.lensRadius = _div_(aperture, 2);\r\n  }\r\n\r\n  getRay(s, t) {\r\n    let {\r\n      origin,\r\n      lowerLeftCorner,\r\n      horizontal,\r\n      vertical\r\n    } = this;\r\n\r\n    let rd = _mul_(this.lensRadius, randomInUnitDisk());\r\n\r\n    let offset = _add_(_mul_(this.u, rd[0]), _mul_(this.v, rd[1]));\r\n\r\n    let direction = _sub_(_add_(_add_(lowerLeftCorner, _mul_(s, horizontal)), _mul_(t, vertical)), origin);\r\n\r\n    let ray = new Ray(_add_(origin, offset), _sub_(direction, offset));\r\n    return ray;\r\n  }\r\n\r\n}\r\n\r\nconst randomInUnitSphere = () => {\r\n  let p;\r\n\r\n  do {\r\n    let randomVec3 = from(Math.random(), Math.random(), Math.random());\r\n    p = _sub_(_mul_(2.0, randomVec3), from(1.0, 1.0, 1.0));\r\n  } while (vec3.squaredLength(p) >= 1.0);\r\n\r\n  return p;\r\n};\r\n\r\nclass LambertianMaterial {\r\n  constructor(albedo) {\r\n    this.albedo = albedo;\r\n  }\r\n\r\n  scatter(ray, record, ref) {\r\n    let target = _add_(_add_(record.p, record.normal), randomInUnitSphere());\r\n\r\n    let direction = _sub_(target, record.p);\r\n\r\n    ref.scattered = new Ray(record.p, direction);\r\n    ref.attenuation = this.albedo;\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\nconst reflect = (v, n) => {\r\n  return _sub_(v, _mul_(_mul_(2.0, dot(v, n)), n));\r\n};\r\n\r\nclass MetalMaterial {\r\n  constructor(albedo, fuzz = 1) {\r\n    this.albedo = albedo;\r\n    this.fuzz = Math.min(fuzz, 1);\r\n  }\r\n\r\n  scatter(ray, record, ref) {\r\n    let reflected = reflect(vec3.normalize(vec3.create(), ray.direction()), record.normal);\r\n    ref.scattered = new Ray(record.p, _add_(reflected, _mul_(this.fuzz, randomInUnitSphere())));\r\n    ref.attenuation = this.albedo;\r\n    return dot(ref.scattered.direction(), record.normal) > 0;\r\n  }\r\n\r\n}\r\n\r\nconst refract = (v, normal, ni_over_nt, ref) => {\r\n  let uv = vec3.normalize(vec3.create(), v);\r\n  let dt = dot(uv, normal);\r\n\r\n  let discriminant = _sub_(1.0, _mul_(_mul_(ni_over_nt, ni_over_nt), _sub_(1.0, _mul_(dt, dt))));\r\n\r\n  if (discriminant > 0) {\r\n    ref.refracted = _sub_(_mul_(ni_over_nt, _sub_(uv, _mul_(normal, dt))), _mul_(normal, Math.sqrt(discriminant)));\r\n    return true;\r\n  }\r\n\r\n  return false;\r\n};\r\n\r\nconst schlick = (consine, refractIndex) => {\r\n  let r0 = _div_(_sub_(1, refractIndex), _add_(1, refractIndex));\r\n\r\n  r0 = _mul_(r0, r0);\r\n  return _add_(r0, _mul_(_sub_(1, r0), Math.pow(_sub_(1, consine), 5)));\r\n};\r\n\r\nclass DielectricMaterial {\r\n  constructor(refractIndex) {\r\n    this.refractIndex = refractIndex;\r\n  }\r\n\r\n  scatter(ray, record, ref) {\r\n    let outwardNormal = vec3.create();\r\n    let reflected = reflect(ray.direction(), record.normal);\r\n    let ni_over_nt = 0.0;\r\n    let consine = 0.0;\r\n    ref.attenuation = from(1.0, 1.0, 1.0);\r\n    let dotResult = dot(ray.direction(), record.normal);\r\n\r\n    if (dotResult > 0) {\r\n      outwardNormal = _negate_(record.normal);\r\n      ni_over_nt = this.refractIndex;\r\n      consine = _div_(_mul_(this.refractIndex, dotResult), vec3.length(ray.direction()));\r\n    } else {\r\n      outwardNormal = record.normal;\r\n      ni_over_nt = _div_(1.0, this.refractIndex);\r\n      consine = _div_(_negate_(dotResult), vec3.length(ray.direction()));\r\n    }\r\n\r\n    let refractProb = 0.0;\r\n\r\n    if (refract(ray.direction(), outwardNormal, ni_over_nt, ref)) {\r\n      refractProb = schlick(consine, this.refractIndex);\r\n    } else {\r\n      refractProb = 1.0;\r\n    }\r\n\r\n    if (Math.random() < refractProb) {\r\n      ref.scattered = new Ray(record.p, reflected);\r\n    } else {\r\n      ref.scattered = new Ray(record.p, ref.refracted);\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\nconst color = (ray, world, depth = 0) => {\r\n  let record = createRecord();\r\n\r\n  if (world.hit(ray, 0.001, Infinity, record)) {\r\n    let ref = {\r\n      scattered: null,\r\n      attenuation: 0\r\n    };\r\n\r\n    if (depth >= 50 || !record.material.scatter(ray, record, ref)) {\r\n      return from(0.0, 0.0, 0.0);\r\n    }\r\n\r\n    return _mul_(ref.attenuation, color(ref.scattered, world, _add_(depth, 1)));\r\n  }\r\n\r\n  let direction = vec3.normalize(vec3.create(), ray.direction());\r\n  return lerp(_mul_(0.5, _add_(direction[1], 1.0)), from(1.0, 1.0, 1.0), from(0.5, 0.7, 1.0));\r\n};\r\n\r\nconst randomScene = amount => {\r\n  let list = [];\r\n  let range = Math.floor(_div_(Math.sqrt(amount), 2));\r\n\r\n  let start = _negate_(range);\r\n\r\n  let end = +range;\r\n  list[0] = new Sphere(from(0.0, -1000, 0), 1000, new LambertianMaterial(from(0.5, 0.5, 0.5)));\r\n  let i = 1;\r\n  let based = from(4.0, 0.2, 0.0);\r\n\r\n  for (let a = start; a < end; a++) {\r\n    for (let b = start; b < end; b++) {\r\n      let chooseMat = Math.random();\r\n      let center = from(_add_(a, _mul_(0.9, Math.random())), 0.2, _add_(b, _mul_(0.9, Math.random())));\r\n\r\n      if (vec3.length(_sub_(center, based)) > 0.9) {\r\n        if (chooseMat < 0.8) {\r\n          let material = new LambertianMaterial(from(_mul_(Math.random(), Math.random()), _mul_(Math.random(), Math.random()), _mul_(Math.random(), Math.random())));\r\n          list[i++] = new Sphere(center, 0.2, material);\r\n        } else if (chooseMat < 0.95) {\r\n          let material = new MetalMaterial(from(_mul_(0.5, _add_(1, Math.random())), _mul_(0.5, _add_(1, Math.random())), _mul_(0.5, _add_(1, Math.random()))), _mul_(0.5, Math.random()));\r\n          list[i++] = new Sphere(center, 0.2, material);\r\n        } else {\r\n          list[i++] = new Sphere(center, 0.2, new DielectricMaterial(1.5));\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  list[i++] = new Sphere(from(0.0, 1.0, 0.0), 1.0, new DielectricMaterial(1.5));\r\n  list[i++] = new Sphere(from(-4.0, 1.0, 0.0), 1.0, new LambertianMaterial(from(0.4, 0.2, 0.1)));\r\n  list[i++] = new Sphere(from(4.0, 1.0, 0.0), 1.0, new MetalMaterial(from(0.7, 0.6, 0.5), 0.0));\r\n  return new HitableList(list);\r\n};\r\n\r\nexport default (({\r\n  width = 800,\r\n  height = 400,\r\n  amount = 2,\r\n  lookFrom = from(13.0, 2.0, 3.0),\r\n  lookAt = from(0.0, 0.0, 0.0),\r\n  vup = from(0.0, 1.0, 0.0),\r\n  vfov = 20,\r\n  aspect = _div_(width, height),\r\n  focusDist = 10,\r\n  aperture = 0.1\r\n}) => {\r\n  let nx = width;\r\n  let ny = height;\r\n  let camera = new Camera(lookFrom, lookAt, vup, vfov, aspect, aperture, focusDist);\r\n  let world = randomScene(amount);\r\n\r\n  let renderByPosition = (x, y) => {\r\n    let u = _div_(_add_(x, Math.random()), nx);\r\n\r\n    let v = _div_(_add_(y, Math.random()), ny);\r\n\r\n    let ray = camera.getRay(u, v);\r\n    return color(ray, world);\r\n  };\r\n\r\n  let render = function* () {\r\n    for (let j = _sub_(ny, 1); j >= 0; j--) {\r\n      for (let i = 0; i < nx; i++) {\r\n        let [r, g, b] = renderByPosition(i, j);\r\n        let a = 1;\r\n        yield r;\r\n        yield g;\r\n        yield b;\r\n        yield a;\r\n      }\r\n    }\r\n  };\r\n\r\n  return {\r\n    render,\r\n    renderByPosition\r\n  };\r\n});","import React, { useState, useEffect, useRef } from 'react'\r\nimport createRayTracing from './ray-tracing'\r\n\r\nconst noop = () => {}\r\nconst frame = (f = noop) =>\r\n  new Promise(resolve => {\r\n    requestAnimationFrame(() => {\r\n      f()\r\n      resolve()\r\n    })\r\n  })\r\n\r\nconst getMSE = (listA, listB) => {\r\n  let sum = 0\r\n  for (let i = 0; i < listA.length; i++) {\r\n    sum += Math.pow(listA[i] - listB[i], 2)\r\n  }\r\n  return sum / listA.length\r\n}\r\n\r\n// mean squared error\r\nconst sortByMSE = (prev, current) => {\r\n  let result = []\r\n\r\n  for (let i = 0; i < prev.length; i += 4) {\r\n    let index = Math.floor(i / 4)\r\n    let listA = [prev[i + 0], prev[i + 1], prev[i + 2], prev[i + 3]]\r\n    let listB = [current[i + 0], current[i + 1], current[i + 2], current[i + 3]]\r\n\r\n    result[index] = {\r\n      index,\r\n      value: getMSE(listA, listB)\r\n    }\r\n  }\r\n\r\n  return result.sort((a, b) => b.value - a.value)\r\n}\r\n\r\nconst toColor = value => {\r\n  return Math.floor(255.99 * Math.sqrt(value))\r\n}\r\n\r\nexport default function Demo01() {\r\n  let [time, setTime] = useState(0)\r\n  let ref = useRef()\r\n  let deubgRef = useRef()\r\n  let width = 800\r\n  let height = 400\r\n\r\n  useEffect(() => {\r\n    let canvas = ref.current\r\n    let debugCanvas = deubgRef.current\r\n    let ctx = canvas.getContext('2d')\r\n    let ray = createRayTracing({ width, height, amount: 50 })\r\n    let imageData = ctx.createImageData(width, height)\r\n    let data = new Float32Array(width * height * 4)\r\n    let prevImageData = new Float32Array(width * height * 4)\r\n    let currImageData = new Float32Array(width * height * 4)\r\n    let renderCount = new Float32Array(width * height * 4)\r\n    let innerCount = 1\r\n    let innerTime = 0\r\n    let tid = null\r\n    let over = false\r\n\r\n    let renderToCanvas = () => {\r\n      ctx.fillColor = `rgba(0, 0, 0, 1)`\r\n      ctx.clearRect(0, 0, width, height)\r\n      ctx.putImageData(imageData, 0, 0)\r\n    }\r\n\r\n    let showData = () => {\r\n      let data = renderCount\r\n      let ctx = debugCanvas.getContext('2d')\r\n      let imageData = ctx.createImageData(width, height)\r\n\r\n      for (let i = 0; i < data.length; i++) {\r\n        if ((i + 1) % 4 === 0) {\r\n          imageData.data[i] = 255\r\n        } else {\r\n          imageData.data[i] = data[i]\r\n        }\r\n      }\r\n      ctx.clearRect(0, 0, width, height)\r\n      ctx.putImageData(imageData, 0, 0)\r\n    }\r\n\r\n    let renderByPosition = (x, y) => {\r\n      let [r, g, b, a = 1] = ray.renderByPosition(x, y)\r\n      let i = ((height - y) * width + x) * 4\r\n\r\n      data[i + 0] += r\r\n      data[i + 1] += g\r\n      data[i + 2] += b\r\n      data[i + 3] += a\r\n\r\n      renderCount[i + 0] += 1\r\n      renderCount[i + 1] += 1\r\n      renderCount[i + 2] += 1\r\n      renderCount[i + 3] += 1\r\n\r\n      prevImageData[i + 0] = imageData.data[i + 0]\r\n      prevImageData[i + 1] = imageData.data[i + 1]\r\n      prevImageData[i + 2] = imageData.data[i + 2]\r\n      prevImageData[i + 3] = imageData.data[i + 3]\r\n\r\n      imageData.data[i + 0] = toColor(data[i + 0] / renderCount[i + 0])\r\n      imageData.data[i + 1] = toColor(data[i + 1] / renderCount[i + 1])\r\n      imageData.data[i + 2] = toColor(data[i + 2] / renderCount[i + 2])\r\n      imageData.data[i + 3] = toColor(data[i + 3] / renderCount[i + 3])\r\n\r\n      currImageData[i + 0] = imageData.data[i + 0]\r\n      currImageData[i + 1] = imageData.data[i + 1]\r\n      currImageData[i + 2] = imageData.data[i + 2]\r\n      currImageData[i + 3] = imageData.data[i + 3]\r\n    }\r\n\r\n    let coarseRender = async (step = 4) => {\r\n      let start = Date.now()\r\n      let duration = 0\r\n      for (let j = height - 1; j >= 0; j -= step) {\r\n        for (let i = 0; i < width; i += step) {\r\n          if (over) return\r\n          renderByPosition(i, j)\r\n          duration = Date.now() - start\r\n          if (duration % 100 === 0) {\r\n            setTime(innerTime + duration)\r\n            await frame(() => {\r\n              renderToCanvas()\r\n              showData()\r\n            })\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    let render = async () => {\r\n      let start = Date.now()\r\n      let i = 0\r\n      let duration = 0\r\n\r\n      for (let n of ray.render()) {\r\n        renderCount[i] += 1\r\n        data[i] += n\r\n        prevImageData[i] = imageData.data[i]\r\n        imageData.data[i] = toColor(data[i] / renderCount[i])\r\n        currImageData[i] = imageData.data[i]\r\n        i += 1\r\n        duration = Date.now() - start\r\n        if (duration % 100 === 0) {\r\n          setTime(innerTime + duration)\r\n          await frame(() => {\r\n            renderToCanvas()\r\n            showData()\r\n          })\r\n        }\r\n        if (over) return\r\n      }\r\n\r\n      if (over) return\r\n\r\n      renderToCanvas()\r\n      setTime((innerTime += Date.now() - start))\r\n      innerCount += 1\r\n\r\n      if (innerCount > 2) {\r\n        scheduleRender()\r\n      } else {\r\n        tid = requestAnimationFrame(render)\r\n      }\r\n    }\r\n\r\n    let scheduleRender = async (count = 0) => {\r\n      let list = sortByMSE(prevImageData, currImageData)\r\n      let start = Date.now()\r\n      let duration = 0\r\n\r\n      for (let i = 0; i < 20000; i++) {\r\n        let item = list[i]\r\n        let x = item.index % width\r\n        let y = height - Math.floor(item.index / width)\r\n\r\n        renderByPosition(x, y)\r\n        duration = Date.now() - start\r\n\r\n        if (duration % 100 === 0) {\r\n          setTime(innerTime + duration)\r\n          await frame(() => {\r\n            renderToCanvas()\r\n            showData()\r\n          })\r\n        }\r\n        if (over) return\r\n      }\r\n\r\n      if (over) return\r\n\r\n      renderToCanvas()\r\n      setTime((innerTime += Date.now() - start))\r\n      tid = requestAnimationFrame(() => {\r\n        if (count < 5) {\r\n          scheduleRender(count + 1)\r\n        } else {\r\n          render()\r\n        }\r\n      })\r\n    }\r\n\r\n    coarseRender(4).then(render)\r\n\r\n    return () => {\r\n      over = true\r\n      clearTimeout(tid)\r\n    }\r\n  }, [])\r\n\r\n  return (\r\n    <>\r\n      <canvas width={width} height={height} ref={ref} style={{ background:'#000' }} />\r\n      <br />\r\n      <canvas width={width} height={height} ref={deubgRef} />\r\n      <h3>光线追踪时间：{(time / 1000).toFixed(2)}秒</h3>\r\n    </>\r\n  )\r\n}\r\n"],"sourceRoot":""}